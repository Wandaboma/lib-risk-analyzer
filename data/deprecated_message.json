[
  {
    "name": "blue_engine_dynamic",
    "replacement": "blue_engine",
    "message": "# Blue Engine Dynamic  This is a wrapper over the core of the Blue Engine to provide a dynamic linking feature. However we do not recommend using this directly. Look into [blue_engine](https://crates. io/crates/blue_engine) instead."
  },
  {
    "name": "rawbytes",
    "replacement": "zerocopy",
    "message": "x[0], 1); } ```  Note that structures must should have the `C` representation to ensure that a new Rust release is not going to change the representation. ## Warning and alternatives  Warning: this crate contains two instances of the `unsafe` keyword, because there are no other ways to achieve this in Rust. Still, you may be named and shamed for using a crate that perfectly does the job, but includes that keyword. An alternative is the `zerocopy` crate. It's bigger, far more complex, not any faster, and it also require the `unsafe` keyword. But it's maintained by a Google employee, so you may be less named and shamed."
  },
  {
    "name": "matrix_uri",
    "replacement": "Ruma",
    "message": "svg)](https://gitlab. com/famedly/company/backend/libraries/matrix_uri/-/commits/main) | [! [pipeline status](https://gitlab. com/famedly/company/backend/libraries/matrix_uri/badges/main/pipeline. svg)](https://gitlab. com/famedly/company/backend/libraries/matrix_uri/-/commits/main) |  ## Deprecation Notice  Ruma has support for parsing both types of Matrix URIs as of version `0. 5. 0`, thus this crate is now deprecated. ## Original Description  A crate for building and parsing Matrix URIs according to both the [matrix. to specification](https://matrix. org/docs/spec/appendices#matrix-to-navigation) and also [MSC2312](https://github."
  },
  {
    "name": "linera-wasmer-compiler-cranelift",
    "replacement": "wasmer-compiler-llvm",
    "message": "shields. io/crates/v/wasmer-compiler-cranelift. svg)](https://crates. io/crates/wasmer-compiler-cranelift)  This crate contains a compiler implementation based on Cranelift. ## Usage  ```rust use wasmer::{Store, EngineBuilder}; use wasmer_compiler_cranelift::Cranelift;  let compiler = Cranelift::new(); let mut store = Store::new(compiler); ```  *Note: you can find a [full working example using Cranelift compiler here][example]. *  ## When to use Cranelift  We recommend using this compiler crate **only for development proposes**. For production we recommend using [`wasmer-compiler-llvm`] as it offers a much better runtime speed (50% faster on average). ### Acknowledgments  This project borrowed some of the function lowering from [`cranelift-wasm`]. Please check [Wasmer `ATTRIBUTIONS`] to further see licenses and other attributions of the project. [example]: https://github. com/wasmerio/wasmer/blob/main/examples/compiler_cranelift."
  },
  {
    "name": "reqwest-cache",
    "replacement": "http-cache-reqwest",
    "message": "com/famedly/company/backend/libraries/reqwest-cache/-/commits/main [badge-docs-main-img]: https://img. shields. io/badge/docs-main-blue [badge-docs-main-url]: https://famedly. gitlab. io/company/backend/libraries/reqwest-cache/project_name/index. html  **DEPRECATION NOTICE:** This crate is unmaintained. Use [http-cache-reqwest](https://crates. io/crates/http-cache-reqwest) instead, which also has more features. `reqwest-cache` is a crate based on [`reqwest-middleware`](https://docs. rs) which adds response caching based on HTTP cache headers. ## Pre-commit usage  1."
  },
  {
    "name": "picnic-sys",
    "replacement": "libpicnic-sys",
    "message": "# Declarations for the Picnic digital signature scheme  This crate is deprecated. Please use [libpicnic-sys](https://crates. io/crates/libpicnic-sys) instead. ## License  This crate is licensed under the MIT license. For Picnic's license, please check its [license file](https://github. com/IAIK/Picnic/blob/master/LICENSE)."
  },
  {
    "name": "better-minify-js",
    "replacement": "minify-js",
    "message": "# better-minify-js  > Fork of minify-js, which is unmaintained. Extremely fast JavaScript minifier, written in Rust. ## Goals  - Fully written in Rust for maximum compatibility with Rust programs and derivatives (FFI, WASM, embedded, etc. ). - Maximises performance on a single CPU core for simple efficient scaling and easy compatible integration. - Minification of individual inputs/files only; no bundling or transforming."
  },
  {
    "name": "phoner",
    "replacement": "Phonet",
    "message": "# Phoner  **This package has been moved to [Phonet](https://crates. io/crates/phonet)**  If you would like to take ownership of this crate name, please message me on [GitHub](https://github. com/darccyy)"
  },
  {
    "name": "pixel-game-lib",
    "replacement": "chuot",
    "message": "This crate has been renamed to [`chuot`](https://docs. rs/chuot/latest/chuot/) and is deprecated. If you want to take over the crate name send me a message!"
  },
  {
    "name": "ion-hash",
    "replacement": "ion-rs",
    "message": "# `ion-hash-rust`  ***This package is deprecated in favor of the `ion-hash` feature in `ion-rs >= 0. 16. 0`. ***  See [Ion Rust][ion-rust] for details. [ion-rust]: https://github. com/amazon-ion/ion-rust"
  },
  {
    "name": "shuttle-secrets",
    "replacement": "shuttle-runtime",
    "message": "# Shuttle Secrets  This plugin has been moved to [shuttle-runtime](https://crates. io/crates/shuttle-runtime)."
  },
  {
    "name": "rk3399-rs",
    "replacement": "rk3399-pac",
    "message": "# RK3399 Register Maps [DEPRECATED]  ## Note  ### This crate has been renamed to rk3399-pac and is available at [crates. io/crates/rk3399-pac](https://crates. io/crates/rk3399-pac)  This crate provides the structure definitions for the RK3399 SoC register maps in Rust generated using the `svd2rust` tool. The SVD file was obtained by parsing the Rockchip RK3399 Technical Reference Manual. The scripts used to generate the SVD file can be found in the [`CaptainIRS/rk3399-trm`](https://github. com/CaptainIRS/rk3399-trm) repository."
  },
  {
    "name": "htmlprep",
    "replacement": "sarascript",
    "message": "DEPRECATED (use sarascript instead): An HTML Pre-Processor for creating static HTML files"
  },
  {
    "name": "scanning",
    "replacement": "barcoders",
    "message": "com/algorithms/anowell/scanning)  ! [SCANNING](/media/logo. jpg? raw=true \"SCANNING\")  **Scanning** is a barcode-encoding library for the Rust programming language. > **Note**: This project is a fork of the original [barcoders](https://github. com/buntine/barcoders) library, which is no longer maintained. Scanning allows you to encode valid data for a chosen barcode symbology into a ```Vec<u8>``` representation of the underlying binary structure. From here, you can take advantage of one of the optional builtin generators (for exporting to SVG, GIF, PNG, etc) or build your own. ## Installation  For encode-only functionality (e. g if you just want to translate a `String` into a `Vec<u8>` of binary digits):  ```toml [dependencies] scanning = \"2. 0."
  },
  {
    "name": "tokio-send-fd",
    "replacement": "async-send-fd",
    "message": "# tokio-send-fd  ⚠️This crate is deprecated. Use [async-send-fd](https://crates. io/crates/async-send-fd) instead. A library to send tokio UnixStream and raw file descriptors over tokio UnixStream connections. [! [Crates."
  },
  {
    "name": "configparser",
    "replacement": "tokio",
    "message": "3    - Add default empty line on empty strings. - Feature to append to existing `Ini` objects. - Minor lint fixes. - 3. 0. 4   - Adds pretty printing functionality   - Replaces `async-std` with `tokio` as the available async runtime   - *The `async-std` feature will be deprecated in a future release* - 3. 1. 0 (**STABLE**)   - `async-std` has been deprecated   - Fixes a bug where multiline values did not preserve newlines   - Fixes a bug where empty sections were removed   - Adds a feature to support inline comments  ### 🔜 Future plans  - Support for appending sections, coercing them as well. - Benchmarking against similar packages."
  },
  {
    "name": "field_iterator",
    "replacement": "fields-iter",
    "message": "# Field iterator  Based on the abandoned [struct_iterable](https://github. com/decomoraes/rust_struct_iterable). The rest of the README is taken from it. This is meant as a lighter alternative to [fields-iter](https://github. com/ChayimFriedman2/fields-iter). ## How to Use  First, add the crate to your `Cargo."
  },
  {
    "name": "gcookie",
    "replacement": "rookie",
    "message": "1\"\r ```\r \r > [! note]  \r > Version 0. 1. 0 introduces a breaking change: the API has changed. > It now uses the library \"rookie\" as the backend to read cookies. > The original internal cookie reading function is deprecated. get cookie by Chrome\r \r ```rust\r let site = \"http://google. com\";\r let cookie = gcookie::get_cookies(\"chrome\", site);\r \r let site = \"bing. com\";\r let browser = \"Edge\";\r let cookie = gcookie::get_cookies(browser, site);\r assert! (cookie. is_ok());\r \r let site = \"https://google."
  },
  {
    "name": "iso8061-timestamp",
    "replacement": "iso8601-timestamp",
    "message": "Deprecated, use iso8601-timestamp instead"
  },
  {
    "name": "esp32s3-hal",
    "replacement": "esp-hal",
    "message": "io/matrix/esp-rs:matrix. org? label=join%20matrix&labelColor=1C2C2E&color=BEC5C9&logo=matrix&style=flat-square)](https://matrix. to/#/#esp-rs:matrix. org)  > [! WARNING]   > > This package has been deprecated in favour of [esp-hal](https://github. com/esp-rs/esp-hal/tree/main/esp-hal). > > Please refer to the migration guide for help with updating your projects > to use the new 'esp-hal' package: > > https://github. com/esp-rs/esp-hal/releases/tag/v0. 16. 0  `no_std` HAL for the ESP32 from Espressif."
  },
  {
    "name": "complex",
    "replacement": "num",
    "message": "The package is deprecated in favor of num."
  },
  {
    "name": "rpki-rtr",
    "replacement": "rpki",
    "message": "# rpki-rtr RPKI RTR library for Rust. <i> The functionality of this crate has been merged into the [rpki](https://crates. io/crates/rpki) crate. The rpki-rtr crate therefore is deprecated and should not be used any more. </i>"
  },
  {
    "name": "sn_messaging",
    "replacement": "safe_network",
    "message": "## **PLEASE NOTE THAT THIS REPOSITORY HAS NOW BEEN ARCHIVED** ### All messaging development is now via the [safe_network](https://github. com/maidsafe/safe_network) repository  #  # Safe Network Messaging  ## License  This Safe Network library is dual-licensed under the Modified BSD ([LICENSE-BSD](LICENSE-BSD) https://opensource. org/licenses/BSD-3-Clause) or the MIT license ([LICENSE-MIT](LICENSE-MIT) https://opensource. org/licenses/MIT) at your option. ## Contributing  Want to contribute? Great :tada:  There are many ways to give back to the project, whether it be writing new code, fixing bugs, or just reporting errors."
  },
  {
    "name": "crossterm_screen",
    "replacement": "crossterm",
    "message": "! [Lines of Code][s7] [! [Latest Version][s1]][l1] [! [MIT][s2]][l2] [! [docs][s3]][l3] [! [Join us on Discord][s5]][l5]\r \r # Crossterm Screen\r \r **The `crossterm_screen` crate is deprecated and no longer maintained. The GitHub repository will\r be archived soon. All the code is being moved to the `crossterm`\r [crate](https://github. com/crossterm-rs/crossterm). You can learn more in the\r [Merge sub-crates to the crossterm crate](https://github. com/crossterm-rs/crossterm/issues/265)\r issue."
  },
  {
    "name": "simple-xmlrpc",
    "replacement": "serde_xmlrpc",
    "message": "# simple-xmlrpc-rs  A simple XMLRPC library. This is meant to be the minimal needed to build out applications using XMLRPC. No additional parsing, no transports, etc. Please note that this library has been renamed to [serde\\_xmlrpc](https://crates. io/crates/serde_xmlrpc). All functions have been marked as deprecated."
  },
  {
    "name": "locdev",
    "replacement": "hostie",
    "message": "⚠️ DEPRECATED: This crate has been renamed to 'hostie'. Please use 'hostie' instead."
  },
  {
    "name": "ed25519-dalek-v2",
    "replacement": "ed25519-dalek",
    "message": "# ARCHIVED  This repo has been [moved](https://github. com/dalek-cryptography/curve25519-dalek). Please direct all issues and pull requests to the new repo. This repo will remain here in a read-only state for historical purposes. ---  # ed25519-dalek [! [](https://img."
  },
  {
    "name": "stac-async",
    "replacement": "stac",
    "message": "# stac-async  ⚠️ This crate is deprecated, use [stac](https://crates. io/crates/stac) instead."
  },
  {
    "name": "user_agent",
    "replacement": "cookie_store",
    "message": "14`. It currently lacks an API for saving/loading a `CookieStore`, but consider using the directly provided functionality in lieu of this crate. Provides the concept of a user agent session, storing and retrieving cookies over multiple HTTP requests (a `Session`). Included is an implementation of `Session` using a [reqwest](https://crates. io/crates/reqwest) `reqwest::Client`. The RFC6265 implementation has been moved to a separate [repo](https://github. com/pfernie/cookie_store)/[crate](https://crates. io/crates/cookie_store). ## Features `preserve_order` - enable the `preserve_order` feature of `cookie_store` `default-tls` - enable the `default-tls` feature of `reqwest` `rustls-tls` - enable the `rustls-tls` feature of `reqwest`  ## License This project is licensed and distributed under the terms of both the MIT license and Apache License (Version 2. 0). See [LICENSE-APACHE](LICENSE-APACHE) and [LICENSE-MIT](LICENSE-MIT)"
  },
  {
    "name": "nspire",
    "replacement": "ndless",
    "message": "DEPRECATED - use ndless instead"
  },
  {
    "name": "rtlola-input-plugins",
    "replacement": "rtlola-io-plugins",
    "message": "Input plugins to be used in the various frontends of the interpreter; This crate is deprecated use the `rtlola-io-plugins` crate instead"
  },
  {
    "name": "rustfmt",
    "replacement": "rustfmt-nightly",
    "message": "[Build Status](https://ci. appveyor. com/api/projects/status/github/rust-lang-nursery/rustfmt? svg=true)](https://ci. appveyor. com/api/projects/status/github/rust-lang-nursery/rustfmt)  This version of rustfmt is deprecated. Use [rustfmt-nightly](https://crates. io/crates/rustfmt-nightly). ## License  Rustfmt is distributed under the terms of both the MIT license and the Apache License (Version 2. 0). See [LICENSE-APACHE](LICENSE-APACHE) and [LICENSE-MIT](LICENSE-MIT) for details."
  },
  {
    "name": "aesni",
    "replacement": "aes",
    "message": "DEPRECATED: replaced by the `aes` crate"
  },
  {
    "name": "linux-embedded-hal",
    "replacement": "gpio-cdev",
    "message": "rs/linux-embedded-hal) ! [Minimum Supported Rust Version](https://img. shields. io/badge/rustc-1. 65+-blue. svg)  # `linux-embedded-hal`  > Implementation of the [`embedded-hal`] traits for Linux devices  This project is developed and maintained by the [Embedded Linux team][team]. [`embedded-hal`]: https://crates. io/crates/embedded-hal  ## [Documentation](https://docs. rs/linux-embedded-hal)  ## GPIO character device  Since Linux kernel v4. 4 the use of sysfs GPIO was deprecated and replaced by the character device GPIO. See [gpio-cdev documentation](https://github."
  },
  {
    "name": "deepspeech",
    "replacement": "coqui-stt",
    "message": "# DEPRECATION NOTICE  **This project is [deprecated](https://github. com/RustAudio/deepspeech-rs/issues/48) in favour of [coqui-stt](https://github. com/tazz4843/coqui-stt). Please use that project instead. **  # deepspeech-rs  [! [docs](https://docs."
  },
  {
    "name": "quicr",
    "replacement": "quinn",
    "message": "Moved to quinn (was: QUIC transport protocol implementation for Tokio)"
  },
  {
    "name": "shuttle-poise",
    "replacement": "shuttle-serenity",
    "message": "## Shuttle service integration for the Poise Discord bot framework  **This plugin is deprecated. **  Poise >=0. 6 can now be used together with [shuttle-serenity](https://docs. rs/shuttle-serenity/latest/shuttle_serenity/)."
  },
  {
    "name": "dart-bindgen",
    "replacement": "ffigen",
    "message": "<h1 align=\"center\">Dart Bindgen</h1> <div align=\"center\">   <strong>         A tool for generating Dart FFI bindings to C Header file. </strong>  </div>  <br />  <h3 align=\"center\">⚠️ This crate is deprecated and 🚧 unmaintained 🚧 for now, please prefer <a href=\"https://github. com/dart-lang/ffigen\">ffigen</a> from the dart team. </h3>  <br />  <div align=\"center\">   <a href=\"https://github. com/sunshine-protocol/dart-bindgen\">     <img src=\"https://github. com/sunshine-protocol/dart-bindgen/workflows/Snapshot%20Testing/badge. svg\"       alt=\"Snapshot Testing\" />   </a>    <a href=\"https://github."
  },
  {
    "name": "positioned-io-preview",
    "replacement": "positioned-io",
    "message": "positioned-io-preview deprecated ================================  The changes published in this crate have been merged back into [`positioned-io`](https://crates. io/crates/positioned-io)."
  },
  {
    "name": "vexide-math",
    "replacement": "Evian",
    "message": "# vexide-math  Common mathematical formulas and models implemented for [`vexide`](https://crates. io/crates/vexide). # Warning This crate is no longer a part of vexide, and is therefore no longer maintained. Please consider using Evian instead!"
  },
  {
    "name": "colorparse",
    "replacement": "anstyle-git",
    "message": "# Deprecation notice  I recommend using [`anstyle-git`](https://crates. io/crates/anstyle-git) instead of this crate. `colorparse` works exclusively with `ansi_term`; `anstyle-git` and the `anstyle` family of crates provide an abstraction over several text formatting libraries. # colorparse  `colorparse::parse` parses a color configuration string (in Git syntax) into an `ansi_term::Style`:  # Examples  ```rust if let Ok(color) = colorparse::parse(\"bold red blue\") {     println! (\"{}\", color. paint(\"Bold red on blue\")); } ```  ```rust let hyperlink_style = colorparse::parse(\"#0000ee ul\")."
  },
  {
    "name": "twoway",
    "replacement": "memchr",
    "message": "(Deprecated - use crate memchr instead. ) Fast substring search for strings and byte strings. Optional SSE4. 2 acceleration (if detected at runtime) using pcmpestri. Memchr is the only mandatory dependency. The two way algorithm is also used by rust's libstd itself, but here it is exposed both for byte strings, using memchr, and optionally using a SSE4."
  },
  {
    "name": "russell_openblas",
    "replacement": "russell_lab",
    "message": "**DEPRECATED:** This crate has been deprecated. Please use [russell_lab](https://github. com/cpmech/russell) which provides high-level functions wrapping OpenBLAS and Intel MKL. You may also be interested in [openblas-src](https://github. com/blas-lapack-rs/openblas-src)"
  },
  {
    "name": "jujutsu-lib",
    "replacement": "jj-lib",
    "message": "This crate has been replaced by the jj-lib crate. Please upgrade to jj-lib version 0. 8+, or specify jujutsu-lib of version \"=0. 7. 0\" if you need to compile an obsolete version."
  },
  {
    "name": "prettyprint",
    "replacement": "bat",
    "message": "[CI](https://github. com/mre/prettyprint/workflows/CI/badge. svg)  Syntax highlighting library with batteries included. > :warning: For new projects, you might want to use [`bat`](https://github. com/sharkdp/bat/) instead,  > which can be used as a library now. `prettyprint` is in maintenance mode now, which means it will  > not see any major updates anymore, but pull requests will still be reviewed and dependencies will  > be kept up-to-date for the time being. You might want consider migrating away, though. ## Quick start  ! [Screenshot](. /assets/screenshot. jpg)  The above output was created with the following code:  ```rust let printer = PrettyPrinter::default()     ."
  },
  {
    "name": "pallet-eras",
    "replacement": "pallet-eons",
    "message": "Substrate pallet for recording eras (to be replaced by pallet-eons)."
  },
  {
    "name": "pact_matching_ffi",
    "replacement": "pact_ffi",
    "message": "Pact matching interface for foreign languages. [DEPRECATED, replaced with pact_ffi]"
  },
  {
    "name": "lateinit",
    "replacement": "static_cell",
    "message": "[Latest](https://img. shields. io/crates/v/lateinit. svg)](https://crates. io/crates/lateinit)  **Disclaimer**: this crate breaks Rust's safety guarantees. I strongly recommend using [`static_cell`](https://docs. rs/static_cell/2. 1. 0/static_cell/) instead in almost all cases. In case that doesn't meet your needs, consider [`spin::Once`](https://mvdnes. github."
  },
  {
    "name": "bevy_xpbd_3d",
    "replacement": "avian3d",
    "message": "Deprecated, use `avian3d` instead. A physics engine based on Extended Position Based Dynamics for the Bevy game engine"
  },
  {
    "name": "bevy_xpbd_2d",
    "replacement": "avian2d",
    "message": "Deprecated, use `avian2d` instead. A physics engine based on Extended Position Based Dynamics for the Bevy game engine"
  },
  {
    "name": "bugsyth_engine_imgui_support",
    "replacement": "imgui-rs",
    "message": "# imgui support for Bugsyth Engine\r \r Original repositories for the crates used:\r - ['imgui-rs'](https://github. com/imgui-rs/imgui-rs)\r - ['imgui-glium-renderer](https://github. com/imgui-rs/imgui-glium-renderer) - Deprecated\r - ['imgui-winit-support'](https://github. com/imgui-rs/imgui-winit-support)"
  },
  {
    "name": "esp32-hal",
    "replacement": "esp-hal",
    "message": "io/matrix/esp-rs:matrix. org? label=join%20matrix&labelColor=1C2C2E&color=BEC5C9&logo=matrix&style=flat-square)](https://matrix. to/#/#esp-rs:matrix. org)  > [! WARNING]   > > This package has been deprecated in favour of [esp-hal](https://github. com/esp-rs/esp-hal/tree/main/esp-hal). > > Please refer to the migration guide for help with updating your projects > to use the new 'esp-hal' package: > > https://github. com/esp-rs/esp-hal/releases/tag/v0. 16. 0  `no_std` HAL for the ESP32 from Espressif."
  },
  {
    "name": "abstract-core",
    "replacement": "abstract-sdk",
    "message": "# Abstract  This package contains everything you need to interact with Abstract contracts. This package contains: * Abstract contract interface messages * Abstract contract states * Abstract objects (preferably use the re-exported version in [Abstract-SDK](https://crates. io/crates/abstract-sdk))  ## Usage ```rust // Import a contract Exec/Init/Query message abstract_core::contract::ExecuteMsg // Import a contract state lay-out abstract_core::contract::state::STATE // Import a state object abstract_core::object::ProxyValue; ```  ## Messages  Each interface in individually commented. ## States Each state-layout is also individually covered  ## Objects Abstract Objects are used to store information along with helper functions. We provide these as imports so the data can be retrieved externally (using Raw Queries). If you want to use these objects in your own contracts we suggest using the abstract-sdk package."
  },
  {
    "name": "pink-json",
    "replacement": "serde-json-core",
    "message": "# pink-json The serde-json-core with `alloc::*` types. # `serde-json-core`  > [`serde-json`] for `no_std` programs  [`serde-json`]: https://crates. io/crates/serde_json  This project is developed and maintained by the [rust-embedded-community]. [rust-embedded-community]: https://github. com/rust-embedded-community/meta  ## [Documentation](https://docs. rs/serde-json-core)  ## Minimum Supported Rust Version (MSRV)  This crate is guaranteed to compile on stable Rust 1. 51. 0 and up."
  },
  {
    "name": "ansi-to-tui",
    "replacement": "ratatui",
    "message": "io/crates/ansi-to-tui)  A nom parser to parse text with ANSI color codes and turn them into [`ratatui::text::Text`][Text]. For people still using [tui-rs](docs. rs/tui) use version `v2. *` for people migrating to [ratatui](docs. rs/ratatui) use version `v3. *` I recommend switching over to ratatui since tui-rs is currently unmaintained. | Color  | Supported | Examples                 | | ------ | :-------: | ------------------------ | | 24 bit |     ✓     | `\\x1b[38;2;<R>;<G>;<B>m` | | 8 bit  |     ✓     | `\\x1b[38;5;<N>m`         | | 4 bit  |     ✓     | `\\x1b[30. . 37;40. . 47m`    |  ## Example  ```rust use ansi_to_tui::IntoText; let buffer = std::fs::read(\"ascii/text."
  },
  {
    "name": "ruma-api",
    "replacement": "ruma-common",
    "message": "Deprecated: crate merged into ruma-common"
  },
  {
    "name": "ul-next-sys",
    "replacement": "ul-next",
    "message": "[docs. rs (with version)](https://img. shields. io/docsrs/ul-next/latest)](https://docs. rs/ul-next)   High level rust bindings for [Ultralight]. Alternative for the abandoned [`rust-ul`]. [Ultralight] is a lightweight, high-performance HTML rendering engine designed for applications that require a high degree of customization. Using GPU-accelerated HTML rendering, it's a great fit for rendering user interfaces in games, and other applications. Tested on Windows and Linux. > The API currently resembles the original C++ API for simplicity, and probably it will be changed to be more `rust` idiomatic. > Though it shouldn't affect older versions because of [`semver`](https://semver."
  },
  {
    "name": "sn_url",
    "replacement": "safe_network",
    "message": "## **PLEASE NOTE THAT THIS REPOSITORY HAS NOW BEEN ARCHIVED** ### All URL development is now via the [safe_network](https://github. com/maidsafe/safe_network) repository  #  # The Safe URL  | [MaidSafe website](https://maidsafe. net) | [Safe Dev Forum](https://forum. safedev. org) | [Safe Network Forum](https://safenetforum. org) | |:----------------------------------------:|:-------------------------------------------:|:----------------------------------------------:|  ## Description   ## The API   ## Further Help  You can discuss development-related questions on the [Safe Dev Forum](https://forum."
  },
  {
    "name": "btree_experiment",
    "replacement": "pstd",
    "message": "Crate has moved to\r \r https://crates. io/crates/pstd"
  },
  {
    "name": "assertify",
    "replacement": "assert2",
    "message": "Deprecated: use assert2 for better assertions"
  },
  {
    "name": "easy-http-request",
    "replacement": "reqwest",
    "message": "com/magiclen/easy-http-request/actions/workflows/ci. yml/badge. svg)](https://github. com/magiclen/easy-http-request/actions/workflows/ci. yml)  Easy to send HTTP/HTTPS requests. **This crate was deprecated, use `reqwest` instead. **  **https://crates. io/crates/reqwest**  ## Example  ```rust extern crate easy_http_request;  use easy_http_request::DefaultHttpRequest;  let response = DefaultHttpRequest::get_from_url_str(\"https://magiclen. org\"). unwrap(). send()."
  },
  {
    "name": "geozero-shp",
    "replacement": "geozero",
    "message": "> **DEPRECATED**: The shp driver is now included in `geozero`. # GeoZero Shapefile driver  Reading Shapefiles with [GeoZero](https://github. com/georust/geozero) API. Features: - [x] Read support for OGC simple feature types - [x] Convert to GeoJSON, WKB (PostGIS/GeoPackage), WKT, GEOS, GDAL formats and more - [ ] Support for Multipatch types - [ ] Read spatial index - [ ] Read projection files  For writing Shapefiles either use [shapefile-rs](https://crates. io/crates/shapefile) or the GDAL driver of [GeoZero](https://crates. io/crates/geozero)  Originally based on shapefile-rs from Thomas Montaigu."
  },
  {
    "name": "rsa-export",
    "replacement": "rsa",
    "message": "**DEPRECATED**: As of version 0. 4, the `rsa` crate supports exporting keys [natively](https://docs. rs/rsa/0. 4. 0/rsa/trait. PrivateKeyPemEncoding."
  },
  {
    "name": "ocb",
    "replacement": "ocb3",
    "message": "DEPRECATED: use the `ocb3` crate instead"
  },
  {
    "name": "sn_bls_ckd",
    "replacement": "curv-kzen",
    "message": "Since EIP2333 only proposes the hardened child key derivation, this library has also implemented a method of non-hardened child key derivation inspired by [BIP32](https://github. com/bitcoin/bips/blob/master/bip-0032. mediawiki) to support the current application scenarios. ## Changes  Differences with the original library (<https://github. com/ChainSafe/rust-bls-derivation>) lie in the following:  1. removing the dependency on the unmaintained-for-over-6-years crate [rust-crypto](https://crates. io/crates/rust-crypto); 2. adding the active crate [curv-kzen](https://crates. io/crates/curv-kzen) to support non-hardened BLS child key derivation beyond EIP2333; 3. changing the lower limit of the seed entropy from 16 bytes to 32 bytes to be consistent with the current EIP2333 and [draft-irtf-cfrg-bls-signature-05](https://datatracker. ietf."
  },
  {
    "name": "encrypted_fs",
    "replacement": "encryptedfs",
    "message": "# EncryptedFS [DEPRECATED]  > **⚠️ Warning** > > Moved to [encryptedfs](https://crates. io/crates/encryptedfs). Please use that instead. An encrypted file system that mounts with FUSE on Linux. It can be used to create encrypted directories. It can then safely backup the encrypted folder on an untrusted server without worrying about the data being exposed."
  },
  {
    "name": "wasmparser-nostd",
    "replacement": "wasmparser",
    "message": "> This is a fork of the [`wasmparser` crate] by the [Bytecode Alliance] with > the sole purpose to add `no_std` support with a focus on embedded environments. > > This crate will be deprecated as soon as the original `wasmparser` crate itself supports `no_std`. > > Note: As of version `0. 99. 0` and above the `Url` type from the `url` crate was replaced with >       a simple `String` in order to port the entire crate to `no_std`. This is because the >       complex `url` crate itself does not support `no_std` compilation. [`wasmparser` crate]: https://crates."
  },
  {
    "name": "proto_wasm_plugin",
    "replacement": "proto_core",
    "message": "# proto_wasm_plugin (DEPRECATED)  > Functionality has moved into [proto_core](https://crates. io/crates/proto_core). ! [Crates. io](https://img. shields."
  },
  {
    "name": "pebble-sys",
    "replacement": "pebble-skip",
    "message": "dev/rust-reviews/badge/crev_count/pebble-sys. svg)](https://web. crev. dev/rust-reviews/crate/pebble-sys/)  Low-level FFI bindings for Pebble (watch) SDK 4. 3. I recommend using the high-level wrapper in [`pebble-skip`] instead, since it provides almost the same functionality with full memory safety and with very little overhead. [`pebble-skip`]: https://github. com/Tamschi/pebble-skip  This crate is still heavily work in progress, so expect frequent breaking changes and missing functionality before 0. 1. If you'd like me to prioritise a specific API, please [file a feature request on GitHub]. [file a feature request on GitHub]: https://github."
  },
  {
    "name": "pimalaya-email-tpl",
    "replacement": "mml-lib",
    "message": "**This crate is no longer maintained**, because it has been renamed [mml-lib](https://crates. io/crates/mml-lib). https://git. sr. ht/~soywod/pimalaya"
  },
  {
    "name": "yara-x-proto-yaml",
    "replacement": "YARA-X",
    "message": "io/yara-x/docs/intro/yara-x-vs-yara/). #### Which are the differences at the rule level? Read [this](https://virustotal. github. io/yara-x/docs/writing_rules/differences-with-yara/). #### Is YARA still maintained? Yes, it is. YARA is still being maintained, and future releases will include bug fixes and minor features. However, don’t expect new large features or modules. All efforts to enhance YARA, including the addition of new modules, will now focus on YARA-X. #### What's the current state of YARA-X?"
  },
  {
    "name": "instant",
    "replacement": "web-time",
    "message": "Unmaintained, consider using web-time instead - A partial replacement for std::time::Instant that works on WASM to."
  },
  {
    "name": "encryptedfs",
    "replacement": "rencfs",
    "message": "[DEPRECATED] move to rencfs. An encrypted file system that mounts with FUSE on Linux. It can be used to create encrypted directories."
  },
  {
    "name": "kiss3d-trackball",
    "replacement": "bevy_trackball",
    "message": "# kiss3d-trackball  Virtual Trackball Camera Mode for Kiss 3D  **Warning**: Deprecated in favor of [`bevy_trackball`]. [`bevy_trackball`]: https://qu1x. github. io/bevy_trackball  [! [Build][]](https://github. com/qu1x/kiss3d-trackball/actions/workflows/build."
  },
  {
    "name": "mwapi",
    "replacement": "mwbot",
    "message": "wikimedia. org/cover/mwbot-rs/mwbot/coverage)  A MediaWiki API client library. `mwapi` is a low-level library for the [MediaWiki Action API](https://www. mediawiki. org/wiki/API:Main_page). If you intend to edit pages or want a higher-level interface, it's recommended to use [`mwbot`](https://docs. rs/mwbot/), which builds on top of this crate. ### Goals * generic to fit any application, whether for interactive usage   or writing a bot * fully compatible with concurrent use cases * turns MediaWiki errors into Rust errors for you * logging (using the `tracing` crate) for visiblity into errors * follow all [best practices](https://www. mediawiki. org/wiki/API:Etiquette)  ### Quick start ```rust let client = mwapi::Client::builder(\"https://en. wikipedia."
  },
  {
    "name": "runrust",
    "replacement": "cargo-eval",
    "message": "github. io/runrust). ## Related projects - [rust-script](https://github. com/fornwall/rust-script) - the original project that `runrust` was forked from. - [cargo-script](https://github. com/DanielKeep/cargo-script) - the unmaintained project that `rust-script` was forked from. - [cargo-eval](https://github. com/reitermarkus/cargo-eval/) - maintained fork of `cargo-script`. - [cargo-play](https://github. com/fanzeyi/cargo-play) - local Rust playground. - [runner](https://github."
  },
  {
    "name": "llua",
    "replacement": "ezlua",
    "message": "**Deprecated**, please use [ezlua](https://crates. io/crates/ezlua) instead  --------------  llua is a rust binding for lua(5. 4), which provides some lower-layer API  ## Features  - Serialization (serde) support - Rust **nostd** support - Not all is safe, but the binding is efficient - Ergonomic binding for functions and userdata methods - Builtin bindings to rust standard library  ## Credits  - [rust-lua53](https://github. com/jcmoyer/rust-lua53) provides the earliest basic binding"
  },
  {
    "name": "sht4x-ng",
    "replacement": "sht4x",
    "message": "DEPRECATED - please use sht4x crate"
  },
  {
    "name": "uom",
    "replacement": "serde",
    "message": "* `std` -- Feature to compile with standard library support. Disabling this feature compiles `uom`    with `no_std`. Enabled by default. * `serde` -- Feature to enable support for serialization and deserialization of quantities with the    [Serde][serde] crate. Disabled by default. Replaces the deprecated `use_serde` feature, which will    be removed in a future `uom` release (v0. 37. 0 or later). [si]: https://jcgm. bipm. org/vim/en/1."
  },
  {
    "name": "roslibrust",
    "replacement": "roslibrust_codegen",
    "message": "msg/. srv files and `roslibrust_codegen_macro` provides a convenient macro for generating these types:  ```no_compile // Will generate types from all packages in ROS_PACKAGE_PATH  roslibrust_codegen_macro::find_and_generate_ros_messages! (); ```  If you want to see what the generated code looks like check [here](https://github. com/RosLibRust/roslibrust/blob/master/roslibrust_test/src/ros1. rs). While the macro is useful for getting started, we recommend using `roslibrust_codegen` with a `build. rs` as shown in [example_package](https://github. com/RosLibRust/roslibrust/tree/master/example_package). This allows cargo to know when message files are edited and automatically re-generate the code. ## Getting Started / Examples  Examples can be found in [examples](https://github. com/RosLibRust/roslibrust/tree/master/roslibrust/examples)."
  },
  {
    "name": "pyo3-chrono",
    "replacement": "pyo3",
    "message": "# THIS CRATE IS DEPRECATED  PyO3 0. 17. 2 added native support for chrono in https://github. com/PyO3/pyo3/pull/2612 behind the `chrono` feature flag. You shouldn't use this crate anymore. # pyo3-chrono  This crate provides newtype wrappers around chrono's `NaiveDateTime`, `NaiveDate`, `NaiveTime`, and `Duration` structs, that can be used in `PyO3` applications."
  },
  {
    "name": "zng-l10n-scraper",
    "replacement": "cargo-zng",
    "message": "# Deprecated  Use [`cargo-zng`] now to scap localization text. ```console cargo uninstall zng-l10n-scraper cargo install cargo-zng cargo zng l10n --help ```  [`cargo-zng`]: https://crates. io/crates/zng"
  },
  {
    "name": "const-varint",
    "replacement": "varing",
    "message": "(Deprecated) This crate is deprecated. Please use `varing` instead."
  },
  {
    "name": "elasticlunr-rs",
    "replacement": "stork",
    "message": "io/badge/MSRV-1. 60. 0-orange)  A partial port of [elasticlunr. js][eljs] to Rust. Intended to be used for generating compatible search indices. This library is passively maintained to support existing users. New users are encouraged to use a different library such as [stork](https://github. com/jameslittle230/stork). ## Example  ```Rust use std::fs::File; use std::io::Write; use elasticlunr::Index;  let mut index = Index::new(&[\"title\", \"body\"]); index. add_doc(\"1\", &[\"This is a title\", \"This is body text! \"]); // Add more documents."
  },
  {
    "name": "pyxel-core",
    "replacement": "pyxel-engine",
    "message": "DEPRECATED: This crate has been renamed to pyxel-engine."
  },
  {
    "name": "braille-rs",
    "replacement": "rsille",
    "message": "# braille-rs\r \r A Rust crate that aims to simplify working with braille characters. If you actually want to use braille art in a project i recommend the [rsille](https://crates. io/crates/rsille) crate, since it will most likely be better maintained and has a lot more features."
  },
  {
    "name": "dw3000-ng",
    "replacement": "smoltcp",
    "message": "rust-lang. org/ [DW1000]: https://crates. io/crates/dw1000   ## Status  Both RTT methods (single and double sided) are working and giving good positioning values. PDoA and TDoA can be enabled optionally (Please read the docs as they require certain configurations! ). Compared to the old `dw3000` crate we fixed the GPIOs and LEDs, also got rid of the old unmaintained ieee802154 crate and replaced it with `smoltcp`. We mainly test on the ESP32 platform with `embassy` async framework. ## Usage  Include this crate in your Cargo project by adding the following to `Cargo. toml`: ```toml [dependencies] dw3000-ng = \"1. 0\" ```  ## Documentation  Please refer to the **[API Reference]**. Please also refer to the [DW3000 User Manual]  [API Reference]: https://docs."
  },
  {
    "name": "nary_tree",
    "replacement": "slab_tree",
    "message": "[! [](https://tokei. rs/b1/github/osimarr/nary-tree)](https://github. com/osimarr/nary-tree)\r \r # nary_tree\r \r A vec-backed tree structure with tree-specific generational indexes. This is a fork from the slab_tree crate which is no longer maintained. At this initial stage, the main difference (aside bug fix) is that the slab layer is now using the\r slab crate from tokio-rs project. There is currently a new version being developed which will push changes to the crate's interface. This will be released under version v0. 5, while version v0. 4."
  },
  {
    "name": "puccinier",
    "replacement": "whiskers",
    "message": "colorA=363a4f&colorB=f5a97f&style=for-the-badge\"></a>   <a href=\"https://github. com/catppuccin/toolbox/contributors\"><img src=\"https://img. shields. io/github/contributors/catppuccin/toolbox? colorA=363a4f&colorB=a6da95&style=for-the-badge\"></a> </p>  &nbsp;  > [! IMPORTANT] > Puccinier is **no longer actively maintained**. This tool has been deprecated > in favour of our new [`whiskers`](. . /whiskers/README. md) tool. If you wrote a v1 or v2 Catppuccin theme, you may use Puccinier to automatically create the rest of the v2 themes."
  },
  {
    "name": "semantic-analyzer",
    "replacement": "nom",
    "message": "As a library for building AST and the only dependency used [nom_locate](https://github. com/fflorent/nom_locate) - which allows getting all the necessary information about the source code, for further semantic analysis and generating relevant and informative error messages. Currently decided that the AST is a fixed structure because it is a fundamental element that defines the lexical representation of a programming language. On the other hand, it allows you to implement any subset of the programming language that matches syntax tree. It also implies a subset of lexical representations from which an AST can be generated  that meets the initial requirements of the semantic analyzer. As a library for lexical  analysis and source code parsing, it is recommended to use: [nom is a parser combinators library](https://github. com/rust-bakery/nom). AST displays the **Turing complete** programming language and contains all the necessary elements for this. ## 🔋 🔌 Extensibility  Since `AST` is predefined, but in real conditions it may be necessary to expand the  functionality for the specific needs of the `compiler`, has been added the functionality  of the `AST` extensibility and the additional generated set of `Instructions` for  the **Semantic Stack Context**. - [x] 🚨 **Genetic expression value**: The ability to expand custom expressions for z, according to compiler requirements. The ability to implement custom instructions for these custom expressions in the  **Semantic Stack Context**."
  },
  {
    "name": "poolparty",
    "replacement": "smol",
    "message": "The crate works around these limitations (it might get obsolete once [this open issue will be resolved](https://github. com/rust-lang/futures-rs/issues/1468)). Use cases for the crate are: * Stop executing futures in case any of future that runs on it faces an unrecoverable error and returns an Err(). * Let the caller handle the error. * Stop the threadpool and its spawned tasks on user request. ⚠ This crate is beeing passively maintained. It works just fine for me in an existing project. However I'll be using [smol](https://crates. io/crates/smol) as my futures executor in new projects. The `smol` task handles offer the same functionality (and more), rendering this crate obsolete. # Usage  The following example demonstrates the handling of a failing task: ```rust async fn forever() -> Result<(),String> {     loop {} }  async fn fail(msg: String) -> Result<(),String> {     Err(msg) }  let mut pool = StoppableThreadPool::new()?"
  },
  {
    "name": "wav",
    "replacement": "hound",
    "message": "This project is no longer maintained (and wasn't a very well implemented project to begin with), use `hound` instead"
  },
  {
    "name": "c2pa-crypto",
    "replacement": "c2pa",
    "message": "# `c2pa-crypto` crate is DISCONTINUED  This crate has been merged into the [`c2pa` crate](https://crates. io/crates/c2pa). It will no longer be maintained or published as a standalone crate. For the most part, all public APIs can be remapped as follows:  `c2pa_crypto::xxx` -> `c2pa::crypto::xxx`  There will be no further releases of this crate."
  },
  {
    "name": "nanotweaks-proc",
    "replacement": "spread_macros",
    "message": "Crate moved to [spread_macros](https://crates. io/crates/spread_macros)."
  },
  {
    "name": "iroh-net-report",
    "replacement": "iroh",
    "message": "# Iroh Net Report  **Deprecated: this crate is no longer maintained. The APIs are so closely tied to `iroh` that it is not useful yet outside of an `iroh` context, and has been pulled back into `iroh` core. We will revisit the possibility of releasing a general-use net-report crate after `iroh` `v0. 1. 0` has been published. **  `iroh-net-report` is a tool for generating detailed reports on network connectivity and configuration on the current host for nodes powered by [iroh]."
  },
  {
    "name": "bdk",
    "replacement": "bdk_wallet",
    "message": "io/discord/753336465005608961? logo=discord\"></a>   </p>    <h4>     <a href=\"https://bitcoindevkit. org\">Project Homepage</a>     <span> | </span>     <a href=\"https://docs. rs/bdk\">Documentation</a>   </h4> </div>  ## ! ! DEPRECATED ! ! The [bdk](https://crates. io/crates/bdk) library is now deprecated and replaced by [bdk_wallet](https://crates. io/crates/bdk_wallet). All projects should migrate to [bdk_wallet 1."
  },
  {
    "name": "poem-openapi-api-derive",
    "replacement": "poem-openapi-macro",
    "message": "# poem-openapi-api-derive was renamed poem-openapi-macro  ## Deprecated  poem-openapi-api-derive was renamed poem-openapi-macro. So you should use the [poem-openapi-macro](https://crates. io/crates/poem-openapi-macro) crate instead of this one."
  },
  {
    "name": "sycamore-seoul",
    "replacement": "webtric",
    "message": "# Sycamore-Seoul\r \r ⚠️ <b>This crate is DEPRECATED. </b>\r \r Scollbar and Resizer utilities are now consolidated into [**webtric**](https://crates. io/crates/webtric) crate. Recommend to use webtric. ---\r [! [Crates."
  },
  {
    "name": "actix-redis",
    "replacement": "fred",
    "message": "# actix-redis  > Actor-based Redis client. > > This crate is deprecated. Migrate to [`redis`], [`fred`] or similar Redis client on crates. io. [! [crates. io](https://img."
  },
  {
    "name": "nebula-graph-fbthrift-meta-v2",
    "replacement": "nebula-fbthrift-meta-v2",
    "message": "# nebula-graph-fbthrift-meta-v2  * [Cargo package](https://crates. io/crates/nebula-graph-fbthrift-meta-v2)  Archived, Rename to [nebula-fbthrift-meta-v2](https://crates. io/crates/nebula-fbthrift-meta-v2)"
  },
  {
    "name": "expect-exit",
    "replacement": "anyhow",
    "message": "<! -- SPDX-FileCopyrightText: Peter Pentchev <roam@ringlet. net> SPDX-License-Identifier: BSD-2-Clause -->  # expect-exit: display an error message and exit without a panic  *Note:* This library is deprecated, and it is in maintenance mode. The `anyhow` library may be a better choice for both new and existing programs. The `expect-exit` library defines the `Expected`, `ExpectedWithError`, and `ExpectedResult` traits and implements them for the standard `Result` and `Option` types as appropriate. This allows a program to display an error message and exit with a non-zero exit code without invoking a Rust panic, yet optionally unwinding the stack so that various objects may perform some clean-up actions. The methods with an `_e` suffix append an appropriate error message to the supplied one. The methods with a `_` suffix allow the caller to specify an already-constructed message instead of a function that returns it."
  },
  {
    "name": "yara-x-proto-json",
    "replacement": "YARA-X",
    "message": "io/yara-x/docs/intro/yara-x-vs-yara/). #### Which are the differences at the rule level? Read [this](https://virustotal. github. io/yara-x/docs/writing_rules/differences-with-yara/). #### Is YARA still maintained? Yes, it is. YARA is still being maintained, and future releases will include bug fixes and minor features. However, don’t expect new large features or modules. All efforts to enhance YARA, including the addition of new modules, will now focus on YARA-X. #### What's the current state of YARA-X?"
  },
  {
    "name": "icrate",
    "replacement": "objc2",
    "message": "com/madsmtm/objc2/actions/workflows/ci. yml/badge. svg)](https://github. com/madsmtm/objc2/actions/workflows/ci. yml)  Rust bindings to Apple's frameworks. **This crate has been split into multiple smaller ones, and is now deprecated! **  See [`objc2`](https://docs. rs/objc2/latest/objc2/topics/about_generated/list/index. html) for the list of available crates. ## Supported versions  These bindings are automatically generated from the SDKs in Xcode 15. 0."
  },
  {
    "name": "llm-api-adapter",
    "replacement": "llm-bridge",
    "message": "# llm-api-adapter  ## This lib has been moved to [`llm-bridge`](https://crates. io/crates/llm-bridge)"
  },
  {
    "name": "ethcontract-generate-fork",
    "replacement": "ethcontract-derive",
    "message": "unwrap()         . write_to_file(dest)         . unwrap(); }  ```  ## Relation to `ethcontract-derive`  `ethcontract-derive` uses `ethcontract-generate` under the hood so their generated bindings should be identical, they just provide different APIs to the same functionality. The long term goal of this project is to maintain `ethcontract-derive`. For now there is no extra work in having it split into two separate crates. That being said if RLS support improves for procedural macro generated code, it is possible that this crate be deprecated in favour of `ethcontract-derive` as long as there is no good argument to keep it around."
  },
  {
    "name": "linear_solver",
    "replacement": "monotonic_solver",
    "message": "# linear_solver A linear solver designed to be easy to use with Rust enums. This is a library for automated theorem proving. Linear solving means that some facts can be replaced with others. This technique can also be used to make theorem proving more efficient. If you are looking for a solver that does not remove facts,   see [monotonic_solver](https://github. com/advancedresearch/monotonic_solver)  *Notice! This solver does not support multiple histories. It assumes that when facts are simplified, they prove the same set of facts without the simplifaction."
  },
  {
    "name": "huffman-compress2",
    "replacement": "huffman-compress",
    "message": "huffman-compress2 ================  This is a fork of Niklas Fiekas's [huffman-compress](https://github. com/niklasf/rust-huffman-compress), which is no longer maintained. [Huffman compression](https://en. wikipedia. org/wiki/Huffman_coding) given a probability distribution over arbitrary symbols. [! [crates."
  },
  {
    "name": "mrot_config",
    "replacement": "mrot",
    "message": "# Mrot Config  This crate is now deprecated. It was once used to define the configuration values for the meal rotator app [mrot][mrot]. Its current form is now fully integrated into the mrot app. [mrot]: https://crates. io/crates/mrot/"
  },
  {
    "name": "pg-db-idle-agent",
    "replacement": "pg-db-idle-agent-async",
    "message": "# DEPRECATED  ### Use: pg-db-idle-agent-async"
  },
  {
    "name": "yara-x-proto",
    "replacement": "YARA-X",
    "message": "io/yara-x/docs/intro/yara-x-vs-yara/). #### Which are the differences at the rule level? Read [this](https://virustotal. github. io/yara-x/docs/writing_rules/differences-with-yara/). #### Is YARA still maintained? Yes, it is. YARA is still being maintained, and future releases will include bug fixes and minor features. However, don’t expect new large features or modules. All efforts to enhance YARA, including the addition of new modules, will now focus on YARA-X. #### What's the current state of YARA-X?"
  },
  {
    "name": "musicbrainz_rs_nova",
    "replacement": "musicbrainz_rs",
    "message": "metabrainz. org/MB/header-logo-1f7dc2a. svg  **MusicBrainz rust is a utility crate for the the [MusicBrainz API](https://musicbrainz. org/doc/Development/XML_Web_Service/Version_2). **  >This is a fork of [musicbrainz_rs](https://github. com/oknozor/musicbrainz_rs) crate, as it is currently seemingly unmaintained. While this crate is mostly meant as a temporary fix for [another project](https://github. com/RustyNova016/listenbrainz-cli-tools), this crate can be used instead of the original. > >This is meant to be a drop-in replacement, but may require some tweaks in some cases. Don't forget to test the switch. ---  you may be looking for :  - [Api documention](https://docs."
  },
  {
    "name": "typed-format-version",
    "replacement": "media-type-version",
    "message": "<! -- SPDX-FileCopyrightText: Peter Pentchev <roam@ringlet. net> SPDX-License-Identifier: BSD-2-Clause -->  # typed-format-version: load format. version. {major,minor} from a structured file. ## DEPRECATED in favor of media-type-version  This library is deprecated. The author is not aware of any other libraries and programs using it, and he himself has moved on to using a `mediaType` declaration to specify both the format and its version. See [the media-type-version Python library][pypi-media-type-version] and [the media-type-version Rust crate][crates-io-media-type-version] for more information. ## Overview  This module tries to parse a format. version \"section\" in some raw data that may have been loaded from a configuration file, and determines whether that section contains valid \"major\" and \"minor\" integer values. The caller can then choose the correct schema to validate the loaded data against, e."
  },
  {
    "name": "nickel-lang",
    "replacement": "nickel-lang-cli",
    "message": "# Nickel  **WARNING**: THIS CRATES IS ARCHIVED. This crate used to hold both the library and the binary for the Nickel configuration language, but `nickel-lang` had been split into the crates [`nickel-lang-cli`](https://crates. io/crates/nickel-lang-cli) containing the Nickel CLI (including the `nickel` binary) and [`nickel-lang-core`](https://crates. io/crates/nickel-lang-core) for the library exposing Nickel internals. - To install the `nickel` command, use `nickel-lang-cli`:   `cargo install nickel-lang-cli` - To use Nickel as a dependency of your crate, use `nickel-lang-core`. All versions of `nickel-lang` will be yanked."
  },
  {
    "name": "hex_spell",
    "replacement": "hexspell",
    "message": "Moved to 'hexspell'"
  },
  {
    "name": "vgmdb-rust",
    "replacement": "vgmdb",
    "message": "Package moved to vgmdb"
  },
  {
    "name": "serde_yaml_bw",
    "replacement": "serde_yaml",
    "message": "It significantly reduces the number of `panic! ()` and `. unwrap()` constructs, opting instead to return proper error messages rather than crashing outright. This makes the library suitable for parsing user-supplied YAML content. The initiative began as an effort to continue maintaining the widely-used [serde_yaml](https://github. com/dtolnay/serde-yaml) library, which has since been archived and marked as deprecated on GitHub. Following the fork, minor updates were applied, including advancing some package version numbers, incorporating additional tests from Fishrock123's [abandoned pull request](https://github. com/dtolnay/serde-yaml/pull/376), and improving error messages to clearly indicate unresolved YAML anchors. We have upgraded it to the Rust 2024 edition. The package is somewhat maintained as it is used in our own projects."
  },
  {
    "name": "hashmap_core",
    "replacement": "hashbrown",
    "message": "## This crate is deprecated, use [hashbrown](https://github. com/rust-lang/hashbrown) instead. hashmap_core =========  [! [Build Status](https://travis-ci. org/Amanieu/hashmap_core. svg?"
  },
  {
    "name": "linera-alloy-core",
    "replacement": "Alloy",
    "message": "# Alloy  Core libraries at the root of the Rust Ethereum ecosystem. Alloy is a rewrite of [`ethers-rs`] from the ground up, with exciting new features, high performance, and excellent docs. [`ethers-rs`] will continue to be maintained until we have achieved feature-parity in Alloy. No action is currently needed from devs. [`ethers-rs`]: https://github. com/gakonst/ethers-rs  [! [Build Status][actions-badge]][actions-url] [! [Telegram chat][telegram-badge]][telegram-url]  [actions-badge]: https://img."
  },
  {
    "name": "babel-bridge",
    "replacement": "llm-bridge",
    "message": "# Babel Bridge  ## This lib has been moved to [`llm-bridge`](https://crates. io/crates/llm-bridge)"
  },
  {
    "name": "exstd",
    "replacement": "dotenvy",
    "message": "- **Logging**: Implement logging with `log` and `env_logger`. - **Date and Time**: Work with dates and times using `chrono`. - **Regular Expressions**: Use regular expressions with `regex`. - **Command Line Interface**: Parse command line arguments with `clap`. - **Environment Variables**: Manage environment variables with `dotenvy`. (dotenv project is abandoned) - **Ordered Maps**: Use indexmap for ordered maps and sets, which maintain the order of insertion. This can be particularly useful when the order of elements is important for your application. - **Parallelism**: Leverage rayon for data parallelism. rayon makes it easy to perform parallel computations using Rust's powerful type system and concurrency model. - **Random Number Generation**: Utilize rand for generating random numbers. rand provides a wide range of random number generators and distributions, making it suitable for a variety of applications including simulations and games."
  },
  {
    "name": "cw-check-contract",
    "replacement": "cosmwasm-check",
    "message": "# cw-check-contract  This crate is **DEPRECATED**. Use [`cosmwasm-check`](https://crates. io/crates/cosmwasm-check) instead."
  },
  {
    "name": "boondock",
    "replacement": "shiplift",
    "message": "shields. io/badge/documentation-docs. rs-yellow. svg)](https://docs. rs/boondock/)  **You may not want this library. ** This library is only minimally maintained. It is used by the development tool [cage][], and it does not make much effort to support use-cases beyond that. It does have a very nice async transport layer based on `hyper`, `hyperlocal`, `rustls` and modern async Rust that you might want to borrow for use in your Docker client. No OpenSSL is involved in any way. Here are the other Rust Docker clients I know about:  - [rust-docker][] is the original Rust Docker library by Graham Lee, which most of the other libraries are based on (including this one). - [shiplift][] appears to fairly complete and actively maintained, with lots of downloads."
  },
  {
    "name": "nebula-graph-client",
    "replacement": "nebula-client",
    "message": "# nebula-graph-client  * [Cargo package](https://crates. io/crates/nebula-graph-client)  Archived, Rename to [nebula-client](https://crates. io/crates/nebula-client)"
  },
  {
    "name": "ratframe",
    "replacement": "egui_ratatui",
    "message": "DEPRECATED GO TO 'egui_ratatui"
  },
  {
    "name": "txmailer",
    "replacement": "emailer",
    "message": "moved to emailer"
  },
  {
    "name": "actix-web-actors",
    "replacement": "actix-ws",
    "message": "# `actix-web-actors`  > Actix actors support for Actix Web. > > This crate is deprecated. Migrate to [`actix-ws`](https://crates. io/crates/actix-ws). <! -- prettier-ignore-start -->  [! [crates."
  },
  {
    "name": "pw_hash",
    "replacement": "pwhash",
    "message": "# pw_hash  A collection of password hashing and verification routines. This is a fork of the currently unmaintained `pwhash`, with updated dependencies. See the [documentation](https://docs. rs/pw_hash/) for API reference. ## Getting Started  Add the following to the `[dependencies]` section of your `Cargo. toml`:  ```toml pw_hash = \"0. 1\" ```  ## Example  ```rust use pw_hash::bcrypt;  // Hash a password with default parameters."
  },
  {
    "name": "jpeg-decoder",
    "replacement": "zune-jpeg",
    "message": "**WARNING: This crate is in maintenance mode as _image-rs_ seeks to move over to the zune-jpeg crate. However, since other Rust JPEG crates do not support lossless mode, we will continue to welcome PRs related to that functionality. **  --- # jpeg-decoder  [! [Rust CI](https://github. com/image-rs/jpeg-decoder/workflows/Rust%20CI/badge. svg)](https://github."
  },
  {
    "name": "gmp-mpfr",
    "replacement": "rug",
    "message": "Replaced by rug: arbitrary-precision integers, rational, floating-point and complex numbers"
  },
  {
    "name": "esp32c6-hal",
    "replacement": "esp-hal",
    "message": "io/matrix/esp-rs:matrix. org? label=join%20matrix&labelColor=1C2C2E&color=BEC5C9&logo=matrix&style=flat-square)](https://matrix. to/#/#esp-rs:matrix. org)  > [! WARNING]   > > This package has been deprecated in favour of [esp-hal](https://github. com/esp-rs/esp-hal/tree/main/esp-hal). > > Please refer to the migration guide for help with updating your projects > to use the new 'esp-hal' package: > > https://github. com/esp-rs/esp-hal/releases/tag/v0. 16. 0  `no_std` HAL for the ESP32-C6 from Espressif."
  },
  {
    "name": "string_capacity",
    "replacement": "capacity_builder",
    "message": "Moved to capacity_builder"
  },
  {
    "name": "opentelemetry-jaeger",
    "replacement": "opentelemetry-jaeger-propagator",
    "message": "! [OpenTelemetry — An observability framework for cloud-native software. ][splash]  [splash]: https://raw. githubusercontent. com/open-telemetry/opentelemetry-rust/main/assets/logo-text. png  # OpenTelemetry Jaeger (Deprecated)  **WARNING** As of [Jaeger 1. 35. 0], released in Sept 2022, ingesting the OpenTelemetry Protocol (OTLP) is stable and as a result, language specific Jaeger exporters within OpenTelemetry SDKs are [recommended for deprecation by the OpenTelemetry project][jaeger-deprecation]. More information and examples of using OTLP with Jaeger can be found in [Introducing native support for OpenTelemetry in Jaeger][jaeger-otlp] and [Exporting OTLP traces to Jaeger][exporting-otlp]. The opentelemetry-jaeger crate previously contained both a Jaeger exporter and a Jaeger propagator. To prepare for the deprecation of the Jaeger exporter, the Jaeger propagator implementation has been migrated to [opentelemetry-jaeger-propagator](."
  },
  {
    "name": "ffmpeg-next-rk",
    "replacement": "ffmpeg-next",
    "message": "svg)](https://docs. rs/ffmpeg-next/) [! [build](https://github. com/zmwangx/rust-ffmpeg/workflows/build/badge. svg)](https://github. com/zmwangx/rust-ffmpeg/actions)  This is a fork of the abandoned [ffmpeg](https://crates. io/crates/ffmpeg) crate by [meh. ](https://github. com/meh/rust-ffmpeg). This crate is currently in maintenance mode, and aims to be compatible with all of FFmpeg's versions from 3. 4 (currently from 3."
  },
  {
    "name": "grafbase-federated-graph",
    "replacement": "graphql-federated-graph",
    "message": "This crate name is deprecated. Use [graphql-federated-graph](https://crates. io/crates/graphql-federated-graph) instead."
  },
  {
    "name": "easy-tensorrt-sys",
    "replacement": "cudarc",
    "message": "# easy-tensorrt-sys\r \r Rust binding to [NVIDIA TensorRT](https://developer. nvidia. com/tensorrt). This is a fork of [tensorrt-rs-sys](https://github. com/vivym/tensorrt-rs/tree/main/tensorrt-rs-sys), which seems no longer activately maintained. ## What's new\r \r 1. Replaced the dependency [cuda-rs](https://github. com/vivym/cuda-rs) with [cudarc](https://github. com/coreylowman/cudarc) for cuda interaction, which is actively maintained and offers better compatibility. 2."
  },
  {
    "name": "xdg-rs",
    "replacement": "xdg-basedir",
    "message": "[This crate is no longer maintained. Please use xdg-basedir instead] Library to help with the XDG basedir spec"
  },
  {
    "name": "multi-tunnel",
    "replacement": "tailscale",
    "message": "multi-tunnel ============  > This project is abandoned; use something like tailscale instead. multi-tunnel allows starting and managing SSH tunnels in a straightforward manner. Create a TOML configuration file, start the service and you're all set. If you change the configuration, send a SIGHUP (aka `systemctl reload`) and it'll start/stop tunnels as necessary. Tunnels that get stopped or killed for any reason will be restarted after a 5-second delay. Every 60s it will SSH into the host to run health checks to make sure the ports are accessible over HTTP."
  },
  {
    "name": "linera-alloy",
    "replacement": "Alloy",
    "message": "# Alloy  Alloy connects applications to blockchains. Alloy is a rewrite of [`ethers-rs`] from the ground up, with exciting new features, high performance, and excellent [docs](https://alloy-rs. github. io/alloy/). [`ethers-rs`] will continue to be maintained until we have achieved feature-parity in Alloy. No action is currently needed from devs. [! [Telegram chat][telegram-badge]][telegram-url]  [`ethers-rs`]: https://github. com/gakonst/ethers-rs [telegram-badge]: https://img. shields."
  },
  {
    "name": "guess-that-lang",
    "replacement": "Dockerfile",
    "message": "githubusercontent. com/65814829/183973036-c283d147-8061-40c8-a306-916801d6c9bc. gif)  Code is retrieved from either random repos or random gists on GitHub using any of the top 24* most popular languages from the [Stack Overflow 2022 Developer Survey](https://survey. stackoverflow. co/2022/#most-popular-technologies-language). <sub>*VBA is replaced with Dockerfile</sub>  The code is then processed in a number of ways to make the experience more enjoyable. ## Installation  <details> <summary>Using Prebuilt Binaries</summary>  - <details>   <summary>With Bash</summary>    ```sh   curl -fsSL \"https://bina. egoist. dev/Lioness100/guess-that-lang\" | sh   ```    > Using [Bina](https://bina. egoist. dev/)    </details>  - <details>   <summary>Manual Installation</summary>    Prebuilt binaries are available for Windows, Linux, and macOS and can be found   attached to the [latest release](https://github."
  },
  {
    "name": "odbc-safe",
    "replacement": "odbc-api",
    "message": "Deprecated. Try odbc-api instead."
  },
  {
    "name": "ordinal_crypto",
    "replacement": "RGP",
    "message": "Moved to RGP crate"
  },
  {
    "name": "proc_getter",
    "replacement": "lpfs",
    "message": "**This crate is longer being maintained on crates. io. **  **Because it is renamed to (lpfs)[https://github. com/pearzl/lpfs]. **  You can find these code at proc_getter branch of lpfs. -----  [!"
  },
  {
    "name": "limine-rs",
    "replacement": "limine",
    "message": "# Deprecated  This crate has been renamed to [limine](https://crates. io/crates/limine). In addition to, the crate name is vacant and if you will like to take ownership of this crate name, shoot me a message at Discord (`@Andy-Python-Programmer#4223`) or email the request at `andypython@protonmail. com`."
  },
  {
    "name": "iterchunks",
    "replacement": "itermore",
    "message": "[Build Status](https://badgers. space/github/checks/rossmacarthur/itermore? label=build)](https://github. com/rossmacarthur/itermore/actions/workflows/build. yaml)  This crate provides an iterator adapter that yields N elements of the iterator at a time. ### Deprecated  This crate is deprecated in favour of the `itermore` crate and it currently just re-exports types from there. The following dependency definition is the equivalent of using this crate. ```toml # Cargo. toml  [dependencies] itermore = { version = \". . ."
  },
  {
    "name": "natsio",
    "replacement": "nats",
    "message": "Deprecated in favor of the nats crate"
  },
  {
    "name": "lyon_path_iterator",
    "replacement": "lyon_path",
    "message": "[Deprecated] moved into the crate lyon_path."
  },
  {
    "name": "nanotweaks",
    "replacement": "spread_macros",
    "message": "Crate moved to [spread_macros](https://crates. io/crates/spread_macros)."
  },
  {
    "name": "yew-sidebar",
    "replacement": "sidebar",
    "message": "# 📁 Yew Sidebar  > ⚠️ **Warning**: This crate has been moved to [`sidebar`](https://crates. io/crates/sidebar). > Please use [`sidebar`](https://crates. io/crates/sidebar) instead of `yew-sidebar`. [! [Crates."
  },
  {
    "name": "indy-sdk",
    "replacement": "indy",
    "message": "Note: This crate is deprecated in favor of indy (https://crates. io/crates/indy). This is the official SDK for Hyperledger Indy (https://www. hyperledger. org/projects), which provides a distributed-ledger-based foundation for self-sovereign identity (https://sovrin. org)."
  },
  {
    "name": "iceberg-rs",
    "replacement": "iceberg",
    "message": "DEPRECATED: This crate is no longer maintained. Please use the `iceberg` crate instead."
  },
  {
    "name": "letsencrypt-rs",
    "replacement": "acme-client",
    "message": "DEPRECATED! This crate is merged with acme-client."
  },
  {
    "name": "hd-ed25519",
    "replacement": "ristretto",
    "message": "Hierachical key derivation on ed255190-dalek  Almost all hierachical key derivation schemes for ed25519 have vulnerabilities due to the \"bit clamping\" used in ed25519. Instead of hierachical key derivation on ed255190, we recommend using either a curve of cofactor 1 like secp256k1 or else a cofactor avoiding representation of Ed25519 like [ristretto](https://ristretto. group/) instead. That said. . [BIP32-Ed25519](https://cardanolaunch. com/assets/Ed25519_BIP."
  },
  {
    "name": "math-functions",
    "replacement": "ruut-functions",
    "message": "This crate is deprected, the code has been moved to [https://crates. io/crates/ruut-functions](https://crates. io/crates/ruut-functions)"
  },
  {
    "name": "interpolate_idents",
    "replacement": "paste",
    "message": "# interpolate_idents  ## Deprecation warning  Because of the introduction of stable procedural macro support in Rust 1. 30. 0, it is now possible to accomplish what this crate set out to accomplish using entirely stable code. Please try @dtolnay's [`paste`](https://crates. io/crates/paste) crate to see if it can fulfill all of your current use cases. `paste` can be used in stable production environments and is not nearly as prone to breakage between Rust versions."
  },
  {
    "name": "interoptopus_backend_cpython_cffi",
    "replacement": "interoptopus_backend_cpython",
    "message": "Generates CPython CFFI bindings for [Interoptopus](https://github. com/ralfbiedert/interoptopus). ## ⚠️ Deprecation Notice  This backend is deprecated. Use the [interoptopus_backend_cpython](https://crates. io/crates/interoptopus_backend_cpython) instead, which has better Python compatibility and generates cleaner code. ## Usage  Assuming you have written a crate containing your FFI logic called `example_library_ffi` and want to generate **CPython CFFI bindings** for Python 3. 7+, follow the instructions below. #### Inside Your Library  Add [**Interoptopus**](https://crates."
  },
  {
    "name": "metal-rs",
    "replacement": "metal",
    "message": "# metal-rs  This crate is deprecated because it has been moved to [metal](https://crates. io/crates/metal) instead."
  },
  {
    "name": "lifeline",
    "replacement": "postage",
    "message": "This was necessary due to the recent changes in the Stream ecosystem, and the upcoming stabilization of the Stream RFC. If you need Stream/Sink combinators, take a look at [postage](https://crates. io/crates/postage), or [tokio-stream](https://crates. io/crates/tokio-stream). - The barrier channel was removed. It can be replaced with [postage::barrier](https://docs. rs/postage/0. 3. 1/postage/barrier/index. html). - The subscription channel was removed."
  },
  {
    "name": "libtensorflow-sys",
    "replacement": "tensorflow-sys",
    "message": "This crate has been deprecated in favor of tensorflow-sys. Please use it instead."
  },
  {
    "name": "minions",
    "replacement": "acto-rs",
    "message": "# minions_rs  This crate has been renamed to acto-rs. The development of the minion crate continues there. If I had means to remove the minions crate I would do that. minions crate is not maintained"
  },
  {
    "name": "awesome-cli",
    "replacement": "arun",
    "message": "# **IMPORTANT** Deprecated: Use [arun](https://github. com/jeremychone/rust-arun)  This is deprecated. The new crate is [arun](https://github. com/jeremychone/rust-arun). [arun](https://github. com/jeremychone/rust-arun) is the maintained version."
  },
  {
    "name": "nebula-graph-fbthrift-common",
    "replacement": "nebula-fbthrift-common",
    "message": "# nebula-graph-fbthrift-common  * [Cargo package](https://crates. io/crates/nebula-graph-fbthrift-common)  Archived, Rename to [nebula-fbthrift-common](https://crates. io/crates/nebula-fbthrift-common)"
  },
  {
    "name": "martin-mbtiles",
    "replacement": "mbtiles",
    "message": "svg)](https://crates. io/crates/martin-mbtiles) [! [CI build](https://github. com/maplibre/martin/workflows/CI/badge. svg)](https://github. com/maplibre/martin-mbtiles/actions)  # DEPRECATED This crate was renamed to [mbtiles](https://crates. io/crates/mbtiles)  ### Intro A library to help tile servers like [Martin](https://maplibre. org/martin) work with [MBTiles](https://github. com/mapbox/mbtiles-spec) files. When using as a lib, you may want to disable default features (i. e."
  },
  {
    "name": "net2",
    "replacement": "socket2",
    "message": "rs/net2/badge. svg? version=0. 2)](https://docs. rs/net2/~0. 2)  # net2 is Deprecated  Prospective and existing consumers are encouraged to consider [socket2](https://crates. io/crates/socket2) instead. # License  This project is licensed under either of   * Apache License, Version 2. 0, ([LICENSE-APACHE](LICENSE-APACHE) or    http://www. apache. org/licenses/LICENSE-2."
  },
  {
    "name": "zhconv-cli",
    "replacement": "zhconv",
    "message": "(DEPRECATED. The cli binary is now a part of the zhconv crate. ) Convert Traditional/Simplified Chinese and regional words of Taiwan/Hong Kong/mainland China/Singapore based on Wikipedia and OpenCC rulesets 轉換中文簡體、繁體及兩岸、新馬地區詞，基於維基百科和OpenCC規則集"
  },
  {
    "name": "nvgx-ogl",
    "replacement": "Vulkan",
    "message": "0) compatibility has been considered but not yet tested. The fragmentation and problematic nature of GPU driver implementations across different vendors remain significant issues, as discussed in the [Glium post-mortem](https://users. rust-lang. org/t/glium-post-mortem/7063 ). With OpenGL 4. 0+ APIs being gradually replaced by the more standardized Vulkan, the OpenGL backend should prioritize the relatively stable and unified OpenGL 3. 1 standard. Although OpenGL 4. 0 has been in existence for 15 years and is supported by the vast majority of modern GPUs, backward compatibility concerns for OpenGL 3. 1 are largely obsolete for contemporary hardware. Earlier versions like OpenGL 2."
  },
  {
    "name": "openpgp-card-sequoia",
    "replacement": "openpgp-card-rpgp",
    "message": "<! -- SPDX-FileCopyrightText: Heiko Schaefer <heiko@schaefer. name> SPDX-License-Identifier: MIT OR Apache-2. 0 -->  # Crate deprecated  This crate is deprecated in favor of [openpgp-card-rpgp](https://crates. io/crates/openpgp-card-rpgp). `openpgp-card-sequoia` is based on the legacy `openpgp-card` 0. 4 API. It is no longer under development. The next generation `openpgp-card` version 0."
  },
  {
    "name": "nphysics3d",
    "replacement": "rapier3d",
    "message": "3-dimensional physics engine in Rust. This crate is being superseded by the rapier3d crate."
  },
  {
    "name": "ndk-build",
    "replacement": "xbuild",
    "message": "[Apache 2. 0](https://img. shields. io/badge/License-Apache_2. 0-green. svg)  > **Warning** > This crate and `cargo-apk` are deprecated in favour of [`xbuild`](https://github. com/rust-mobile/xbuild). Helps [`cargo-apk`](https://crates. io/crates/cargo-apk) cross-compile libraries and package APKs in a generic, reusable Rust crate."
  },
  {
    "name": "lapin-futures",
    "replacement": "lapin",
    "message": "DEPRECATED - use lapin instead"
  },
  {
    "name": "persist-es",
    "replacement": "cqrs-es",
    "message": "# persist-es  > Common persistence logic used for database-backed event stores for cqrs-es. # Deprecated  This package has been deprecated and all logic moved to the `perist` module of the  [cqrs-es crate](https://crates. io/crates/cqrs-es). Configuring persistence now only requires the `cqrs-es` and one of the available repositories. Example `Cargo. toml`: ```toml [dependencies] cqrs-es = \"0. 3."
  },
  {
    "name": "iron-login",
    "replacement": "iron-sessionstorage",
    "message": "# iron-login [! [Build Status](https://travis-ci. org/untitaker/iron-login. svg? branch=master)](https://travis-ci. org/untitaker/iron-login)  ## Deprecated  Work-in-progress for new crate is at ``iron-sessionstorage``. ----  Basic session management in Iron. * [Documentation](https://iron-login. unterwaditzer. net/) * [Repository](https://github. com/untitaker/iron-login/) * [Crates."
  },
  {
    "name": "lapin-async",
    "replacement": "lapin",
    "message": "DEPRECATED - use lapin instead"
  },
  {
    "name": "nphysics2d",
    "replacement": "rapier3d",
    "message": "2-dimensional physics engine in Rust. This crate is being superseded by the rapier3d crate."
  },
  {
    "name": "libostree-sys",
    "replacement": "ostree-sys",
    "message": "*DEPRECATED* Please use the 'ostree-sys' crate instead"
  },
  {
    "name": "ioctl",
    "replacement": "nix",
    "message": "DEPRECATED in favor of nix"
  },
  {
    "name": "multipart",
    "replacement": "multipart-async",
    "message": "e. `futures`-based) API support will be provided by [multipart-async]. ##### Minimum supported Rust version: 1. 36. 0  ##### Maintenance Status: Passive  As the web ecosystem in Rust moves towards asynchronous APIs, the need for this crate in synchronous API form becomes dubious. This crate in its current form is usable enough, so as of June 2020 it is now in passive maintenance mode; bug reports will be addressed as time permits and PRs will be accepted but otherwise no new development of the existing API is taking place. Look for a release of [multipart-async] soon which targets newer releases of Hyper. ### [Documentation](http://docs. rs/multipart/)  ## Integrations  Example files demonstrating how to use `multipart` with these crates are available under [`examples/`](examples). ### [Hyper ! [](https://img."
  },
  {
    "name": "miscreant",
    "replacement": "aes-siv",
    "message": "# 🚨 DEPRECATED! 🚨  The Miscreant project has been abandoned and archived. The Rust implementation has been adapted into the new `aes-siv` crate which implements both the AES-CMAC-SIV and AES-PMAC-SIV constructions:  <https://github. com/RustCrypto/AEADs/tree/master/aes-siv>  Please migrate to the `aes-siv` crate. Alternatively see the `aes-gcm-siv` crate for a newer, faster construction which provides similar properties:  <https://github. com/RustCrypto/AEADs/tree/master/aes-gcm-siv>"
  },
  {
    "name": "openat-ext",
    "replacement": "cap-std-ext",
    "message": "# This project is deprecated  Still maintained for now, but deprecated. Instead, we are focusing on [cap-std](https://docs. rs/cap-std/latest/cap_std/) and the successor to this crate is [cap-std-ext](https://docs. rs/cap-std-ext/latest/cap_std_ext/). Helpers for the openat crate ====   See https://crates. io/crates/openat  This crate defines a number of extension methods on `openat::Dir` with the common file utility functions that many real applications need."
  },
  {
    "name": "olympia_disassembler",
    "replacement": "olympia_cli",
    "message": "(DEPRECATED) Replaced by `olympia_cli disassemble`  Olympia is a gameboy emulator and toolkit, intended to run as a native or web assembly application targeting a cycle  count accurate emulation. olympia_disassembler is a CLI app to disassemble a GB ROM."
  },
  {
    "name": "zetta",
    "replacement": "eza",
    "message": "<div align=\"center\">  # zetta  This repo is archived now, [eza](https://github. com/eza-community/eza) is the more active fork of [exa](https://github. com/ogham/exa)."
  },
  {
    "name": "git-kit",
    "replacement": "inkan",
    "message": "[license](https://img. shields. io/github/license/xsv24/git-kit? color=blue&style=flat-square&logo=)](. /LICENSE)  # 🧰 git-kit  > 🚨 **IMPORTANT** > > This repository has been **renamed** to [inkan](https://github. com/xsv24/inkan) and thus this repository is now deprecated. > > Please head over to the [inkan](https://github. com/xsv24/inkan) repository to continue 🙏  Use this CLI to help format your git commit messages consistently with less effort via pre-provided templates! 🤩  There are two default templates provided:  1) [**Simple Commit Template**](#simple-commit-template)   2) [**Conventional Commit Template**](#conventional-commit-standard-templates)  You can also create your own Custom Templates by following the [**Custom Template Guide**](#-custom-commit-template-example). ## Simple Commit Template ```bash git-kit config set default ```  ```text -  ✨ feat        Adds new functionality. -  🐛 bug         Fix that resolves an unintended issue."
  },
  {
    "name": "rea-rs-macros",
    "replacement": "float_eq",
    "message": "to_string()} }  fn my_action_func(_flag: i32) -> Result<(), Box<dyn Error>> {     Reaper::get(). show_console_msg(\"running\");     Ok(()) }  #[reaper_extension_plugin] fn plugin_main(context: PluginContext) -> Result<(), Box<dyn Error>> {     Reaper::init_global(context);     let reaper = Reaper::get_mut();      let action = reaper. register_action(         // This will be capitalized and used as action ID in action window         \"command_name\",         // This is the line user searches action for         \"description\",         my_action_func,         // Only type currently supported         None     )? ;      reaper. register_timer(Box::new(Listener{action}));     Ok(()) } ```  There are float values in API. I recommend to use `float_eq` crate. ## API structure  Most of the time, API is used hierarchically: [Reaper](https://levitanus. github. io/rea-rs-doc/rea_rs/reaper/struct. Reaper. html) holds top-level functions and can return [Project](https://levitanus."
  },
  {
    "name": "hd44780-hal",
    "replacement": "hd44780-driver",
    "message": "# hd44780-hal\r \r Renamed and moved to [hd44780-driver](https://github. com/JohnDoneth/hd44780-driver)"
  },
  {
    "name": "gigtags",
    "replacement": "gigtag",
    "message": "<! -- SPDX-FileCopyrightText: The gigtags authors --> <! -- SPDX-License-Identifier: MPL-2. 0 -->  # REPLACED BY [gigtag](https://crates. io/crates/gigtag)"
  },
  {
    "name": "pkcs7",
    "replacement": "cms",
    "message": "DEPRECATED: use the `cms` crate instead"
  },
  {
    "name": "lmake_lines_of_code",
    "replacement": "cargo-auto",
    "message": "[comment]: # (lmake_md_to_doc_comments segment start A)  # lmake_lines_of_code    **🔴OBSOLETE, 🔴DEPRECATED, 🔴DEFUNCT! It was replaced by the crate [cargo-auto](https://crates. io/crates/cargo-auto)**   \\ \\ \\  [comment]: # (lmake_cargo_toml_to_md start)  ***version: 1. 1. 7  date: 2020-08-22 authors: Luciano Bestia***   **Lines of code for Rust projects**  [comment]: # (lmake_cargo_toml_to_md end)  [comment]: # (lmake_lines_of_code start) [! [Lines in Rust code](https://img."
  },
  {
    "name": "fraction",
    "replacement": "Decimal",
    "message": "750\"); ```  ### Generic integer constructor (construct with loose num/denom types)  If you have `numerator` and `denominator` of two incompatible types, which cannot be implicitly casted to a single common type. E. g. - numerator `i32`  - denominator `u32`  ```rust use fraction::{Sign, GenericFraction};  type F = GenericFraction<u32>;  let fra = F::new_generic(Sign::Plus, 1i8, 42usize). unwrap(); assert_eq! (fra, F::new(1u32, 42u32)); ```  ### Postgres usage notes It is recommended to use Decimal over Fraction for PostgreSQL interactions. When interacting with PostgreSQL, fraction type keeps the highest achievable precision up to 16383 digits after floating point. That may lead to suboptimal performance for such values as 1/3 or 1/7. Decimal has its own explicit precision, so there won't be accidental calculation of tens of thousands digits. PostgreSQL uses i16 for its binary protocol, so you'll have to use at least u16 as the base type for your GenericFraction/GenericDecimal. However, it is also possible to workaround via DynaInt<u8, _something_more_than_u8_>."
  },
  {
    "name": "hdrsample",
    "replacement": "hdrhistogram",
    "message": "**Use [`hdrhistogram`](https://crates. io/crates/hdrhistogram) instead**. The repository has moved to https://github. com/HdrHistogram/HdrHistogram_rust."
  },
  {
    "name": "dilithium",
    "replacement": "ml-dsa",
    "message": "DEPRECATED: use the `ml-dsa` crate instead"
  },
  {
    "name": "ncollide2d",
    "replacement": "parry2d",
    "message": "2 and 3-dimensional collision detection library in Rust. Will be superseded by the parry2d crate."
  },
  {
    "name": "globwalk",
    "replacement": "glob",
    "message": "io/crates/globwalk)  Recursively find files in a directory using globs. This crate is now in a perpetual maintnance mode and new users should probably cosider using [`glob`](https://crates. io/crates/glob/). ### Comparison to the `glob` crate ###  This crate was origially written years ago, when [`glob`](https://crates. io/crates/glob/) was a very differet crate, before it was adopted by the rust-lang org. Nowadays `glob` is much better, and overall better maintained, but there are a few features that it does not seem to have (based on [glob 0. 3. 1](https://docs. rs/glob/0. 3. 1/src/glob/lib."
  },
  {
    "name": "protobuf-codegen-pure",
    "replacement": "protobuf-codegen",
    "message": "\"); } ```  And in `Cargo. toml`:  ```toml [build-dependencies] protobuf-codegen-pure = \"2\" ```  It is advisable that `protobuf-codegen-pure` build-dependecy version be the same as `protobuf` dependency. The alternative is to use [`protoc-rust`](https://docs. rs/protoc-rust/=2) crate which uses `protoc` command for parsing (so it uses the same parser Google is using in their protobuf implementations). # Version 2  This is documentation for version 2 of the crate. In version 3, this API is moved to [`protobuf-codegen` crate](https://docs. rs/protobuf-codegen/%3E=3. 0. 0-alpha). <! -- cargo-sync-readme end -->"
  },
  {
    "name": "ion-c-sys",
    "replacement": "ion-rs",
    "message": "rs/ion-c-sys) [! [License](https://img. shields. io/crates/l/ion-c-sys)](https://crates. io/crates/ion-c-sys)  A Rust binding to [Ion C][ion-c] which implements the [Amazon Ion][spec] data format. ***This package is no longer maintained. Use [ion-rs][ion-rs] v0. 16. 0 or higher instead. ***  ## Development  See [Ion Rust][ion-rust] for details. This crate is currently developed in concert with Ion Rust as a [Cargo workspace][cargo-workspace]."
  },
  {
    "name": "com-rs",
    "replacement": "com",
    "message": "Deprecated. Use the `com` crate instead."
  },
  {
    "name": "atomic-polyfill",
    "replacement": "portable-atomic",
    "message": "# ⚠️ THIS CRATE IS DEPRECATED ⚠️  **Use [`portable-atomic`](https://crates. io/crates/portable-atomic) instead. ** It supports many more architectures and more efficient ways of emulating atomics. `portable-atomic` with the `critical-section` feature is a drop-in replacement. It uses the `critical-section` crate to ensure locking, just like `atomic-polyfill`. However, if your chip is single-core, you might want to enable the `unsafe-assume-single-core` feature instead."
  },
  {
    "name": "khronos-egl",
    "replacement": "egl",
    "message": "rs/khronos-egl\">Documentation</a></td>   <td><a href=\"https://crates. io/crates/khronos-egl\">Crate informations</a></td>   <td><a href=\"https://github. com/timothee-haudebourg/khronos-egl\">Repository</a></td> </tr></table>  This crate provides a binding for the Khronos EGL 1. 5 API. It was originally a fork of the [egl](https://crates. io/crates/egl) crate, which is left unmaintained. ## Usage  You can access the EGL API using an [`Instance`](https://docs. rs/khronos-egl/latest/khronos-egl/struct. Instance. html) object defined by either statically linking with `libEGL. so."
  },
  {
    "name": "caer",
    "replacement": "caer-make",
    "message": "This crate has been archived and replaced by the [`caer-make`](https://crates. io/crates/caer-make) crate. If you'd like to use this crate for a new project, please reach out to [`hi@caer. cc`](mailto:hi@caer. cc)! ## License and Contributions  Copyright 2025 With Caer, LLC."
  },
  {
    "name": "pwasm-utils",
    "replacement": "wasm-instrument",
    "message": "# pwasm-utils  > :warning: **This repository/crate is deprecated and unmaintained**: Switch to [`wasm-instrument`](https://github. com/paritytech/wasm-instrument) in order to use wasm instrumentation (gas metering, stack height limiter) in your project. For wasm code optimization [`binaryen`](https://github. com/WebAssembly/binaryen) should be used. A collection of WASM utilities used in pwasm-ethereum and substrate contract development. This repository contains the package `pwasm-utils` which consists of a library crate and a collection of cli binaries that make use of this library."
  },
  {
    "name": "mio-uds",
    "replacement": "mio",
    "message": "rs/mio-uds/badge. svg? version=0. 6)](https://docs. rs/mio-uds/~0. 6)  # mio-uds is Deprecated  With the 0. 7 release, `mio` now includes native support for Unix Domain Sockets. Consumers should switch to that functionality when updating their `mio` dependency to the 0. 7. x series. ## Usage  ```toml # Cargo."
  },
  {
    "name": "ion-c-sys-macros",
    "replacement": "ion-rs",
    "message": "[CI Build](https://github. com/amzn/ion-rust/workflows/CI%20Build/badge. svg)](https://github. com/amzn/ion-rust/actions? query=workflow%3A%22CI+Build%22)  Procedural macros for `ion-c-sys`. ***This package is no longer maintained. Use [ion-rs][ion-rs] v0. 16. 0 or higher instead. ***  [ion-rs]: https://crates. io/crates/ion-rs"
  },
  {
    "name": "libostree",
    "replacement": "ostree",
    "message": "*DEPRECATED* Please use the 'ostree' crate instead"
  },
  {
    "name": "hmac-sha1",
    "replacement": "sha1",
    "message": "[crates. io version](https://img. shields. io/crates/v/hmac-sha1. svg)\r \r A simple wrapper around the RustCrypto `hmac` and `sha1` crates for simple `HMAC-SHA1` generation. ## Functionality Note\r \r As the crate is now a thin wrapper around RustCrypto, please note that this crate can be replaced with the following code:\r \r ```rust\r use sha1::Sha1;\r use hmac::{Hmac, Mac};\r \r pub fn main() {\r     . . . // Create the hasher with the key. We can use expect for Hmac algorithms as they allow arbitrary key sizes. let mut hasher: Hmac<Sha1> = Mac::new_from_slice(key) ."
  },
  {
    "name": "app_dirs",
    "replacement": "directories",
    "message": "# Deprecated crate  Use [`directories`](https://crates. io/crates/directories) instead :)"
  },
  {
    "name": "pact_mock_server_ffi",
    "replacement": "pact_ffi",
    "message": "Pact mock server interface for foreign languages [DEPRECATED, replaced with pact_ffi]"
  },
  {
    "name": "kyber",
    "replacement": "ml-kem",
    "message": "DEPRECATED: use the `ml-kem` crate instead"
  },
  {
    "name": "esp32s2-hal",
    "replacement": "esp-hal",
    "message": "io/matrix/esp-rs:matrix. org? label=join%20matrix&labelColor=1C2C2E&color=BEC5C9&logo=matrix&style=flat-square)](https://matrix. to/#/#esp-rs:matrix. org)  > [! WARNING]   > > This package has been deprecated in favour of [esp-hal](https://github. com/esp-rs/esp-hal/tree/main/esp-hal). > > Please refer to the migration guide for help with updating your projects > to use the new 'esp-hal' package: > > https://github. com/esp-rs/esp-hal/releases/tag/v0. 16. 0  `no_std` HAL for the ESP32 from Espressif."
  },
  {
    "name": "esp32c2-hal",
    "replacement": "esp-hal",
    "message": "io/matrix/esp-rs:matrix. org? label=join%20matrix&labelColor=1C2C2E&color=BEC5C9&logo=matrix&style=flat-square)](https://matrix. to/#/#esp-rs:matrix. org)  > [! WARNING]   > > This package has been deprecated in favour of [esp-hal](https://github. com/esp-rs/esp-hal/tree/main/esp-hal). > > Please refer to the migration guide for help with updating your projects > to use the new 'esp-hal' package: > > https://github. com/esp-rs/esp-hal/releases/tag/v0. 16. 0  `no_std` HAL for the ESP32-C2 from Espressif."
  },
  {
    "name": "concurrent",
    "replacement": "conc",
    "message": "[deprecated] see `conc` instead."
  },
  {
    "name": "ht",
    "replacement": "xh",
    "message": "# ht\r [! [Version info](https://img. shields. io/crates/v/ht. svg)](https://crates. io/crates/ht)\r \r **ht has moved to [xh](https://crates. io/crates/xh). For more context behind the change, see [#1](https://github. com/ducaale/xh/issues/1)**\r \r Yet another [HTTPie](https://httpie. io/) clone in Rust. [!"
  },
  {
    "name": "esp32h2-hal",
    "replacement": "esp-hal",
    "message": "io/matrix/esp-rs:matrix. org? label=join%20matrix&labelColor=1C2C2E&color=BEC5C9&logo=matrix&style=flat-square)](https://matrix. to/#/#esp-rs:matrix. org)  > [! WARNING]   > > This package has been deprecated in favour of [esp-hal](https://github. com/esp-rs/esp-hal/tree/main/esp-hal). > > Please refer to the migration guide for help with updating your projects > to use the new 'esp-hal' package: > > https://github. com/esp-rs/esp-hal/releases/tag/v0. 16. 0  `no_std` HAL for the ESP32-H2 from Espressif."
  },
  {
    "name": "pystval",
    "replacement": "flexible_inspect_rs",
    "message": "# Project Relocation **The project has been successfully moved to a new name and address**. Now you can find it at the following links:  - https://github. com/m62624/flexible_inspect  - https://crates. io/crates/flexible_inspect_rs  This decision was made due to the fact that the first version of the project encountered some bugs and problems. The new version has been redesigned to take these comments into account and has gained more flexibility and usability, especially when importing into programming languages other than Python. We are confident that these changes will allow the project to work more efficiently and reliably"
  },
  {
    "name": "joinery_macros",
    "replacement": "DuckDB",
    "message": "Easy to run locally under Docker. - AWS Athena 3: Mostly works, but we need to port the UDFs. - Presto: Try it and see? - Snowflake: Not bad. - SQLite3: Will probably be removed soon. Might be replaced with DuckDB? If you want to run _your_ production workloads, **you will almost certainly need to contribute code. ** In particular, our API coverage is limited. See [`tests/sql/`](. /tests/sql/) for examples of what we support. ## Design philosophy  In an _ideal_ world, `joinery` would do one of two things:  1."
  },
  {
    "name": "esp32c3-hal",
    "replacement": "esp-hal",
    "message": "io/matrix/esp-rs:matrix. org? label=join%20matrix&labelColor=1C2C2E&color=BEC5C9&logo=matrix&style=flat-square)](https://matrix. to/#/#esp-rs:matrix. org)  > [! WARNING]   > > This package has been deprecated in favour of [esp-hal](https://github. com/esp-rs/esp-hal/tree/main/esp-hal). > > Please refer to the migration guide for help with updating your projects > to use the new 'esp-hal' package: > > https://github. com/esp-rs/esp-hal/releases/tag/v0. 16. 0  `no_std` HAL for the ESP32-C3 from Espressif."
  },
  {
    "name": "pam-auth",
    "replacement": "pam",
    "message": "[MOVED TO `pam`] Safe Rust wrapper for PAM authentification"
  },
  {
    "name": "ripemd320",
    "replacement": "ripemd",
    "message": "Deprecated. Use the ripemd crate isntead."
  },
  {
    "name": "gdk",
    "replacement": "gdk4",
    "message": "UNMAINTAINED Rust bindings for the GDK 3 library (use gdk4 instead)"
  },
  {
    "name": "gdk-sys",
    "replacement": "gdk4-sys",
    "message": "UNMAINTAINED FFI bindings to libgdk-3 (use gdk4-sys instead)"
  },
  {
    "name": "supply-chain-trust-crate-000023",
    "replacement": "once_cell",
    "message": "(dates, vec! [       (\"2010\", \"03\", \"14\"),       (\"2014\", \"10\", \"14\"),     ]); } ```  ### Usage: Avoid compiling the same regex in a loop  It is an anti-pattern to compile the same regular expression in a loop since compilation is typically expensive. (It takes anywhere from a few microseconds to a few **milliseconds** depending on the size of the regex. ) Not only is compilation itself expensive, but this also prevents optimizations that reuse allocations internally to the matching engines. In Rust, it can sometimes be a pain to pass regular expressions around if they're used from inside a helper function. Instead, we recommend using the [`once_cell`](https://crates. io/crates/once_cell) crate to ensure that regular expressions are compiled exactly once. For example:  ```rust use {     once_cell::sync::Lazy,     regex::Regex, };  fn some_helper_function(haystack: &str) -> bool {     static RE: Lazy<Regex> = Lazy::new(|| Regex::new(r\". . . \")."
  },
  {
    "name": "gdkwayland",
    "replacement": "gdk4-wayland",
    "message": "UNMAINTAINED Rust bindings of the GDK-Wayland 3 library (use gdk4-wayland instead)"
  },
  {
    "name": "gdkwayland-sys",
    "replacement": "gdk4-wayland-sys",
    "message": "UNMAINTAINED FFI bindings to libgdk-3-wayland (use gdk4-wayland-sys instead)"
  },
  {
    "name": "gdkx11-sys",
    "replacement": "gdk4-x11-sys",
    "message": "UNMAINTAINED FFI binding for libgdkx11 (use gdk4-x11-sys instead)"
  },
  {
    "name": "gdkx11",
    "replacement": "gdk4-x11",
    "message": "UNMAINTAINED Rust bindings for the GDK X11 library (use gdk4-x11 instead)"
  },
  {
    "name": "gtk-sys",
    "replacement": "gtk4-sys",
    "message": "UNMAINTAINED FFI bindings to libgtk-3 (use gtk4-sys instead)"
  },
  {
    "name": "gtk3-macros",
    "replacement": "gtk4-macros",
    "message": "UNMAINTAINED Rust bindings for the GTK 3 library (use gtk4-macros instead)"
  },
  {
    "name": "ncollide3d",
    "replacement": "parry3d",
    "message": "2 and 3-dimensional collision detection library in Rust. Will be superseded by the parry3d crate."
  },
  {
    "name": "poem-openapi-macro",
    "replacement": "poem-extensions-macro",
    "message": "# poem-openapi-macro was renamed poem-extensions-macro  ## Deprecated  poem-openapi-macro was renamed poem-extensions-macro. So you should use the [poem-extensions-macro](https://crates. io/crates/poem-extensions-macro) crate instead of this one."
  },
  {
    "name": "ethers-solc",
    "replacement": "foundry-compilers",
    "message": "# ethers-solc  Utilities for working with native `solc` and compiling projects. > **Warning** >  > This crate is deprecated in favor of [`foundry-compilers`](https://crates. io/foundry-compilers) ([foundry-rs/compilers](https://github. com/foundry-rs/compilers)). See [#2667](https://github. com/gakonst/ethers-rs/issues/2667) for more information. To also compile contracts during `cargo build` (so that ethers `abigen!"
  },
  {
    "name": "lubeck",
    "replacement": "higher",
    "message": "/lubeck_logo. png\" /> </div>  # Update   There is another crate out in the wild which is called [higher](https://github. com/bodil/higher). It does a lot of the things that I wanted to do here with the lubeck crate. I figured, that it would be better for the community to only have one such crate in active development so I'm just going to link to it here and abandon the development of this crate. This doesn't mean however, that the book goal is abandoned aswell. # Goals This repository tries to continue the work started in [JasonShin's](https://github. com/JasonShin) crate [fp-core. rs](https://github. com/JasonShin/fp-core. rs)."
  },
  {
    "name": "msp430-atomic",
    "replacement": "portable-atomic",
    "message": "# `msp430-atomic`\r \r > Atomic operations for MSP430 microcontrollers\r \r **Deprecated**: This crate's functionality is a strict subset of [`portable-atomic`](https://github. com/taiki-e/portable-atomic)\r as of `v0. 3. 16`. Use `portable-atomic` `v0. 3."
  },
  {
    "name": "safe-mmio",
    "replacement": "tock-registers",
    "message": "io/crates/vcell)                         | January 2021   | 0. 1. 3   | ❌                | ❌                                    | ❌                                | plain struct                        | manual (references)        | | [register](https://crates. io/crates/register)                   | January 2021   | 1. 0. 2   | ❌                | ❌                                    | ❌                                | macros to define fields and structs | manual (references)        | Deprecated in favour of tock-registers. Also covers CPU registers, and bitfields. |  ## License  Licensed under either of  - Apache License, Version 2. 0   ([LICENSE-APACHE](LICENSE-APACHE) or http://www. apache. org/licenses/LICENSE-2."
  },
  {
    "name": "libsparkypi",
    "replacement": "gpio-cdev",
    "message": "g. remote control, magnetic door sensor etc. ). This also helps a lot in finding the right pulse length. Note that many of the available transmitter modules seem to be a bit laggy, so you might need to reduce the pulse length a little bit to compensate. * `libsparkypi` *does not* rely on wiringpi, which seems to be deprecated. * Earlier versions of `libsparkypi` rely on the [rppal](https://crates. io/crates/rppal) crate, which is excellent. However, I wanted to make the project a little bit more platform independent, so the project now relies on [gpio-cdev](https://crates. io/crates/gpio-cdev)."
  },
  {
    "name": "mpris-player",
    "replacement": "mpris-server",
    "message": "**Note**: mpris-player is no longer actively maintained. We suggest using the [`mpris-server`](https://crates. io/crates/mpris-server) crate instead. ---  # mpris-player #### A Rust library for creating MPRIS2 media players over D-Bus  - [Open homepage](https://gitlab. gnome. org/World/Rust/mpris-player) - [Report issue](https://gitlab."
  },
  {
    "name": "luminance-windowing",
    "replacement": "platform",
    "message": "# luminance-windowing  <! -- cargo-sync-readme start -->  This crate is deprecated! You must now use the platform crate to customize how a window should be opened. <! -- cargo-sync-readme end -->"
  },
  {
    "name": "icu_testdata",
    "replacement": "ICU4X",
    "message": "# icu_testdata [! [crates. io](https://img. shields. io/crates/v/icu_testdata)](https://crates. io/crates/icu_testdata)  🚧 This crate has been superseded by `ICU4X`'s `compiled_data` feature and is deprecated. Data for new components will not be added, and it will not be updated for `ICU4X` 2. 0. <! -- cargo-rdme start -->  `icu_testdata` is a unit testing crate for [`ICU4X`]. The crate exposes data providers with stable data useful for unit testing."
  },
  {
    "name": "largeint",
    "replacement": "num-bigint",
    "message": "For example, creating an instance of a `LargeInt` with a scalar value of `0` using `new` will automatically assign `Sign::Unsigned` to the sign of the LargeInt even if you enter another `Sign` variant. The purpose of this library is to provide an easy-to-use large integer implementation in Rust. The ideal user is one that is looking to write small scale projects for personal use and does not want to spend time a lot of time learning a complex crate such as num-bigint. For example, this library would be ideal for one looking to solve [Project Euler Problem 13](https://projecteuler. net/problem=13). However, the largeint library is not particularly efficient and therefore it is recommended to use a crate like num-bigint for more serious projects. Let's see just how easy it is to start performing large integer arithmetic! ## An Example  ```rust extern crate largeint;  use largeint::largeint::*;  fn main() {      // Adding two LargeInts. let largeint1 = new(String::from(\"33901489213409093401849249010492000112\"), Sign::Positive);     let largeint2 = new(String::from(\"8294839402902010934029489031849310009324234230\"), Sign::Negative);     let largeint3 = largeint1. add(&largeint2);     let largeint4 = new(String::from(\"8294839369000521720620395630000060998832234118\"), Sign::Negative);     assert_eq! (largeint3,largeint4);      // Subtracting two LargeInts."
  },
  {
    "name": "ink-wrapper",
    "replacement": "aleph_client",
    "message": "They're provided by the trait `my_contract::MyContract` (depends on your actual contract name)     use my_contract::MyContract as _;      // Construct the call object. let exec_call = address. some_exec_call();          // Execute it. let res = session. execute(exec_call); } ```  For more comprehensive examples on actual contract wrappers, see `tests` directory. #### `aleph_client` (deprecated from `0. 7. 0`)  You will need the following dependencies for the wrapper to work:  ```toml ink-wrapper-types = \"0. 6. 0\" scale = { package = \"parity-scale-codec\", version = \"3\", default-features = false, features = [\"derive\"] } ink_primitives = \"4. 2."
  },
  {
    "name": "gtk",
    "replacement": "gtk4",
    "message": "UNMAINTAINED Rust bindings for the GTK+ 3 library (use gtk4 instead)"
  },
  {
    "name": "scuffle-ffmpeg-sys",
    "replacement": "ffmpeg-sys-next",
    "message": "cacheSeconds=3600)](https://crates. io/crates/ffmpeg-sys-next) [! [build](https://github. com/zmwangx/rust-ffmpeg-sys/workflows/build/badge. svg)](https://github. com/zmwangx/rust-ffmpeg-sys/actions)  This is a fork of the abandoned [ffmpeg-sys](https://github. com/meh/rust-ffmpeg-sys) crate. You can find this crate as [ffmpeg-sys-next](https://crates. io/crates/ffmpeg-sys-next) on crates. io. This crate contains low level bindings to FFmpeg."
  },
  {
    "name": "lmake_semver",
    "replacement": "cargo-auto",
    "message": "# lmake_semver    [comment]: # (lmake_cargo_toml_to_md start)  **🔴OBSOLETE, 🔴DEPRECATED, 🔴DEFUNCT! It was replaced by the crate [cargo-auto](https://crates. io/crates/cargo-auto)**   \\ \\ \\  ***version: 0. 1. 11  date: 2020-08-22 authors: Luciano Bestia***   **Increments the patch or minor version in Cargo. toml."
  },
  {
    "name": "sse-server",
    "replacement": "broker",
    "message": "Moved to package broker"
  },
  {
    "name": "zinc64-core",
    "replacement": "zinc64-emu",
    "message": "io/crates/v/zinc64. svg? maxAge=2592000)](https://crates. io/crates/zinc64)  ** **NOTE: zinc64 crate has been renamed to zinc64-emu** **  ## Overview  zinc64 is a Commodore 64 emulator toolkit \"with batteries included but swappable\". It is designed to be used as a standalone emulator or a library used to build new emulators. The design philosophy allows for each component to be swapped out and replaced by different implementation. Therefore, special considerations were made to model interactions between chips without coupling them together. It implements MOS 6510 CPU, MOS 6526 CIA, MOS 6581 SID, MOS 6567/6569 VIC chipset as well as various devices and peripherals available with C64. ### Story  zinc64 was started as an exercise to learn Rust and explore Commodore 64 hardware in more detail. Somewhere around mid 2016 I needed to feed my 8-bit nostalgia so I picked up a working Commodore 64 (physical version) and started to assemble various accessories required to get software onto it. Soon enough I had picked up a copy of C64 Programmer's Reference Guide and the rest is now history."
  },
  {
    "name": "sleef-trig-sys",
    "replacement": "sleef-trig",
    "message": "# sleef-trig-sys  Bindings to some [SLEEF](https://sleef. org) trigonometric functions:  * `Sleef_sinf1_u35purec` * `Sleef_cosf1_u35purec` * `Sleef_sind1_u35purec` * `Sleef_sind2_u35sse2` * `Sleef_sind4_u35avx`  Please note that SIMD FFI is [unstable and relies on undefined behaviour](https://github. com/rust-lang/rust/issues/63068). The purpose of this crate is to enable correctness testing of `sleef-trig`, a Rust port of some of the above functions. I recommend using it instead of this crate due to the aformentioned soundness issues."
  },
  {
    "name": "jerk-build",
    "replacement": "jerk",
    "message": "# **jerk**-build: **J**ava **E**mbedding **R**ust **K**it - [build. rs] / [metabuild] script\r \r This crate is deprecated and has been merged into `jerk`"
  },
  {
    "name": "lpc82x-hal",
    "replacement": "lpc8xx-hal",
    "message": "DEPRECATED. Please use lpc8xx-hal."
  },
  {
    "name": "tauri-dialog-sys",
    "replacement": "rfd",
    "message": "# Deprecation notice  This crate is no longer maintained. Tauri now uses [rfd](https://github. com/PolyMeilex/rfd)."
  },
  {
    "name": "webhere",
    "replacement": "webdev",
    "message": "Deprecated. Move to webdev"
  },
  {
    "name": "rea-rs",
    "replacement": "float_eq",
    "message": "to_string()} }  fn my_action_func(_flag: i32) -> Result<(), Box<dyn Error>> {     Reaper::get(). show_console_msg(\"running\");     Ok(()) }  #[reaper_extension_plugin] fn plugin_main(context: PluginContext) -> Result<(), Box<dyn Error>> {     Reaper::init_global(context);     let reaper = Reaper::get_mut();      let action = reaper. register_action(         // This will be capitalized and used as action ID in action window         \"command_name\",         // This is the line user searches action for         \"description\",         my_action_func,         // Only type currently supported         None     )? ;      reaper. register_timer(Box::new(Listener{action}));     Ok(()) } ```  There are float values in API. I recommend to use `float_eq` crate. ## API structure  Most of the time, API is used hierarchically: [Reaper](https://levitanus. github. io/rea-rs-doc/rea_rs/reaper/struct. Reaper. html) holds top-level functions and can return [Project](https://levitanus."
  },
  {
    "name": "thin-dst",
    "replacement": "slice-dst",
    "message": "# thin-dst  Boxed custom DSTs that store a slice and the length of said slice inline. Uses the standard library collection types for full interoperability, and also provides thin owned pointers for space-conscious use. ## Alternative  [slice-dst] is a successor to this crate, which, along with the other [pointer-utils] crates, offers a more composable API. This crate will continue to be reactively maintained, but any future development will focus on pointer-utils/slice-dst instead. [slice-dst]: <https://lib. rs/crates/slice-dst>   [pointer-utils]: <https://github. com/CAD97/pointer-utils>  ## Examples  The simplest example is just a boxed slice:  ```rust let boxed_slice = ThinBox::new((), vec! [0, 1, 2, 3, 4, 5]); assert_eq! (&*boxed_slice, &[0, 1, 2, 3, 4, 5][."
  },
  {
    "name": "simple_stats",
    "replacement": "statistical",
    "message": "# Deprecated #  ## Simple Stats ##  The simple_stats project has been renamed statistical. Please update all code and linkes to use [statistical](https://www. github. com/jeffbelgum/statistical)  ``` [dependencies] statistical = \"*\" ````  ## Contributions ##   Pull Requests and Issues welcome on the renamed project [statistical](https://www. github. com/jeffbelgum/statistical)"
  },
  {
    "name": "rsdp",
    "replacement": "acpi",
    "message": "# Acpi ⚠️**WARNING: The `rsdp` crate was previously a component of the `acpi` ecosystem, but has been deprecated. Its functionality is now entirely supported by the `acpi` crate, including a subset of functionality that will work in an environment that does not have an allocator. This crate will likely not receive further updates**⚠️  ! [Build Status](https://github. com/rust-osdev/acpi/actions/workflows/build. yml/badge."
  },
  {
    "name": "totp-sos",
    "replacement": "totp-rs",
    "message": "# totp-sos  This library was a fork of [totp-rs][] that is no longer maintained, instead all the features we needed have been merged into [totp-rs][] so use that crate instead. * [totp-rs]: https://github. com/constantoine/totp-rs"
  },
  {
    "name": "serde_nbt",
    "replacement": "valence_nbt",
    "message": "NOTE: This crate has been superseded by [valence_nbt](https://crates. io/crates/valence_nbt). If you have a use for this crate name, contact the Valence developers. A Serde library for serializing and deserializing Minecraft's [Named Binary Tag](https://minecraft. fandom. com/wiki/NBT_format) (NBT) format."
  },
  {
    "name": "speak",
    "replacement": "Speak",
    "message": "# This project is deprecated, use alternatives  <h1 align=\"center\">  Speak  ! [logo](. /public/logo. svg)  <p align=\"center\">  <a href=\"https://www. mozilla. org/en-US/MPL/2."
  },
  {
    "name": "llhd-sim",
    "replacement": "LLHD",
    "message": "Deprecated reference simulator for Low Level Hardware Description assembly. Now part of the LLHD crate."
  },
  {
    "name": "nebula-graph-fbthrift-raftex-v2",
    "replacement": "nebula-fbthrift-raftex-v2",
    "message": "# nebula-graph-fbthrift-raftex-v2  * [Cargo package](https://crates. io/crates/nebula-graph-fbthrift-raftex-v2)  Archived, Rename to [nebula-fbthrift-raftex-v2](https://crates. io/crates/nebula-fbthrift-raftex-v2)"
  },
  {
    "name": "wait-list",
    "replacement": "pin-list",
    "message": "Deprecated in favour of pin-list"
  },
  {
    "name": "cld2",
    "replacement": "whatlang",
    "message": "io/crates/cld2) [! [License](https://img. shields. io/crates/l/cld2. svg)](https://crates. io/crates/cld2)  **DEPRECATED in favor of [whatlang][],** which is native Rust and smaller. If you have a compelling use-case for this code, please open an issue. Simple PRs, especially for bug fixes, will still be read and possibly merged. [whatlang]: https://crates. io/crates/whatlang  This Rust library detects the language of a string using the [cld2 library][cld2] from the Chromium project. To use it, add the following lines to your `Cargo."
  },
  {
    "name": "c_str_macro",
    "replacement": "c_string",
    "message": "[Maintenance Status](https://img. shields. io/badge/maintenance-as--is-yellowgreen. svg)  This macro-only crate provides the `c_str! ` macro to facilitate creation of C-compatible string values from Rust string literals. ## Legacy code  This repository also contains source code for crate `c_string`, which is no longer maintained. It provided some utility types to facilitate working with C-compatible strings in Rust, but most of them were poorly designed or do not fit well with the evolution of the language. The topmost commit for that crate is available under branch `c-string`. ## License  Licensed under either of   * Apache License, Version 2. 0    ([LICENSE-APACHE](LICENSE-APACHE) or http://www. apache."
  },
  {
    "name": "wow_vanilla_dbc",
    "replacement": "wow_dbc",
    "message": "Deprecated, use wow_dbc instead."
  },
  {
    "name": "slotmapvec",
    "replacement": "slotmap",
    "message": "Deprecated: use slotmap"
  },
  {
    "name": "enum-kinds-macros",
    "replacement": "enum-kinds",
    "message": "Deprecated in favor of the enum-kinds crate. Generate enums with matching variants but without any of the associated data. enum-kinds-traits crate contains trait definitions used by this crate."
  },
  {
    "name": "poem-openapi-response",
    "replacement": "poem-extensions",
    "message": "# poem-openapi-response was renamed poem-extensions  ## Deprecated  poem-openapi-response was renamed poem-extensions. So you should use the [poem-extensions](https://crates. io/crates/poem-extensions) crate instead of this one."
  },
  {
    "name": "lyon_path_builder",
    "replacement": "lyon_path",
    "message": "[Deprecated] moved into the crate lyon_path."
  },
  {
    "name": "xmlparser-derive",
    "replacement": "strong-xml",
    "message": "# deprecated  `xmlparser-dervie` has been renamed to `strong-xml` since v0. 1. 2. # xmlparser-derive  A proc macro to generate functions for writing to and parsing from xml string, based on xmlparser. ### Quick Start  ```toml xmlparser = \"0. 13."
  },
  {
    "name": "nebula-graph-fbthrift-graph",
    "replacement": "nebula-fbthrift-graph",
    "message": "# nebula-graph-fbthrift-graph  * [Cargo package](https://crates. io/crates/nebula-graph-fbthrift-graph)  Archived, Rename to [nebula-fbthrift-graph](https://crates. io/crates/nebula-fbthrift-graph)"
  },
  {
    "name": "pimalaya-email",
    "replacement": "email-lib",
    "message": "**This crate is no longer maintained**, because it has been renamed [email-lib](https://crates. io/crates/email-lib). https://git. sr. ht/~soywod/pimalaya"
  },
  {
    "name": "tail_chaser",
    "replacement": "staart",
    "message": "Project moved to 'staart'"
  },
  {
    "name": "old-http",
    "replacement": "Teepee",
    "message": "It was a useful experiment and is now being replaced under the scope of the `Teepee <http://teepee. rs>`_ project. For more information on what’s happening with it all, see http://chrismorgan. info/blog/introducing-teepee. html. Until Teepee is ready for use, rust-http will be maintained so you can use it with Rust master, but no new work is being done on it. After that, it will probably wind down fairly quickly with a migration guide to help you change to Teepee. So long as you haven’t built a massive program with it (not advised! ), migration should not be terribly difficult. But for now, if you want to play with HTTP in Rust, this is the library to use. Rust HTTP library =================  ."
  },
  {
    "name": "ordslice",
    "replacement": "superslice",
    "message": "[Latest Version](https://img. shields. io/crates/v/ordslice. svg)](https://crates. io/crates/ordslice)\r \r Licensed under APACHE-2. # Deprecated\r \r This crate is deprecated and replaced by [superslice](https://github. com/alkis/superslice-rs). ### Documentation\r \r https://docs. rs/ordslice\r \r ### Installation\r \r This crate works with Cargo and is on\r [crates. io](https://crates. io/crates/ordslice)."
  },
  {
    "name": "wvwasi-wry",
    "replacement": "tao",
    "message": "3. Your Rust app needs to call `wry::android_setup` function to setup the necessary logic to be able to create webviews later on. 4. Your Rust app needs to call `wry::android_binding! ` macro to setup the JNI functions that will be called by `WryActivity` and various other places. It is recommended to use [`tao`](https://docs. rs/tao/latest/tao/) crate as it provides maximum compatibility with `wry`  ```rs #[cfg(target_os = \"android\")] {   tao::android_binding! (       com_example,       wry_app,       WryActivity,       wry::android_setup, // pass the wry::android_setup function to tao which will invoke when the event loop is created       _start_app   );   wry::android_binding! (com_example, ttt); } ```  - `WRY_ANDROID_PACKAGE` which is the reversed domain name of your android project and the app name in snake_case for example: `com. wry. example."
  },
  {
    "name": "hashicorp-lru",
    "replacement": "caches",
    "message": "The project is moved to caches, please see crate caches"
  },
  {
    "name": "pi_data_view",
    "replacement": "bytes",
    "message": "# pi_data_view\r \r ## Deprecated 已废弃，请用 [bytes](https://crates. io/crates/bytes)代替\r \r 二进制数据的 视图结构\r \r 可以从 二进制对象中读写多种数值类型的底层接口,使用它时,不用考虑不同平台的字节序问题。 此外，额外提供一个名为 move_part 的 trait，可以将二进制的一个片段拷贝到改二进制的另一个位置"
  },
  {
    "name": "tokio-batch",
    "replacement": "futures-batch",
    "message": "Deprecated. Use futures-batch instead. An adaptor that chunks up elements and flushes them after a timeout or when the buffer is full."
  },
  {
    "name": "instagram-graph-api-client",
    "replacement": "http-api-isahc-client",
    "message": "# instagram-graph-api-client  * [Cargo package](https://crates. io/crates/instagram-graph-api-client)  Deprecated, Please use [http-api-isahc-client](https://docs. rs/http-api-isahc-client) crate."
  },
  {
    "name": "uchardet",
    "replacement": "chardet",
    "message": "[Documentation](https://img. shields. io/badge/documentation-docs. rs-yellow. svg)](https://docs. rs/uchardet/)  _**Deprecated in favor of [chardet][],** which is pure Rust. If you have use-case for this code, please feel free to open an issue. Simple PRs will still be read, and possibly accepted. _  [chardet]: https://crates. io/crates/chardet  Attempts to detect the character encoding of raw text using the `uchardet` library. Example:  ```rust // At the top of the file."
  },
  {
    "name": "simulated_packed_simd",
    "replacement": "packed_simd",
    "message": "# ssimd  This is a fork of the unmaintained [ssimd](https://crates. io/crates/ssimd) crate with the goal of making it compatible with [packed_simd](https://github. com/rust-lang/packed_simd). Simulated Simd on Rust stable channel. This is my effort to make the [packed-simd crate](https://github. com/rust-lang/packed_simd) work on stable channel."
  },
  {
    "name": "gtk-layer-shell-sys",
    "replacement": "gtk4-layer-shell",
    "message": "7. 2/status. svg)](https://deps. rs/crate/gtk-layer-shell-sys/0. 7. 2)  # This project is UNMAINTAINED. Please use GTK4 and take a look at [gtk4-layer-shell](https://crates. io/crates/gtk4-layer-shell) instead! # gtk-layer-shell-sys These are the unsafe FFI bindings for [gtk-layer-shell](https://github. com/wmww/gtk-layer-shell). They were automatically generated from its [."
  },
  {
    "name": "signal-msg",
    "replacement": "signal-notify",
    "message": "com/swizard0/rust-simple-signal) library. A more robust (if also more verbose) solution is possible when using the [signal-hook](https://github. com/vorner/signal-hook) library. Similar functionality to signal-msg is provided by the [signal-notify](https://crates. io/crates/signal-notify) and [chan-signal](https://crates. io/crates/chan-signal) libraries (note, though, that the latter is deprecated). )  ## Usage  ```rust use signal_msg::{self, SignalReceiver, SignalSender};  fn main() {     let (signal_sender, signal_receiver) = signal_msg::new();     signal_sender. prepare_signals();     println! (\"Waiting for a signal. . ."
  },
  {
    "name": "truelayer-extensions",
    "replacement": "task-local-extensions",
    "message": "# truelayer-extensions  NOTE: This crate was moved to [task-local-extensions](https://crates. io/crates/task-local-extensions). Provides a type-safe task-local container for arbitrary data keyed by types and asynchronous. [! [Crates. io](https://img."
  },
  {
    "name": "ssvm_tensorflow_interface",
    "replacement": "wasmedge_tensorflow_interface",
    "message": "# This Repository Is Deprecated  This library has been renamed and moved to `wasmedge_tensorflow_interface`. Please follow the resulting [new wasmedge_tensorflow_interface](https://crates. io/crates/wasmedge_tensorflow_interface) crate for further development. No further development will take place in this repository. # SSVM Tensorflow Interface  A Rust library that provides Rust to WebAssembly developers with syntax for using tensorflow functionality when their Wasm is being executed on [SecondState's SSVM](https://github. com/second-state/SSVM)."
  },
  {
    "name": "tupm",
    "replacement": "PBKDF2",
    "message": "I'm not a cryptographer, but I do have several concerns about the cryptography used in the UPM format. 1. **Usage of PKCS#12 key derivation. **  UPM derives a key from the    master password using the PKCS#12 v1. 0 key derivation function (KDF). The latest PKCS#12 standard declares that this KDF \"is not    recommended and is deprecated for new usage\" and recommends using    PBKDF2 instead. (See: [RFC 7292 Appendix B]    (https://tools. ietf. org/html/rfc7292#appendix-B). ) The PKCS#12    KDF does not seem to be commonly used outside of protecting actual    PKCS#12 data structures. I'm not aware of any specific weaknesses    that have been found, but its deprecation status doesn't inspire much    confidence."
  },
  {
    "name": "waxosuit-codec",
    "replacement": "wascc-codec",
    "message": "Deprecated - please use wascc-codec going forward"
  },
  {
    "name": "tdns-update",
    "replacement": "tdns-cli",
    "message": "Dynamic DNS updater (RFC 2136) - superseded by `tdns-cli`"
  },
  {
    "name": "ssvm_process_interface",
    "replacement": "wasmedge_process_interface",
    "message": "# This Repository Is Deprecated  This library has been renamed and moved to `wasmedge_process_interface`. Please follow the resulting [new wasmedge_process_interface](https://crates. io/crates/wasmedge_process_interface) crate for further development. No further development will take place in this repository. # SSVM Process Interface  A Rust library that provides Rust to WebAssembly developers with syntax for running commands functionality when their Wasm is being executed on [SecondState's SSVM](https://github. com/second-state/SSVM)."
  },
  {
    "name": "tracing-fmt",
    "replacement": "tracing-subscriber",
    "message": "A `tracing` subscriber that formats and logs trace data. Moved to the `tracing-subscriber` crate."
  },
  {
    "name": "sys-info-rs",
    "replacement": "sys-info",
    "message": "Warning: This package has already moved to sys-info."
  },
  {
    "name": "liblinkspace",
    "replacement": "linkspace",
    "message": "Defunct - Moved to linkspace"
  },
  {
    "name": "gtk-layer-shell",
    "replacement": "gtk4-layer-shell",
    "message": "8. 2/status. svg)](https://deps. rs/crate/gtk-layer-shell/0. 8. 2)  # This project is UNMAINTAINED. Please use GTK4 and take a look at [gtk4-layer-shell](https://crates. io/crates/gtk4-layer-shell) instead! # gtk-layer-shell This is the safe wrapper for [gtk-layer-shell](https://github. com/wmww/gtk-layer-shell), automatically generated from its [. gir file](."
  },
  {
    "name": "tokio-http2",
    "replacement": "HPACK",
    "message": "e. , those that issued large number of resource requests). We found a reduction of 45–1142 ms in page load time simply due to header compression. \" --SPDY whitepaper, chromium. org*  >>However, in the summer of 2012, a \"CRIME\" security attack was published against TLS and SPDY compression algorithms, which could result in session hijacking. As a result, the zlib compression algorithm was replaced by HPACK, which was specifically designed to: address the discovered security issues, be efficient and simple to implement correctly, and of course, enable good compression of HTTP header metadata. >>For full details of the HPACK compression algorithm, see https://tools. ietf. org/html/draft-ietf-httpbis-header-compression. *[Table of Contents](#contents)*  <a name=\"upgrading\"></a> ## Upgrading to HTTP/2 The switch to HTTP/2 cannot happen overnight: millions of servers must be updated to use the new binary framing, and billions of clients must similarly update their networking libraries, browsers, and other applications. The good news is, all modern browsers have committed to supporting HTTP/2, and most modern browsers use efficient background update mechanisms, which have already enabled HTTP/2 support with minimal intervention for a large proportion of existing users."
  },
  {
    "name": "u16cstr",
    "replacement": "widestring",
    "message": "# This project has been deprecated as it is now a part of [`widestring`](https://crates. io/crates/widestring/). # u16cstr\r \r [! [Build](https://github. com/OpenByteDev/u16cstr/actions/workflows/build-and-test. yml/badge."
  },
  {
    "name": "tauri_includedir_codegen",
    "replacement": "tauri-codegen",
    "message": "This crate was deprecated. It is now part of the `tauri-codegen` crate."
  },
  {
    "name": "gear-pwasm-utils",
    "replacement": "wasm-instrument",
    "message": "# pwasm-utils  > :warning: **This repository/crate is deprecated and unmaintained**: Switch to [`wasm-instrument`](https://github. com/paritytech/wasm-instrument) in order to use wasm instrumentation (gas metering, stack height limiter) in your project. For wasm code optimization [`binaryen`](https://github. com/WebAssembly/binaryen) should be used. A collection of WASM utilities used in pwasm-ethereum and substrate contract development. This repository contains the package `pwasm-utils` which consists of a library crate and a collection of cli binaries that make use of this library."
  },
  {
    "name": "fbx_direct",
    "replacement": "fbxcel",
    "message": "= fbx_direct, a low-level FBX parser for Rust  **DEPRECATED**. Use link:https://github. com/lo48576/fbxcel[`fbxcel`] instead. fbx_direct is an FBX library for Rust programming language. It is heavily inspired by link:https://en. wikipedia."
  },
  {
    "name": "thinbox",
    "replacement": "fat_type",
    "message": "#⚠️ Deprecated ⚠️ This crate is deprecated. All users are encouraged to migrate to [`fat_type`]. #thinbox `thinbox` provided an alternative implementation of the standard Rust [`Box`] container which had a pointer-sized representation in all cases. # Documentation Inline rustdoc documentation is available. A mirror of this documentation is available at <https://docs. rs/thinbox>."
  },
  {
    "name": "oysterpack_built_mod",
    "replacement": "oysterpack_app_metadata",
    "message": "This crate has been deprecated. It has been replaced by [oysterpack_app_metadata](https://crates. io/crates/oysterpack_app_metadata)"
  },
  {
    "name": "fixed-buffer-tokio",
    "replacement": "fixed-buffer",
    "message": "NOT MAINTAINED. This crate was replaced by the `fixed-buffer` crate with `tokio` feature."
  },
  {
    "name": "tokio-os-timer",
    "replacement": "async-timer",
    "message": "com/jonhoo/tokio-os-timer) [! [Cirrus CI Build Status](https://api. cirrus-ci. com/github/jonhoo/tokio-os-timer. svg)](https://cirrus-ci. com/github/jonhoo/tokio-os-timer)  **This crate is deprecated. Please use [`async-timer`](https://github. com/DoumanAsh/async-timer) with the `tokio_on` feature enabled instead. **  This crate provides timers for use with tokio that rely on OS mechanisms for timer management rather than a separate timing mechanism like [`tokio-timer`]. This comes at somewhat increased overhead if you have many timers, but allows the timers to have any granularity supported by your operating system where `tokio-timer` can only support timers with a granularity of 1ms. In particular, the system timers usually support whatever granularity the underlying hardware supports (see \"High-resolution timers\" in [`time(7)`]), which on my laptop is 1ns!"
  },
  {
    "name": "miniz_oxide",
    "replacement": "adler2",
    "message": "(Due to limitations in the rust standard library simd-adler32 only has explicit SIMD implementations on stable rust for x86 platforms currently but this may change in the future. )  simd-adler32 requires std support (and it's 'std' feature to be enabled, which it is by default) for runtime feature detection to work though this does *not* require the 'std' feature in miniz_oxide to be enabled. The default setup uses the [adler2](https://crates. io/crates/adler2) crate which features no unsafe code. (a fork of the [adler](https://github. com/jonas-schievink/adler) crate as that crate is archived and no longer maintained. )  The 'serde' feature enables serialization of the decompressor struct, or a subset of it at block boundaries, allowing compression to be suspended and resumed. This is still an experimental feature that may be expanded in the future the format may still change. ## Usage Simple compression/decompression: ```rust  use miniz_oxide::deflate::compress_to_vec; use miniz_oxide::inflate::decompress_to_vec_with_limit;  fn roundtrip(data: &[u8]) {     // Compress the input     let compressed = compress_to_vec(data, 6);     // Decompress the compressed input and limit max output size to avoid going out of memory on large/malformed input. let decompressed = decompress_to_vec_with_limit(compressed. as_slice(), 60000)."
  },
  {
    "name": "rayon-futures",
    "replacement": "rayon-core",
    "message": "# Future integration into Rayon  This crate is now **deprecated**, because it only supports the obsolete `futures-0. 1`. New integration with `std::future::Future` will likely take place directly in `rayon-core`, but this is left to the . . . future."
  },
  {
    "name": "trust-dns-util",
    "replacement": "hickory-util",
    "message": "**NOTICE** This project has been rebranded to Hickory DNS and has been moved to the https://github. com/hickory-dns/hickory-dns organization and repo, this crate/binary has been moved to [hickory-util](https://crates. io/crates/hickory-util), from `0. 24` and onward. # Overview  Trust-DNS Util is a support library for the Trust-DNS libraries. ## resolve  Useful for testing trust-dns-resolver and it's features via an independent CLI  ```shell $ cargo install --bin resolve trust-dns-util ```  ### example  ```shell $ resolve www."
  },
  {
    "name": "sixtyfps-build",
    "replacement": "slint-build",
    "message": "## SixtyFPS was Renamed Slint  **Deprecated**  SixtyFPS was renamed [Slint](https://slint-ui. com). So you should use the [`slint-build`](https://lib. rs/slint-build) crate instead of this one. The source code of the original crate is still available on the history of the [Slint repository](https://github. com/slint-ui/slint) Version under < 0."
  },
  {
    "name": "sixtyfps",
    "replacement": "slint",
    "message": "## SixtyFPS was Renamed Slint  **Deprecated**  SixtyFPS was renamed [Slint](https://slint-ui. com). So you should use the [`slint`](https://lib. rs/slint) crate instead of this one. The source code of the original crate is still available on the history of the [Slint repository](https://github. com/slint-ui/slint) Version under < 0."
  },
  {
    "name": "adler2",
    "replacement": "adler",
    "message": "# Adler-32 checksums for Rust  This is a fork of the adler crate as the [original](https://github. com/jonas-schievink/adler) has been archived and is no longer updated by it's author  [! [crates. io](https://img. shields. io/crates/v/adler. svg)](https://crates."
  },
  {
    "name": "git-record",
    "replacement": "scm-record",
    "message": "# git-record  Supporting library for [git-branchless](https://github. com/arxanas/git-branchless). **Deprecation notice**: This library is no longer used. It was replaced by [`scm-record`](https://crates. io/crates/scm-record). Originally, this was a UI component to interactively select changes to include in a commit, meant to be embedded in source control tooling. - If you want a replacement for `git add -p`, in the style of `hg crecord`/`hg commit -i`, you can try the `git record` command from [git-branchless](https://github. com/arxanas/git-branchless)."
  },
  {
    "name": "sixtyfps-interpreter",
    "replacement": "slint-interpreter",
    "message": "## SixtyFPS was Renamed Slint  **Deprecated**  SixtyFPS was renamed [Slint](https://slint-ui. com). So you should use the [`slint-interpreter`](https://lib. rs/slint-interpreter) crate instead of this one. The source code of the original crate is still available on the history of the [Slint repository](https://github. com/slint-ui/slint) Version under < 0."
  },
  {
    "name": "stacktrace",
    "replacement": "error-chain",
    "message": "This project is deprecated. Consider looking at [error-chain](https://crates. io/crates/error-chain)."
  },
  {
    "name": "wincolor",
    "replacement": "winapi-util",
    "message": "DEPRECATED. Use winapi-util instead."
  },
  {
    "name": "safe_app",
    "replacement": "sn_client",
    "message": "# This crate has been superseded by sn_client https://crates. io/crates/sn_client"
  },
  {
    "name": "simple_hasher",
    "replacement": "Easy-Hasher",
    "message": "# simple_hasher\r Simple Rust hashing library\r \r **Alert**: this project has been moved to\r [Easy-Hasher](https://crates. io/crates/easy-hasher)"
  },
  {
    "name": "tempdir",
    "replacement": "tempfile",
    "message": "com/api/projects/status/2mp24396db5t4hul/branch/master? svg=true)](https://ci. appveyor. com/project/rust-lang-libs/tempdir/branch/master)  [Documentation](https://doc. rust-lang. org/tempdir)  ## Deprecation Note  The `tempdir` crate is being merged into [`tempfile`](https://github. com/Stebalien/tempfile). Please see [this issue](https://github. com/Stebalien/tempfile/issues/43) to track progress and direct new issues and pull requests to `tempfile`. ## Usage  Add this to your `Cargo. toml`:  ```toml [dependencies] tempdir = \"0."
  },
  {
    "name": "moonfire-ffmpeg",
    "replacement": "ffmpeg4",
    "message": "264 (likely also H. 265 eventually; and     eventually with hardware acceleration), converting its colorspace to RGB,     and downscaling it to feed to     [moonfire-tflite](https://github. com/scottlamb/moonfire-tflite). There's a much more full-featured [ffmpeg](https://crates. io/crates/ffmpeg) crate. A few reasons I use my own instead though:  *   the ffmpeg crate isn't actively maintained. (There are some forks though. Maybe [ffmpeg4](https://crates. io/crates/ffmpeg4) is what you're looking     for. ) *   building moonfire-ffmpeg doesn't need bindgen, which can be a pain to     install on some platforms. (See its     [requirements](https://rust-lang."
  },
  {
    "name": "talloc",
    "replacement": "Talc",
    "message": "# Talloc  ## Note: The project has been renamed to [Talc](https://github. com/SFBdragon/talc). The new crate is [here](https://crates. io/crates/talc). This version is unmaintained and I'm open to transferring the crate's ownership (contact me via the email address on my GitHub profile). ! [License](https://img. shields. io/crates/l/talloc? style=flat-square) !"
  },
  {
    "name": "termkan",
    "replacement": "simple-term-renderer",
    "message": "Deprecated, renamed to \"simple-term-renderer\"."
  },
  {
    "name": "sp-core-hashing-proc-macro",
    "replacement": "sp-crypto-hashing-proc-macro",
    "message": "Procedural macros for calculating static hashes (deprecated in favor of `sp-crypto-hashing-proc-macro`)."
  },
  {
    "name": "wowAddonManager",
    "replacement": "Crossterm",
    "message": "redox-os. org/redox-os/termion) for communicating with the TTY. Therefore, it only runs on Linux. In order to support Windows and macos, [Crossterm](https://github. com/crossterm-rs/crossterm) might be a better solution. If there is enough demand, I might consider switching to Crossterm. ## Installation  ### Binary  1. Download the latest [release](https://github. com/MR2011/wowAddonManager/releases) 2. Run `. /wowAddonManager`  ### Source  1."
  },
  {
    "name": "crc64-rs",
    "replacement": "crc64",
    "message": "DEPRECATED: Use crc64 instead"
  },
  {
    "name": "struct-merge",
    "replacement": "inter-struct",
    "message": "io/github/downloads/nukesor/struct-merge/total. svg)](https://github. com/nukesor/struct-merge/releases)   ## ! ! ! Deprecated ! ! ! This project is superseded by [inter-struct](https://github. com/Nukesor/inter-struct). Consider switching to that library, as this library won't get any updates."
  },
  {
    "name": "bliss-rs",
    "replacement": "bliss-audio",
    "message": "This crate is deprecated - use [bliss-audio](https://crates. io/crates/bliss-audio) instead."
  },
  {
    "name": "spinlock",
    "replacement": "spin",
    "message": "DEPRECATED! Use crate `spin` instead. A simple spinlock. It may contain data, is usable without std and there is a static initializer available."
  },
  {
    "name": "transit_model_collection",
    "replacement": "typed_index_collection",
    "message": "**⚠ This crate is not maintained anymore ⚠**  `transit_model_collection` =====  The functionality inside `transit_model_collection` has been moved into another crate [`typed_index_collection`]. `v0. 1. 4` is the last version of `transit_model_collection`. [`typed_index_collection`]: https://crates. io/crates/typed_index_collection"
  },
  {
    "name": "tauri-api",
    "replacement": "tauri",
    "message": "This crate was moved to the `tauri` crate"
  },
  {
    "name": "tzparse",
    "replacement": "libtzfile",
    "message": "io/crates/tzparse) [! [Downloads badge](https://img. shields. io/crates/d/tzparse. svg)](https://crates. io/crates/tzparse)  **PLEASE NOTE** This library is no longer maintained and has been merged with the [libtzfile library](https://crates. io/crates/libtzfile). This library's functions are used to retrieve transition times and date/time characteristics for a given TZ. Based on IANA database, system timezone files and [libtzfile library](https://crates. io/crates/libtzfile) that you should use instead. There are two functions:  `get_zoneinfo` parses the tzfile and returns a Tzinfo struct which provides useful and human-readable data about the timezone and can be converted to a json string with an optional feature."
  },
  {
    "name": "sdfgen",
    "replacement": "distance-field",
    "message": "# sdfgen  DO NOT USE IN PRODUCTION IF YOU ARE SANE. This package is not actively maintained and performs suboptimally to say the least. ### Alternatives - [distance-field](https://crates. io/crates/distance-field)  SDFGen generates a (preferably) lower resolution distance field from an input image. This distance field can be upscaled fast with bilinear filters built into gpus nowadays. Final sharp output of this upscale can be extracted using a threshold filter. With the default parameters in this program, threshold should be set to about 99%."
  },
  {
    "name": "lru-cache-macros",
    "replacement": "cache-macro",
    "message": "rs/lru-cache-macros [crates-image]: https://img. shields. io/crates/v/lru-cache-macros. svg [crates]: https://crates. io/crates/lru-cache-macros/  An attribute procedural macro to automatically cache the result of a function given a set of inputs. **This crate has been deprecated in favor of [cache-macro](https://crates. io/crates/cache-macro) which maintains the same functionality, but supports more than just lru caches. New code should use that crate instead. **  # Example:  ```rust use lru_cache_macros::lru_cache;  #[lru_cache(20)] fn fib(x: u32) -> u64 {     println! (\"{:? }\", x);     if x <= 1 {         1     } else {         fib(x - 1) + fib(x - 2)     } }  assert_eq!"
  },
  {
    "name": "ch32v-rt-macros",
    "replacement": "qingke-rt-macros",
    "message": "DEPRECATED: use qingke-rt-macros instead"
  },
  {
    "name": "ssdcg",
    "replacement": "ssd",
    "message": "DEPRECATED: Use the crate ssd instead."
  },
  {
    "name": "cache_remember",
    "replacement": "cacheapp",
    "message": "# CACHE REMEMBER: README. md\r **Deprecated Library Notice**\r \r ⚠️ **Attention**: This library is deprecated! ⚠️\r \r This is a friendly reminder that the library you are currently using has been marked as deprecated. We strongly recommend transitioning to the stable version of `cacheapp` instead. You can find the stable version at [https://github. com/JoelTorresAr/cacheapp. git](https://github."
  },
  {
    "name": "resvg-raqote",
    "replacement": "resvg",
    "message": "[DEPRECATED] use the resvg crate instead."
  },
  {
    "name": "jemallocator",
    "replacement": "tikv-jemallocator",
    "message": "[docs]][docs. rs]  This project is the successor of [jemallocator](https://github. com/gnzlbg/jemallocator). The project is also published as `jemallocator` for historical reasons. The two crates are the same except names. For new projects, it's recommended to use `tikv-xxx` versions instead. > Links against `jemalloc` and provides a `Jemalloc` unit type that implements > the allocator APIs and can be set as the `#[global_allocator]`  ## Overview  The `jemalloc` support ecosystem consists of the following crates:  * `tikv-jemalloc-sys`: builds and links against `jemalloc` exposing raw C bindings to it. * `tikv-jemallocator`: provides the `Jemalloc` type which implements the   `GlobalAlloc` and `Alloc` traits. * `tikv-jemalloc-ctl`: high-level wrapper over `jemalloc`'s control and introspection   APIs (the `mallctl*()` family of functions and the _MALLCTL NAMESPACE_)'  ## Documentation  * [Latest release (docs. rs)][docs. rs]  To use `tikv-jemallocator` add it as a dependency:  ```toml # Cargo."
  },
  {
    "name": "trust-dns-recursor",
    "replacement": "hickory-recursor",
    "message": "**NOTICE** This project has been rebranded to Hickory DNS and has been moved to the https://github. com/hickory-dns/hickory-dns organization and repo, this crate/binary has been moved to [hickory-recursor](https://crates. io/crates/hickory-recursor), from `0. 24` and onward. # Overview  Trust-DNS Recursor is a library which implements recursive resolution for DNS. This is currently experimental, test coverage is low and full scope of tests haven't been determined yet."
  },
  {
    "name": "ssvm_storage_interface",
    "replacement": "wasmedge_storage_interface",
    "message": "# Rust Storage Interface Library  # This Repository Is Deprecated This library has been renamed and moved to `wasmedge_storage_interface`. Please follow the resulting [new wasmedge_storage_interface](https://crates. io/crates/wasmedge_storage_interface) crate for further development. No further development will take place in this repository."
  },
  {
    "name": "nonymous-scoop",
    "replacement": "bore",
    "message": "DNS query tool (deprecated: use bore crate)"
  },
  {
    "name": "tinycom",
    "replacement": "com-rs",
    "message": "# tinycom-rs\r \r Tiny COM implements the tiny subset necessary to consume IUnknown interfaces, it does so in a platform independent way and with 0 dependencies, so shared libraries complying with COM can be loaded on other systems (like the Direct X shader compiler). ## Alternatives\r \r This crate covers a tiny area, other COM related crated might be more suitables depending on your use case\r \r * Windows only com support: https://github. com/microsoft/com-rs\r * Ability to write COM components in rust: https://github. com/Rantanen/intercom\r \r ## Credits\r \r This crate was originally developped by Lee Jeffery, and has been depracated since to be replaced by com-rs, the official microsoft COM bindings. We decided to revive the crate to serve our small use case and the idea is to not extend it's functionnality."
  },
  {
    "name": "substrate-subxt-client",
    "replacement": "subxt",
    "message": "# DEPRECATED  This crate has been deprecated. Visit https://crates. io/crates/subxt for the new version, or go to See https://github. com/paritytech/subxt for the latest updates and progress."
  },
  {
    "name": "stream-cipher",
    "replacement": "cipher",
    "message": "DEPRECATED: replaced by the `cipher` crate"
  },
  {
    "name": "smartnoise_runtime",
    "replacement": "OpenDP",
    "message": "**Notice**: SmartNoise-Core is deprecated. Please migrate to the OpenDP library: - [OpenDP Rust Crate](https://crates. io/crates/opendp) - [OpenDP GitHub Repo](https://github. com/opendp/opendp/)  ----------------------------------------------------  ## SmartNoise Core: Differential Privacy Library Runtime  This runtime is a sub-project of [SmartNoise-Core](https://github. com/opendp/smartnoise-core). See also the accompanying [SmartNoise SDK repository](https://github."
  },
  {
    "name": "zinc64",
    "replacement": "zinc64-emu",
    "message": "io/crates/v/zinc64. svg? maxAge=2592000)](https://crates. io/crates/zinc64)  ** **NOTE: zinc64 crate has been renamed to zinc64-emu** **  ## Overview  zinc64 is a Commodore 64 emulator toolkit \"with batteries included but swappable\". It is designed to be used as a standalone emulator or a library used to build new emulators. The design philosophy allows for each component to be swapped out and replaced by different implementation. Therefore, special considerations were made to model interactions between chips without coupling them together. It implements MOS 6510 CPU, MOS 6526 CIA, MOS 6581 SID, MOS 6567/6569 VIC chipset as well as various devices and peripherals available with C64. ### Story  zinc64 was started as an exercise to learn Rust and explore Commodore 64 hardware in more detail. Somewhere around mid 2016 I needed to feed my 8-bit nostalgia so I picked up a working Commodore 64 (physical version) and started to assemble various accessories required to get software onto it. Soon enough I had picked up a copy of C64 Programmer's Reference Guide and the rest is now history."
  },
  {
    "name": "stm32h7-ethernet",
    "replacement": "stm32h7xx-hal",
    "message": "### This crate has been replaced by [Ethernet support within stm32h7xx-hal](https://docs. rs/stm32h7xx-hal/latest/stm32h7xx_hal/ethernet/index. html). ### License  Licensed under either of  - Apache License, Version 2. 0 ([LICENSE-APACHE](LICENSE-APACHE) or http://www. apache."
  },
  {
    "name": "starts-ends-with-caseless",
    "replacement": "str-utils",
    "message": "Starts/Ends With Caseless ====================  [! [Build Status](https://travis-ci. org/magiclen/starts-ends-with-caseless. svg? branch=master)](https://travis-ci. org/magiclen/starts-ends-with-caseless)  This crate was deprecated, use [`str-utils`](https://crates. io/crates/str-utils) instead. ## Crates. io  https://crates. io/crates/starts-ends-with-caseless  ## Documentation  https://docs. rs/starts-ends-with-caseless  ## License  [MIT](LICENSE)"
  },
  {
    "name": "tiny_id",
    "replacement": "block-id",
    "message": "# `tiny_id`  **Tiny ID has been superseded by [`block-id`](https://github. com/drifting-in-space/block-id)**. `block-id` has better properties for use in a distributed setting, and is invertible. For new usages, I recommend using `block-id` over `tiny_id`. [! [GitHub Repo stars](https://img."
  },
  {
    "name": "sfl_parser",
    "replacement": "bmfont_parser",
    "message": "[Crates. io](https://img. shields. io/crates/v/sfl_parser. svg)](https://crates. io/crates/sfl_parser)\r \r ## sfl_parser has permanently moved to [`bmfont_parser`](https://github. com/teascade/bmfont_parser), as the name has grown inaccurate to the functionality of this crate\r \r A lightweight and easy-to-use . sfl file (bitmap font) parser made with Rust. ### How to use\r Documentation at [docs. rs][docs] or simply:\r \r 1. Add the following to your dependencies:  \r    ```toml\r    [dependencies]\r    sfl_parser=\"1."
  },
  {
    "name": "blissify-rs",
    "replacement": "blissify",
    "message": "This crate is deprecated - use [blissify](https://crates. io/crates/blissify) instead."
  },
  {
    "name": "noosphere-car",
    "replacement": "iroh-car",
    "message": "! [API Stability: Alpha](https://img. shields. io/badge/API%20Stability-Deprecated-red)  # Noosphere CAR  :warning: **noosphere-car** is **deprecated**. :warning: Please use [iroh-car](https://github. com/n0-computer/iroh-car). [CAR file](https://ipld. io/specs/transport/car/) support for Noosphere. \"CAR\" stands for Content Addressable aRchives."
  },
  {
    "name": "transit_model_relations",
    "replacement": "relational_types",
    "message": "**⚠ This crate is not maintained anymore ⚠**  `transit_model_relations` =====  The functionality inside `transit_model_relations` has been moved into another crate [`relational_types`]. `v0. 1. 2` is the last version of `transit_model_relations`. [`relational_types`]: https://crates. io/crates/relational_types"
  },
  {
    "name": "cargo-freeze",
    "replacement": "cargo-edit",
    "message": "cargo-freeze ============  # Important note  I started this because I wanted to freeze all dependencies in my projects' `Cargo. toml` manifests to match the version I'd compiled in the `Cargo. lock` lock files. While searching for existing cargo manifest libraries, I stumbled upon [cargo-edit][], which has an `cargo-upgrade` subcommand that accomplishes something similar, but instead of reading from the project's lock file, I queries [crates. io][] for the latest version. I'd suggest using it instead of mine. [cargo-edit]: https://github. com/killercup/cargo-edit [crates. io]: https://crates. io"
  },
  {
    "name": "shuttle-metadata",
    "replacement": "shuttle-runtime",
    "message": "# Shuttle Metadata  This plugin has been moved to [shuttle-runtime](https://crates. io/crates/shuttle-runtime)."
  },
  {
    "name": "waxosuit-guest",
    "replacement": "wascc-actor",
    "message": "Deprecated in factor of the wascc-actor crate"
  },
  {
    "name": "winrt",
    "replacement": "windows",
    "message": "## Rust for Windows  The `winrt` crate is deprecated. Its capabilities are now part of the [windows](https://crates. io/crates/windows) crate that lets you call any Windows API, not just those based on WinRT. Crate: https://crates. io/crates/windows  Repo: https://github. com/microsoft/windows-rs"
  },
  {
    "name": "trust-dns-client",
    "replacement": "hickory-client",
    "message": "**NOTICE** This project has been rebranded to Hickory DNS and has been moved to the https://github. com/hickory-dns/hickory-dns organization and repo, this crate/binary has been moved to [hickory-client](https://crates. io/crates/hickory-client), from `0. 24` and onward. # Overview  Trust-DNS is a library which implements the DNS protocol and client side functions. This library contains basic implementations for DNS record serialization, and communication."
  },
  {
    "name": "unpak",
    "replacement": "repak",
    "message": "# unpak is now deprecated! use the [repak](https://github. com/trumank/repak) fork for oodle support and writing\r \r # unpak [! [](https://img. shields. io/crates/v/unpak?"
  },
  {
    "name": "cargo-inkanim",
    "replacement": "inkanim",
    "message": "This crate has been yanked for unproperly using a `cargo-*` name: it has been moved to https://crates. io/crates/inkanim"
  },
  {
    "name": "spinny",
    "replacement": "spin",
    "message": "# spinny  ## This crate is now deprecated in favor of [`spin`](https://crates. io/crates/spin), which is now maintained again. [! [Build Status](https://dev. azure. com/jtnunley01/Beetle/_apis/build/status/not-a-seagull."
  },
  {
    "name": "cosmos_sdk",
    "replacement": "cosmrs",
    "message": "DEPRECATED: please switch to the `cosmrs` crate"
  },
  {
    "name": "trust-dns-rustls",
    "replacement": "trust-dns-proto",
    "message": "# Overview  *NOTICE* this crate has been deprecated, instead please see `trust-dns-proto` with the `dns-over-rustls` feature  Trust-DNS Rustls is a library which implements the DNS over TLS protocol and client side functions. This library allows for TLS connections to be established to remote DNS servers. It can replace the standard `ClientConnection` in the Trust-DNS library. This uses the rustls TLS library for all TLS communications. ## Minimum Rust Version  The current minimum rustc version for this project is `1. 54`  ## Versioning  Trust-DNS does it's best job to follow semver."
  },
  {
    "name": "sticker2",
    "replacement": "SyntaxDot",
    "message": "Neural sequence labeler, superseded by SyntaxDot"
  },
  {
    "name": "tauri-winit",
    "replacement": "web-sys",
    "message": "id() => *control_flow = ControlFlow::Exit,             _ => (),         }     }); } ```  Winit is only officially supported on the latest stable version of the Rust compiler. ### Cargo Features  Winit provides the following features, which can be enabled in your `Cargo. toml` file: * `serde`: Enables serialization/deserialization of certain types with [Serde](https://crates. io/crates/serde). * `x11` (enabled by default): On Unix platform, compiles with the X11 backend * `wayland` (enabled by default): On Unix platform, compiles with the Wayland backend  ### Platform-specific usage  #### WebAssembly  Winit supports compiling to the `wasm32-unknown-unknown` target with either a `stdweb` or a `web-sys` backend for use on web browsers. However, please note that **the `stdweb` backend is being deprecated and may be removed in a future release of Winit**. The `web-sys` backend is also more feature complete. On the web platform, a Winit window is backed by a `<canvas>` element. You can either [provide Winit with a `<canvas>` element][web with_canvas], or [let Winit create a `<canvas>` element which you can then retrieve][web canvas getter] and insert it into the DOM yourself. For example code using Winit with WebAssembly, check out the [web example]. For information on using Rust on WebAssembly, check out the [Rust and WebAssembly book]."
  },
  {
    "name": "sn_routing",
    "replacement": "safe_network",
    "message": "## **PLEASE NOTE THAT THIS REPOSITORY HAS NOW BEEN ARCHIVED** ### All routing development is now via the [safe_network](https://github. com/maidsafe/safe_network) repository  #  # sn_routing  sn_routing - a specialised storage DHT  |Crate|LoC| |:---:|:--:| |[! [](http://meritbadge. herokuapp. com/sn_routing)](https://crates. io/crates/sn_routing)|[!"
  },
  {
    "name": "sync-resolve",
    "replacement": "resolve",
    "message": "# sync-resolve  This is a minimal fork of [`resolve`], which is no longer maintained. Most users should probably prefer to use one of the asynchronous resolver crates, some of which also provide synchronous API options, both for performance and for being more maintained. `sync-resolve` is a pure Rust implementation of the DNS protocol. It also provides high level facilities for hostname resolution and address reverse resolution. [`resolve`]: https://github. com/murarth/resolve"
  },
  {
    "name": "wasm-run",
    "replacement": "xtask-wasm",
    "message": "**This repository is now deprecated in favor of [xtask-wasm](https://github. com/rustminded/xtask-wasm). Only patch fixes will be accepted. **  # wasm-run  ! [Rust](https://github. com/IMI-eRnD-Be/wasm-run/workflows/main/badge."
  },
  {
    "name": "very_simple_2d",
    "replacement": "egaku2d",
    "message": "## Overview  This library is now obsolete and is replaced by egaku2d https://crates. io/crates/egaku2d"
  },
  {
    "name": "wasmer-runtime",
    "replacement": "wasmer",
    "message": "`wasmer-runtime` has been deprecated! Use `wasmer` instead. Links: https://crates. io/crates/wasmer https://wasmer. io https://github. com/wasmerio/wasmer"
  },
  {
    "name": "fluvio-smartstream",
    "replacement": "fluvio-smartmodule",
    "message": "This crate has been deprecated. Please update your code to use the [`fluvio-smartmodule`](https://crates. io/crates/fluvio-smartmodule) crate instead"
  },
  {
    "name": "xsalsa20poly1305",
    "replacement": "crypto_secretbox",
    "message": "DEPRECATED: please use the `crypto_secretbox` crate"
  },
  {
    "name": "cemu-smm",
    "replacement": "smmdb",
    "message": "moved to [smmdb](https://crates. io/crates/smmdb)"
  },
  {
    "name": "ramp-maker",
    "replacement": "stepgen",
    "message": "If you're looking for an alternative to this library, you might like [stepgen]. ## Status  RampMaker is under active development. Its API is going to change, as more features are added and existing ones are improved. The library is usable, but far from mature. Please open an issue on the GitHub repository, if you find any limitations. RampMaker is maintained by [@hannobraun]. ## Usage  RampMaker is a library written in Rust and designed for use in Rust projects. It will run on any platform supported by Rust, including microcontrollers. Add Step/Dir to your `Cargo. toml` like this:  ``` toml [dependencies. ramp-maker] version = \"0."
  },
  {
    "name": "stm32h7-fmc",
    "replacement": "stm32h7xx-hal",
    "message": "## This crate has been replaced by [FMC support within stm32h7xx-hal](https://docs. rs/stm32h7xx-hal/latest/stm32h7xx_hal/fmc/index. html)  ----  ### License  Licensed under either of   * Apache License, Version 2. 0    ([LICENSE-APACHE](LICENSE-APACHE) or http://www. apache. org/licenses/LICENSE-2."
  },
  {
    "name": "trust-dns-resolver",
    "replacement": "hickory-resolver",
    "message": "**NOTICE** This project has been rebranded to Hickory DNS and has been moved to the https://github. com/hickory-dns/hickory-dns organization and repo, this crate/binary has been moved to [hickory-resolver](https://crates. io/crates/hickory-resolver), from `0. 24` and onward. # Overview  Trust-DNS Resolver is a library which implements the DNS resolver using the Trust-DNS Proto library. This library contains implementations for IPv4 (A) and IPv6 (AAAA) resolution, more features are in the works."
  },
  {
    "name": "spirv-types",
    "replacement": "spirv-std-types",
    "message": "# DEPRECATED  This create has been renamed to `spirv-std-types` as of `0. 4. 0-alpha. 14`. Please update your dependencies accordingly."
  },
  {
    "name": "sticker2-utils",
    "replacement": "SyntaxDot",
    "message": "Neural sequence labeler, superseded by SyntaxDot"
  },
  {
    "name": "tugger-debian",
    "replacement": "debian-packaging",
    "message": "# tugger-debian  This crate is deprecated following the effective renaming of this crate to `debian-packaging` in December 2021. Version 0. 7. 0 was the last non-deprecated release and 0. 7. 1 is the last planned release of the crate under the `tugger-debian` name."
  },
  {
    "name": "faststd",
    "replacement": "fstd",
    "message": "Moved to `fstd`(https://crates. io/crates/fstd)."
  },
  {
    "name": "yabf",
    "replacement": "vob",
    "message": "rs/crate/yabf/0. 3. 0) ! [license](https://img. shields. io/crates/l/yabf)  # This crate is deprecated This crate can be replaced with [vob](https://crates. io/crates/vob) if you add this trait to your code:  ```rust // u32 is slightly faster for random access w/o any bit operations pub(crate) type VobU32 = vob::Vob<u32>;  pub(crate) trait GrowingVob {     /// Will create a new Vob and fill it with `default`     fn fill(initial_size: usize, default:bool) -> VobU32;     /// Grow to fit new size, set ´bit´ to ´state´ value     fn set_grow(&mut self, bit: usize, state: bool) -> bool;     /// get() with default value `false`     fn get_f(&self, bit: usize) -> bool; }  impl GrowingVob for VobU32 {     #[inline]     fn fill(initial_size: usize, default:bool) -> Self {         let mut v = Self::new_with_storage_type(0);         v. resize(initial_size, default);         v     }      #[inline]     fn set_grow(&mut self, bit: usize, state: bool) -> bool {         if bit >= self. len() {             self. resize(bit + 64, false);         }         self. set(bit, state)     }      #[inline]     fn get_f(&self, bit: usize) -> bool {         self."
  },
  {
    "name": "llvm-sys-featured",
    "replacement": "llvm-sys",
    "message": "# This crate is now deprecated  Originally, this crate was created as one solution to the problem of using Cargo features to select an LLVM version for use with `llvm-sys`, which wasn't possible at the time. Since then, thanks to changes in `llvm-sys` (see [this `llvm-sys` GitLab issue](https://gitlab. com/taricorp/llvm-sys. rs/-/issues/8)), it is now possible to achieve the same goal much more simply, using Cargo's [dependency renaming] feature. For instance, as of this writing, [`llvm-ir`] uses the following in its Cargo. toml: ```toml [dependencies] llvm-sys-80 = { package = \"llvm-sys\", version = \"80."
  },
  {
    "name": "bunbun-worker",
    "replacement": "tonic",
    "message": "<center> <h1> BunBun-Worker </h1> </center> # Introduction  `bunbun-worker` is a bare-bone simple multithreaded worker & client library. The creator of this crate recommends against using this library in production as it's a rather a proof of concept. If you intend to use RPC, I highly recommend using a crate like [tonic](https://crates. io/crates/tonic). ### Rpc  Remote procedure call, as it's name says is a message that can be sent to a remote microservice to be processed and the result to be returned. In `bunbun-worker` it's implemented by the following example:  ```mermaid sequenceDiagram     ServiceA->>+ServiceB: Hey, could you do this job for me? Note right of ServiceB: ServiceB does the job     ServiceB->>+ServiceA: Sure, here is the data result ```  1. ServiceA creates a callback queue that the response shall be sent to."
  },
  {
    "name": "trickster",
    "replacement": "tr",
    "message": "# trickster    <sub> user-friendly linux memory hacking library written in Rust. </sub>    This project is continuation of *(from now)* abandoned [tr](https://github. com/neg4n/tr)   library with the same purpose but written in C++17. ```toml [dependencies] trickster = \"0. 0. 5\" ```  # Usage and documentation  For example usage of the library, refer to `examples/` directory on this repository. [Documentation](https://docs."
  },
  {
    "name": "yew-state",
    "replacement": "Yewdux",
    "message": "No longer maintained. Please use Yewdux instead."
  },
  {
    "name": "substrate-subxt-proc-macro",
    "replacement": "subxt-macro",
    "message": "Deprecated: crate renamed to subxt-macro."
  },
  {
    "name": "smtp",
    "replacement": "lettre",
    "message": "UNMAINTAINED - Replaced by the 'lettre' crate"
  },
  {
    "name": "switchboard-v2",
    "replacement": "switchboard-solana",
    "message": "6/12/2023 - Deprecated in favor of the `switchboard-solana` crate. <div align=\"center\">  ! [Switchboard Logo](https://github. com/switchboard-xyz/sbv2-core/raw/main/website/static/img/icons/switchboard/avatar. png)  # switchboard-v2  > A Rust library to interact with Switchboard accounts on Solana. [!"
  },
  {
    "name": "substrate-subxt",
    "replacement": "subxt",
    "message": "Deprecated: crate renamed to subxt."
  },
  {
    "name": "trust-dns",
    "replacement": "hickory-dns",
    "message": "**NOTICE** This project has been rebranded to Hickory DNS and has been moved to the https://github. com/hickory-dns/hickory-dns organization and repo, this crate/binary has been moved to [hickory-dns](https://crates. io/crates/hickory-dns), from `0. 24`  # Overview  Trust-DNS provides a binary for hosting or forwarding DNS zones. This a named implementation for DNS zone hosting. It is capable of performing signing all records in the zone for server DNSSEC RRSIG records associated with all records in a zone."
  },
  {
    "name": "sn_data_types",
    "replacement": "safe_network",
    "message": "## **PLEASE NOTE THAT THIS REPOSITORY HAS NOW BEEN ARCHIVED** ### All data types development is now via the [safe_network](https://github. com/maidsafe/safe_network) repository  #  # sn_data_types Safe Network Data Types  |Crate|Documentation|CI|Safe Rust| |:-:|:-:|:-:|:-:| |[! [](http://meritbadge. herokuapp. com/sn_data_types)](https://crates. io/crates/sn_data_types)|[!"
  },
  {
    "name": "switchboard-aggregator",
    "replacement": "switchboard-v2",
    "message": "# switchboard-aggregator  A Rust library to interact with Switchboard V2's hosted data feeds. Deprecated - Please use [switchboard-v2](https://crates. io/crates/switchboard-v2)"
  },
  {
    "name": "st7789",
    "replacement": "mipidsi",
    "message": "katona. me/ferris_fast. png)](http://objdump. katona. me/ferris_fast. mp4)  ## **Deprecation warning**  `v0. 7` of this crate is the last release. [mipidsi](https://github. com/almindor/mipidsi) is a new generic driver that contains ST7789 support and should serve as a drop in replacement for this driver. ## Features  These features are enabled by default:  * `graphics` - embedded-graphics support: pulls in [embedded-graphics](https://crates. io/crates/embedded-graphics) dependency * `batch` - batch-drawing optimization: pulls in [heapless](https://crates."
  },
  {
    "name": "stivale",
    "replacement": "stivale-boot",
    "message": "# DEPRECATED You are probably looking for [stivale-boot](https://crates. io/crates/stivale-boot), a more up-to-date and maintained crate  # Stivale. rs [! [Crates. io](https://img. shields."
  },
  {
    "name": "hpn-client",
    "replacement": "hpnc",
    "message": "Deprecated. See crate hpnc."
  },
  {
    "name": "wascc-codec",
    "replacement": "wasmcloud-provider-core",
    "message": "# waSCC Codec  This crate is now deprecated. A new version of this crate that is used for providing a standard set of traits and functionality for wasmCloud capability providers can be found in the [wasmcloud-provider-core](https://crates. io/crates/wasmcloud-provider-core)."
  },
  {
    "name": "tp-note",
    "replacement": "tpnote",
    "message": "This crate has moved to `tpnote`"
  },
  {
    "name": "trust-dns-server",
    "replacement": "hickory-server",
    "message": "**NOTICE** This project has been rebranded to Hickory DNS and has been moved to the https://github. com/hickory-dns/hickory-dns organization and repo, this crate/binary has been moved to [hickory-server](https://crates. io/crates/hickory-server), from `0. 24` and onward. # Overview  Trust-DNS Server is a library which implements the zone authoritory functionality. This library contains basic implementations for DNS zone hosting."
  },
  {
    "name": "jwt-compact-preview",
    "replacement": "jwt-simple",
    "message": "# Compact JWT implementation in Rust [archived]  Superseded by [jwt-simple](http://docs. rs/jwt-simple)."
  },
  {
    "name": "puroro-protobuf-compiled",
    "replacement": "puroro",
    "message": "Deprecated, integrated into puroro: A compiled Google Protocol Buffer's interface proto. Normal user don't need to use this crate directly."
  },
  {
    "name": "tokio-core",
    "replacement": "Tokio",
    "message": "# Deprecation notice. This crate is deprecated in favor of [Tokio](http://github. com/tokio-rs/tokio). # tokio-core  Core I/O and event loop abstraction for asynchronous I/O in Rust built on `futures` and `mio`. [! [Build Status](https://travis-ci."
  },
  {
    "name": "slow_primes",
    "replacement": "primal",
    "message": "Deprecated in favour of `primal`. A library to generate, identify and handle prime numbers and related properties. This library includes slow enumeration of primes up to a bound, slow factorisation of arbitrary numbers, fast primality tests and state-of-the-art estimation of upper and lower bounds for π(n) (the number of primes below n) and p_k (the k-th prime)."
  },
  {
    "name": "sounding-base",
    "replacement": "sounding-analysis",
    "message": "svg)](https://crates. io/crates/sounding-base) [! [docs](https://docs. rs/sounding-base/badge. svg)](https://docs. rs/sounding-base)  This crate is deprecated as a whole and the functionality has been moved into the [sounding-analysis](https://github. com/rnleach/sounding-analysis) crate. The reasoning for the move was that the two crates are almost never used separately, and a change in this crate that required a version bump would then require a bump in the version of all the crates that depend on it. It became quite a chore to maintain related crates. # sounding-base  ## Related crates * [sounding-analysis](https://github. com/rnleach/sounding-analysis) * [sounding-bufkit](https://github."
  },
  {
    "name": "flat-rs",
    "replacement": "pallas",
    "message": "# Flat (archive)  > [! NOTE]   > This is archived and has been moved to [pallas](https://github. com/txpipe/pallas). A Rust port of the [Haskell reference implementation](https://github. com/Quid2/flat)."
  },
  {
    "name": "directories-next",
    "replacement": "dirs-next",
    "message": "svg)](https://crates. io/crates/directories-next) [! [API documentation](https://docs. rs/directories-next/badge. svg)](https://docs. rs/directories-next/)  # `directories-next`  **NOTE**: This crate is a fork of once-abandoned `directories` crate. There is a low-level sister library, [dirs-next]. ## Introduction  - a tiny mid-level library with a minimal API - that provides the platform-specific, user-accessible locations - for retrieving and storing configuration, cache and other data - on Linux, Redox, Windows (≥ Vista), macOS and other platforms. The library provides the location of these directories by leveraging the mechanisms defined by - the [XDG base directory](https://standards. freedesktop. org/basedir-spec/basedir-spec-latest."
  },
  {
    "name": "signatory-dalek",
    "replacement": "ed25519-dalek",
    "message": "signatory-dalek is deprecated! Use ed25519-dalek directly instead. ed25519-dalek natively supports the traits used in Signatory. See: https://docs. rs/ed25519/ for more information."
  },
  {
    "name": "safe_authenticator",
    "replacement": "sn_client",
    "message": "# This crate has been superseded by sn_client https://crates. io/crates/sn_client"
  },
  {
    "name": "url-crawler",
    "replacement": "crusty",
    "message": "# Deprecated  Use [crusty](https://crates. io/crates/crusty) instead."
  },
  {
    "name": "ripemd256",
    "replacement": "ripemd",
    "message": "Deprecated. Use the ripemd crate instead."
  },
  {
    "name": "spawn-editor",
    "replacement": "edit",
    "message": "# spawn-editor  ## deprecated This crate is deprecated in favor of the [`edit`](https://docs. rs/edit) crate."
  },
  {
    "name": "tokio-timer-patched",
    "replacement": "tokio",
    "message": "# Notice  This is a patched fork of the original tokio-timer crate to handle [issue 36](https://github. com/tokio-rs/tokio-timer/issues/36). It has been pushed to crates. io so that it can be used in other open source crates. No further development is expected. # Development has moved  This repository is scheduled for deprecation in favor of [tokio](http://github. com/tokio-rs/tokio). Development is continuing over there. This repository will be kept around for historical reasons. # tokio-timer  Timer facilities for Tokio  [! [Build Status](https://travis-ci."
  },
  {
    "name": "colors-transform",
    "replacement": "colorsys",
    "message": "io](https://img. shields. io/crates/v/colors_transform. svg)](https://crates. io/crates/colors-transform/)  A module for color conversion and mutation written in Rust. ### Deprecated! Use `colorsys` package instead. [Online documentation](https://docs. rs/colors-transform/0. 2. 11/colors_transform/)  For now you can work with four color representation options: Rgb (Rgba), Hsl (Hsla)."
  },
  {
    "name": "col_macros",
    "replacement": "col_proc_macros",
    "message": "Deprecated in favor of [col_proc_macros]. [col_proc_macros]: https://crates. io/crates/col_proc_macros"
  },
  {
    "name": "heatmap",
    "replacement": "histogram",
    "message": "Deprecated. Use histogram crate directly"
  },
  {
    "name": "veeks_millis",
    "replacement": "varweeks_millis",
    "message": "# DEPRECATED, OBSOLETE\r \r The new library is called varweeks_millis."
  },
  {
    "name": "festive",
    "replacement": "process_control",
    "message": "# Festivities  This is a stripped down rusty_fork meant to be easily auditable. Most of the business has been replaced with process_control."
  },
  {
    "name": "rugint",
    "replacement": "rug",
    "message": "Replaced by rug: arbitrary-precision integers, rational, floating-point and complex numbers"
  },
  {
    "name": "rustodoist_rest2",
    "replacement": "todoist-v2-rest",
    "message": "A wrapper for the Todoist REST v2 API. IMPORTANT: Crate moved to todoist-v2-rest. Currently a work in progress; all project and task actions the REST API allows are implemented,\r but sections, comments, and labels are not. I expect everything to be fully implemented within a week or two. See https://developer. todoist. com/rest/v2/ for more information on the Todoist REST API, or\r https://docs."
  },
  {
    "name": "redo",
    "replacement": "undo",
    "message": "# redo  *Deprecated: Use the [undo](https://crates. io/crates/undo) crate instead. *  [! [Travis](https://travis-ci. com/evenorog/redo. svg?"
  },
  {
    "name": "pyxel-extension",
    "replacement": "pyxel-wrapper",
    "message": "DEPRECATED: This crate has been renamed to pyxel-wrapper."
  },
  {
    "name": "rsincron",
    "replacement": "incron",
    "message": "Rust rewrite of the incredibly useful but abandoned incron software"
  },
  {
    "name": "rc_slice",
    "replacement": "rc-slice2",
    "message": "This is a deprecated, unmaintained Rust library providing reference-counted slice types. If you're looking for a maintained library with similar functionality, you could try [rc-slice2](https://crates. io/crates/rc-slice2), which is a fork of this codebase with a new maintainer. I have not reviewed the fork and cannot vouch for it personally, so you should evaluate it like you would any new dependency."
  },
  {
    "name": "drogue-tls",
    "replacement": "embedded-tls",
    "message": "org)  Drogue-TLS is a Rust-native TLS 1. 3 implementation that works in a no-std environment. The implementation is work in progress, but the [example clients](https://github. com/drogue-iot/drogue-tls/tree/main/examples) should work against the [rustls](https://github. com/ctz/rustls) echo server. NOTE: This crate has been replaced by [embedded-tls](https://crates. io/crates/embedded-tls)."
  },
  {
    "name": "cargo-sort-ck",
    "replacement": "cargo-sort",
    "message": "# Cargo Sort Check  This has been deprecated in favor of `cargo-sort`  The new crate can be found https://crates. io/crates/cargo-sort or https://github. com/DevinR528/cargo-sort"
  },
  {
    "name": "capnp-nonblock",
    "replacement": "capnp-futures",
    "message": "rs/capnp-nonblock)  [! [Status](https://travis-ci. org/danburkert/capnp-nonblock. svg? branch=master)](https://travis-ci. org/danburkert/capnp-nonblock)  ## Deprecated  This crate is effectively retired; it hails from a time before [futures](https://crates. io/crates/futures), [Tokio](https://tokio. rs/) and [capnp-futures](https://crates. io/crates/capnp-futures). Existing projects utilizing this crate are encouraged to move to `capnp-futures`. Bug-fix pull requests are accepted, but no new features will be released."
  },
  {
    "name": "puroro-plugin",
    "replacement": "puroro-codegen",
    "message": "Deprecated, integrated into puroro-codegen. Google Protocol Buffer's compiler plugin implementation for puroro"
  },
  {
    "name": "ruma-identifiers-macros",
    "replacement": "ruma-macros",
    "message": "Deprecated: crate merged into ruma-macros"
  },
  {
    "name": "awslc",
    "replacement": "aws-lc-sys",
    "message": "Please use aws-lc-sys: https://crates. io/crates/aws-lc-sys. AWS-LC is a general-purpose cryptographic library maintained by the AWS Cryptography team for AWS and their customers. It іs based on code from the Google BoringSSL project and the OpenSSL project."
  },
  {
    "name": "iconv-sys",
    "replacement": "libc",
    "message": "! [maintenance: deprecated](https://img. shields. io/badge/maintenance-deprecated-red. svg)  Use [libc](https://crates. io/crates/libc) instead. # iconv-sys  Raw FFI bindings to `iconv` functions."
  },
  {
    "name": "realsense-sys",
    "replacement": "realsense-rust",
    "message": "As a result you end up needing to understand librealsense2 in C, C++, and Rust in order to utilize the realsense-sys library safely and effectively. If you do find yourself looking for an entry point into the librealsense2 C-API, we highly suggest starting at [this file](https://github. com/IntelRealSense/librealsense/blob/master/src/rs. cpp) and working your way out via each type. If this seems like a lot of effor to you (it truly is! ), we highly suggest using the realsense-rust wrapper, which attempts to abstract over these and provide a high-level, Rust-native API that avoids unsafe code. # License  Apache 2. 0. See [LICENSE](LICENSE) file."
  },
  {
    "name": "udp_traffic_generator",
    "replacement": "crab-net",
    "message": "# DEPRECATION NOTICE  Switch to [crab-net](https://github. com/newfla/crab-net) with <TCP|UDP> + TLS support. # Rust UDP Traffic Generator  A CLI tool to generate UDP and DTLS traffic based on [Tokio framework](https://https://tokio. rs). # Cargo Install  ``` cargo install udp_traffic_generator ```  # Help  ``` . /udp_traffic_generator --help Simple stress test for UDP Server  Usage: udp_traffic_generator [OPTIONS] --destination <addr>  Options:   -d, --destination <addr>     Server address as IP:PORT   -c, --connections <clients>  Number of clients to simulate [default: 1]   -l, --length <length>        Payload size as bytes [default: 16]   -r, --rate <rate>            Defined as packets/sec [default: 1]   -p, --port <port>            Starting source port for clients [default: 8000]   -w, --workers <workers>      Number of worker threads for the Tokio runtime [default: #CPU core]   -s, --timeout <timeout>      Timeout between consecutive connections spawn as ms [default: 50]       --dtls <dtls>            Send data over DTLS [default: false] [possible values: true, false]       --ca <ca>                PEM File to validate server credentials   -h, --help                   Print help   -V, --version                Print version"
  },
  {
    "name": "rulex",
    "replacement": "pomsky",
    "message": "DEPRECATED: Use pomsky instead. A new regular expression language"
  },
  {
    "name": "elrond-wasm-module-users",
    "replacement": "elrond-wasm-modules",
    "message": "# [DEPRECATED] Elrond smart contract module for managing a list of users  The module was moved to crate `elrond-wasm-modules`, together with all documentation."
  },
  {
    "name": "pwasm-utils-cli",
    "replacement": "pwasm-utils",
    "message": "# pwasm-utils-cli  This package is **deprecated**. The cli binaries are now included in `pwasm-utils`. [Go to pwasm-utils](https://crates. io/crates/pwasm-utils)"
  },
  {
    "name": "sandkiste",
    "replacement": "From",
    "message": "The `try_into_` and       `try_as_` methods (e. g. `try_into_string`) in the `types` module       return `TypeMismatch` as error type now, which is       `Send + Sync + 'static`. * 2023-03-20: Version 0. 1. 0     * Removed deprecated `MaybeFunction::from_function` (use `From` instead)     * Documented that `Nullable` types should also implement `From<Option<T>>`       where `T: Into<Self>` * 2022-11-26: Version 0. 0. 5     * Further changes to `MaybeFunction` and `MaybeOpaque` traits         * Added `Borrow` as supertrait to `MaybeFunction::FunctionRef` and           `MaybeOpaque::OpaqueRef`         * Added `TryInto` as supertrait to `MaybeOpaque` and added methods           `MaybeOpaque::try_into_opaque` and `MaybeOpaque::is_opaque` with           default implementations * 2022-11-25: Version 0. 0. 4     * Added `From<Self::Function>` as supertrait to `MaybeFunction`     * Deprecated method `MaybeFunction::from_function` in favor of using the       `From` trait     * Minor documentation fix * 2022-11-24: Version 0. 0."
  },
  {
    "name": "rand_os",
    "replacement": "rand_core",
    "message": "shields. io/badge/rustc-1. 32+-lightgray. svg)](https://github. com/rust-random/rand#rust-version-requirements)  A random number generator that retrieves randomness straight from the operating system. **This crate is deprecated:** `OsRng` is available in `rand_core` since version 0. 5. 1. This crate provides `OsRng` as a shim around [getrandom](https://crates. io/crates/getrandom) implementing `RngCore` from [rand_core](https://crates. io/crates/rand_core)."
  },
  {
    "name": "cargo-wheel",
    "replacement": "maturin",
    "message": "# cargo-wheel  ## About  Use milksnake and cbindgen to generate python binding to your Rust crate. **Deprecated**  milksnake has not seen many updates in the last year and seems to have been replaced by maturin. I would not recommend using this crate anymore. ## Quick start  Edit your `Cargo. toml` and set the crate type to `cdylib`  ```toml [lib] crate-type = [\"cdylib\"] ```  Export functions or datastructures in your library to make them visible to `C`. ```rust #[no_mangle] pub extern fn greet() {     println! (\"Hello from Rust\"); } ```  Call `cargo wheel` to invoke cbindgen and set up a python package."
  },
  {
    "name": "emocli",
    "replacement": "gmocli",
    "message": "This crate has been moved to resolve a naming conflict with a similar project. See gmocli here: https://github. com/duhdugg/gmocli/"
  },
  {
    "name": "evcxr_repl",
    "replacement": "rusti",
    "message": "For many uses this is fine and has the advantage   that you can have variables reference other variables. * [cargo-eval](https://github. com/reitermarkus/cargo-eval) Not interactive, but it gives you a quick   way to evaluate Rust code from the command line and/or scripts. * [rusti](https://github. com/murarth/rusti). Deprecated since 2019. Also, rusti requires a nightly   compiler from 2016 and doesn't appear to persist variable values. * [Papyrus](https://github. com/kurtlawrence/papyrus). Looks like it's no longer maintained."
  },
  {
    "name": "rocket-etagged-file-response",
    "replacement": "rocket-etagged-raw-response",
    "message": "Etagged File Response for Rocket Framework ====================  This crate was deprecated, use `rocket-etagged-raw-response` instead. https://crates. io/crates/rocket-etagged-raw-response  ## License  [MIT](LICENSE)"
  },
  {
    "name": "rustc-serialize2",
    "replacement": "serde",
    "message": "Generic serialization/deserialization support corresponding to the `derive(RustcEncodable, RustcDecodable)` mode in the compiler. Also includes support for hex, base64, and json encoding and decoding. This crate is deprecated in favor of serde. Compared to the original rustc-serialize, this crate: * Supports all `rustc` targets. * Can work in `no_std` environments with the `alloc` crate."
  },
  {
    "name": "geozero-core",
    "replacement": "GeoZero",
    "message": "# GeoZero Core  Deprecated! `geozero-core` is now included in [GeoZero](https://crates. io/crates/geozero)."
  },
  {
    "name": "ruma-serde-macros",
    "replacement": "ruma-macros",
    "message": "Deprecated: crate merged into ruma-macros"
  },
  {
    "name": "yaxp-common",
    "replacement": "yaxp-core",
    "message": "com/opensourceworks-org/yaxp/blob/main/crates/yaxp-common/README. md\">     <img alt=\"pipelines\" src=\"https://img. shields. io/github/actions/workflow/status/opensourceworks-org/yaxp/yaxp-common-ci. yml? logo=github\">   </a> </p>  # **<yaxp ⚡> Yet Another XSD Parser**  > ⚠️ **Deprecated:** This crate has been replaced with [yaxp-core](https://crates. io/crates/yaxp-core). ## Introduction Using [roxmltree](https://github. com/RazrFalcon/roxmltree) to parse XML files. Converts xsd schema to: - [x] arrow - [x] avro - [x] duckdb (read_csv columns/types) - [x] json - [x] json representation of spark schema - [x] jsonschema - [x] polars - [ ] protobuf    ## TODO  - [x] Add pyo3/maturin support (crate pyaxp) - [ ] Add more tests"
  },
  {
    "name": "reql-derive",
    "replacement": "reql-macros",
    "message": "DEPRECATED: use reql-macros"
  },
  {
    "name": "pimalaya-keyring",
    "replacement": "keyring-lib",
    "message": "**This crate is no longer maintained**, because it has been renamed [keyring-lib](https://crates. io/crates/keyring-lib). https://git. sr. ht/~soywod/pimalaya"
  },
  {
    "name": "rugrat",
    "replacement": "rug",
    "message": "Replaced by rug: arbitrary-precision integers, rational, floating-point and complex numbers"
  },
  {
    "name": "rawmv",
    "replacement": "coreutils",
    "message": "# rawmv  **This project is archived now. coreutils >= 9. 2 already covers this functionality with `mv --no-copy`. **  mv(1) but without cp(1) fallback. Simple wrapper of renameat2(2). The command line interface follows mv(1)."
  },
  {
    "name": "rust_storage_interface_library",
    "replacement": "ssvm_storage_interface",
    "message": "# This Repository Is Deprecated  This library has been renamed and moved to [ssvm_storage_interface](https://github. com/second-state/ssvm_storage_interface). Please follow the resulting [new ssvm_storage_interface crate](https://crates. io/crates/ssvm_storage_interface) for further development. No further development will take place in this repository. # Rust Storage Interface Library  A Rust library that provides Rust to WebAssembly developers with syntax for \"load\" & \"store\" functionality for their data when their Wasm is being executed on SecondState's SSVM."
  },
  {
    "name": "rustc-serialize",
    "replacement": "serde",
    "message": "Generic serialization/deserialization support corresponding to the `derive(RustcEncodable, RustcDecodable)` mode in the compiler. Also includes support for hex, base64, and json encoding and decoding. This crate is deprecated in favor of serde."
  },
  {
    "name": "redact-data",
    "replacement": "redact-crypto",
    "message": "# DEPRECATED - redact-data  This repository has been deprecated and all relevant code migrated to [redact-crypto](https://github. com/pauwels-labs/redact-crypto). Contains all data and data storage abstractions for the Redact framework. Also contains implementations of the storage traits. Current supported implementations are: - mongodb - redact-store  To get started using this crate, view the docs [here](https://docs. rs/redact-data)."
  },
  {
    "name": "feed",
    "replacement": "rss",
    "message": "Deprecated. This project has been merged with the rss crate."
  },
  {
    "name": "gaea",
    "replacement": "Mio",
    "message": "12, commit 4a716d0b687592368d9e283a6ea63aedb5877fc8), changed to run on a single thread. But since the has evolved dramatically changing to become the center of events, rather then just provided a cross-platform epoll/kqueue implementation. [mio]: https://github. com/carllerche/mio  Rust version 1. 33 or higher is required as gaea makes use of Rust 2018 edition features. # Deprecation notice  Gaea is deprecated in favour of [Mio] as I've joined the Mio team and will continue developing the Mio crate instead of Gaea. [Mio]: https://crates. io/crates/mio   ## Differences compared to mio  The main two differences compared to [mio] are:  - Focus on single threaded performance. - No Windows support. The goal of this crate was to reduce the overhead of locks and/or atomic operations, at the cost of dropping the multi-threaded user queue. This means the usage of this crates, compared to mio, changes to using a single `OsQueue` (`Poll` in mio) per thread."
  },
  {
    "name": "ruma-serde",
    "replacement": "ruma-common",
    "message": "Deprecated: crate merged into ruma-common"
  },
  {
    "name": "config_struct",
    "replacement": "edres",
    "message": "Deprecated: Use edres instead."
  },
  {
    "name": "evm-network-classic",
    "replacement": "evm-network",
    "message": "Ethereum Classic patches for SputnikVM. Deprecated and will be dropped in future releases: use evm-network instead"
  },
  {
    "name": "rugflo",
    "replacement": "rug",
    "message": "Replaced by rug: arbitrary-precision integers, rational, floating-point and complex numbers"
  },
  {
    "name": "rerast",
    "replacement": "rust-analyzer",
    "message": "# Rerast  Rerast is a search/replace tool for Rust code using rules. A rule consists of a search pattern, a replacement and possibly some placeholders that can appear in both the search pattern and the replacement. Matching is done on syntax, not on text, so formatting doesn't matter. Placeholders are typed and must match the type found in the code for the rule to apply. Rerast is deprecated. We suggest using the [Structured Search Replace](https://rust-analyzer. github. io/manual. html#structural-search-and-replace) feature available in rust-analyzer. It is available either in vscode or from the command line (and possibly also vim)."
  },
  {
    "name": "ruma-identifiers",
    "replacement": "ruma-common",
    "message": "Deprecated: crate merged into ruma-common"
  },
  {
    "name": "random-integer",
    "replacement": "random-number",
    "message": "Random Integer ====================  [! [Build Status](https://travis-ci. org/magiclen/random-integer. svg? branch=master)](https://travis-ci. org/magiclen/random-integer)  This crate was deprecated, use `random-number` instead. https://crates. io/crates/random-number  ## Crates. io  https://crates. io/crates/random-integer  ## Documentation  https://docs. rs/random-integer  ## License  [MIT](LICENSE)"
  },
  {
    "name": "isatty",
    "replacement": "atty",
    "message": "Deprecated -- use the `atty` crate"
  },
  {
    "name": "kvarn-reference",
    "replacement": "moella",
    "message": "# Kvarn reference binary  **This crate is archived. Use the [`moella`](https://crates. io/crates/moella) crate instead, which features a config format. **  ---  > As [kvarn-search](https://github. com/Icelk/kvarn-search) isn't published on > crates. io yet, you must clone it at `."
  },
  {
    "name": "blake2b",
    "replacement": "blake2",
    "message": "DEPRECATED: please use the `blake2` crate"
  },
  {
    "name": "rust_interface_file_generator",
    "replacement": "rifgen",
    "message": "[Rust Documentation](https://img. shields. io/badge/api-rustdoc-blue. svg)](https://docs. rs/rust_interface_file_generator/)\r \r Program for translating libraries written in Rust to interface files. <b>Note that this crate is deprecated. Use [rifgen](https://crates. io/crates/rifgen)\r </b>\r \r \r It works with [flapigen](https://github. com/Dushistov/flapigen-rs). <b>For instructions on how to integrate with your project, click [here](https://docs. rs/rust_interface_file_generator/)\r \r </b>Suppose you have the following Rust code:\r \r ```rust\r struct Foo {\r     data: i32\r }\r \r impl Foo {\r     fn new(val: i32) -> Foo {\r         Foo{data: val}\r     }\r \r     fn f(&self, a: i32, b: i32) -> i32 {\r         self."
  },
  {
    "name": "channel-async",
    "replacement": "async-std",
    "message": "[build status][travis-badge]][travis-url] [! [crates. io version][crates-badge]][crates-url] [! [docs. rs docs][docs-badge]][docs-url] [! [MIT licensed][mit-badge]][mit-url]  * This crate is no longer maintained *  Due to interactions between crossbeam and tokio, it is recommended that you use the channels in [async-std](https://github. com/async-rs/async-std)  Async/stream extensions to [crossbeam-channel](https://github. com/crossbeam-rs/crossbeam/tree/master/crossbeam-channel) on top of [Futures 0. 3](https://github. com/rust-lang-nursery/futures-rs) Stream. It is primarily intended for usage with [Tokio](https://github."
  },
  {
    "name": "publicsuffix",
    "replacement": "psl",
    "message": "org) to reliably determine the suffix of a domain name. This crate provides a dynamic list that can be updated at runtime. If you need a faster, though static list, please use the [psl](https://crates. io/crates/psl) crate instead. *NB*: v1 of this crate contained logic to validate domain names and email addresses. Since v2, this functionality was moved to the [addr](https://crates. io/crates/addr) crate. This crate also no longer downloads the list for you. ## Setting Up  Add this crate to your `Cargo. toml`:  ```toml [dependencies] publicsuffix = \"2\" ```  ## Examples  ```rust use publicsuffix::{Psl, List};  // the official list can be found at // https://publicsuffix. org/list/public_suffix_list."
  },
  {
    "name": "google-cloud-trace-v2",
    "replacement": "OpenTelemetry",
    "message": "We welcome feedback about the APIs, documentation, missing features, bugs, etc. Sends application trace data to Stackdriver Trace for viewing. Trace data is collected for all App Engine applications by default. Trace data from other applications can be provided using this API. This library is used to interact with the Trace API directly. If you are looking to instrument your application for Stackdriver Trace, we recommend using OpenTelemetry. ## Quickstart  The main types to work with this crate are the clients:  - [TraceService]  ## More Information  - Read the [crate's documentation](https://docs. rs/google-cloud-trace-v2/latest/google-cloud-trace-v2)  [TraceService]: https://docs. rs/google-cloud-trace-v2/latest/google_cloud_trace_v2/client/struct. TraceService. html"
  },
  {
    "name": "elastic_date_macros",
    "replacement": "elastic_types_derive",
    "message": "Deprecated in favour of elastic_types_derive"
  },
  {
    "name": "rulex-macro",
    "replacement": "pomsky-macro",
    "message": "DEPRECATED: Use pomsky-macro instead. Macro for converting pomsky expressions to regexes"
  },
  {
    "name": "ruminant",
    "replacement": "parser-compose",
    "message": "# ruminant, a parser combinator library  **Deprecated** See my latest stab at this: [`parser-compose`](https://crates. io/crates/parser-compose)  > ⚠️ Warning ☣️   Homemade, hand-rolled code ahead. Experimental. May not function as advertised. This is an introduction by example. For a first-principles introduction to parser combinators see [here](https://theorangeduck."
  },
  {
    "name": "biller",
    "replacement": "broker",
    "message": "Moved to package broker"
  },
  {
    "name": "rowrap-rs",
    "replacement": "rowrap",
    "message": "Name change, moved to https://crates. io/crates/rowrap."
  },
  {
    "name": "rulex-bin",
    "replacement": "pomsky-bin",
    "message": "DEPRECATED: Use pomsky-bin instead. Compile rulex expressions, a new regular expression language"
  },
  {
    "name": "cargo-add",
    "replacement": "cargo-edit",
    "message": "Add dependencies to your Cargo. toml from the command line (deprecated in favor of cargo-edit)."
  },
  {
    "name": "russell_chk",
    "replacement": "russell_lab",
    "message": "**DEPRECATED:** This crate has been deprecated  Please use `russell_lab` instead."
  },
  {
    "name": "ruma-events-macros",
    "replacement": "ruma-macros",
    "message": "Deprecated: crate merged into ruma-macros"
  },
  {
    "name": "custom_derive",
    "replacement": "macro-attr",
    "message": "(Note: superseded by `macro-attr`) This crate provides a macro that enables the use of custom derive attributes."
  },
  {
    "name": "ripemd160",
    "replacement": "ripemd",
    "message": "Deprecated. Use the ripemd crate isntead."
  },
  {
    "name": "ethers-etherscan",
    "replacement": "foundry-block-explorers",
    "message": "io web API](https://docs. etherscan. io). For more information, please refer to the [book](https://gakonst. com/ethers-rs). > **Warning** >  > This crate is deprecated in favor of [`foundry-block-explorers`](https://crates. io/foundry-block-explorers) ([foundry-rs/block-explorers](https://github. com/foundry-rs/block-explorers)). See [#2667](https://github. com/gakonst/ethers-rs/issues/2667) for more information. ## Examples  ```rust,no_run # use ethers_core::types::Chain; # use ethers_etherscan::Client; # async fn foo() -> Result<(), Box<dyn std::error::Error>> { let client = Client::new(Chain::Mainnet, \"<your_api_key>\")?"
  },
  {
    "name": "resvg-cairo",
    "replacement": "resvg",
    "message": "[DEPRECATED] use the resvg crate instead."
  },
  {
    "name": "ruma-api-macros",
    "replacement": "ruma-macros",
    "message": "Deprecated: crate merged into ruma-macros"
  },
  {
    "name": "dmenv",
    "replacement": "poetry",
    "message": "*Caveat: this project is no longer maintained. If you are looking for an alternative, take a look at [poetry](https://python-poetry. org/). *  # dmenv: simple and practical virtualenv manager for Python  [! [Docs](https://img. shields."
  },
  {
    "name": "chan",
    "replacement": "crossbeam-channel",
    "message": "DEPRECATED. Use crossbeam-channel instead."
  },
  {
    "name": "color_space",
    "replacement": "palette",
    "message": "# UPDATE  This crate is no longer supported, nor recommended for use. If you want a great crate for color management and conversations, I recommend checking out the [palette](https://crates. io/crates/palette) crate! https://crates. io/crates/palette  It achieves what this crate set out to do, has all the same features and more, but does so with a much nicer, more flexible codebase."
  },
  {
    "name": "utf8-ranges",
    "replacement": "regex-syntax",
    "message": "**DEPRECATED:** This crate has been folded into the [`regex-syntax`](https://docs. rs/regex-syntax) and is now deprecated. utf8-ranges =========== This crate converts contiguous ranges of Unicode scalar values to UTF-8 byte ranges. This is useful when constructing byte based automata from Unicode. Stated differently, this lets one embed UTF-8 decoding as part of one's automaton. [!"
  },
  {
    "name": "sp-core-hashing",
    "replacement": "sp-crypto-hashing",
    "message": "Hashing primitives (deprecated: use sp-crypto-hashing for new applications)"
  },
  {
    "name": "crossterm_utils",
    "replacement": "crossterm",
    "message": "! [Lines of Code][s7] [! [Latest Version][s1]][l1] [! [MIT][s2]][l2] [! [docs][s3]][l3] [! [Join us on Discord][s5]][l5]\r \r # Crossterm Utilities\r \r **The `crossterm_utils` crate is deprecated and no longer maintained. The GitHub repository will\r be archived soon. All the code is being moved to the `crossterm`\r [crate](https://github. com/crossterm-rs/crossterm). You can learn more in the\r [Merge sub-crates to the crossterm crate](https://github. com/crossterm-rs/crossterm/issues/265)\r issue."
  },
  {
    "name": "kvm_wrapper",
    "replacement": "kvm-bindings",
    "message": "# kvm_wrapper  This crate is deprecated and will receive no bug fixes or updates. Please migrate to [kvm-bindings](https://crates. io/crates/kvm-bindings). It should be as simple as renaming the dependencies from `kvm_wrapper` to `kvm-bindings`."
  },
  {
    "name": "crossterm_cursor",
    "replacement": "crossterm",
    "message": "! [Lines of Code][s7] [! [Latest Version][s1]][l1] [! [MIT][s2]][l2] [! [docs][s3]][l3] [! [Join us on Discord][s5]][l5]\r \r # Crossterm Cursor\r \r **The `crossterm_cursor` crate is deprecated and no longer maintained. The GitHub repository will\r be archived soon. All the code is being moved to the `crossterm`\r [crate](https://github. com/crossterm-rs/crossterm). You can learn more in the\r [Merge sub-crates to the crossterm crate](https://github. com/crossterm-rs/crossterm/issues/265)\r issue."
  },
  {
    "name": "dusk-kelvin-map",
    "replacement": "dusk-hamt",
    "message": "io/badge/github-dusk--kelvin--map-blueviolet)](https://github. com/dusk-network/dusk-kelvin-map) [! [Docs](https://img. shields. io/badge/docs--rs-dusk--kelvin--map-blue)](https://docs. rs/dusk-kelvin-map)  # Dusk Kelvin Map  #### NOTE: This crate is deprecated in favor of [dusk-hamt](https://crates. io/crates/dusk-hamt)  Binary search tree implementation with no associated value on the nodes. It will extend the standard properties of a default BST. There is a naive balance implementation that will compare the cardinality of the left and right nodes of a tree before any mutation of the map (insert / remove). If there is a discrepancy, one minimum/maximum leaf will be swapped, according to the discrepancy. This will progressively balance the tree."
  },
  {
    "name": "druid",
    "replacement": "Xilem",
    "message": "**  New development effort is focused on [Xilem], which has a lot of fundamental changes to allow for a wider variety of applications with better performance, but it also heavily inherits from Druid. We see [Xilem] as the future of Druid. Druid is reasonably usable for [some subset of applications](https://github. com/linebender/druid/issues/1360) and has a significant testing history, which ensures some stability and correctness. However we don't expect any major new features to be added to Druid. As such we don't recommend using Druid for brand new applications. If you insist, then at least make sure your application doesn't require a feature that Druid doesn't have, e. g. accessibility or 3D support. ## Contributions  As the Druid project is being discontinued, we will still accept all contributions, but we'll prefer bug fixes and documentation improvements to new features. A very good place to ask questions and discuss development work is our [Zulip chat instance], in the #druid-help and #druid channels, respectively."
  },
  {
    "name": "double-checked-cell",
    "replacement": "once_cell",
    "message": "rs/double-checked-cell) [! [No maintenance intended](https://img. shields. io/badge/no%20maintenance%20intended-x-red. svg)](https://github. com/rust-lang/rust/issues/74465)  Deprecated ----------  You should probably use [once_cell](https://crates. io/crates/once_cell) instead of this crate. It provides a superset of this crate's functionality, with a nicely consistent API. Its functionality is also being considered for [inclusion in the standard library](https://github. com/rust-lang/rust/issues/74465). Introduction ------------  Provides a memory location that can be safely shared between threads and initialized at most once."
  },
  {
    "name": "stm32h7-sdmmc",
    "replacement": "stm32h7xx-hal",
    "message": "## This crate has been replaced by [SDMMC support within stm32h7xx-hal](https://docs. rs/stm32h7xx-hal/latest/stm32h7xx_hal/sdmmc/index. html). ### Contribution  Unless you explicitly state otherwise, any contribution intentionally submitted for inclusion in the work by you, as defined in the Apache-2. 0 license, shall be dual licensed as above, without any additional terms or conditions. [`stm32h7xx-hal`]: https://crates."
  },
  {
    "name": "sha-1",
    "replacement": "sha1",
    "message": "SHA-1 hash function. This crate is deprecated! Use the sha1 crate instead."
  },
  {
    "name": "cyclic_data_types",
    "replacement": "Vec",
    "message": "Cyclic List Example\r ```text\r  1 ↔ 2 ↔ . . . ↔ n\r  ↑             ↑\r  └─────────────┘\r ```\r Note: Even though the diagram uses arrow to denote the relationship between nodes/elements; implying a linked node structure - however, the implementation in this crate uses arrays. ### Stack\r \r The stack module contains a series of structs to create stacks and their utility functionalities using cyclic lists. It is recommended to use [`Vec`] over [`Stack`] for most applications. As [`Vec`] has better - if not similar performance to the [`Stack`]. It is therefore, [`Stack`] should only be used when the stack should strictly be limited to a given size and or convince of life features provided by the [`Stack`]. ### Queue\r \r The queue module contains a series of structs to create queues and their utility functionalities using cyclic lists. As a result, the queue inherits the O(1) insertion and deletion for enqueuing & dequeuing."
  },
  {
    "name": "dharitri-wasm-module-pause",
    "replacement": "dharitri-wasm-modules",
    "message": "# [DEPRECATED] Dharitri smart contract module for adding a global pause flag  The module was moved to crate `dharitri-wasm-modules`, together with all documentation."
  },
  {
    "name": "dusk-hades",
    "replacement": "dusk-poseidon",
    "message": "com/dusk-network/hades252) [! [Documentation](https://img. shields. io/badge/docs-dusk--hades-blue? logo=rust)](https://docs. rs/dusk-hades/)  # Hades252 (deprecated)  | :exclamation: This crate is deprecated. | |---------------------------------------------| The hades permutation moved into [`dusk-poseidon`](https://github. com/dusk-network/Poseidon252). Implementation of Hades252 permutation algorithm over the Bls12-381 Scalar field. ## Documentation  To generate the `Hades252` documentation:  ```sh make doc make doc-internal ```  ## Use  Run the following to add `Hades252` to the dependency section of your project's 'Cargo. toml':  ```toml cargo add dusk-hades ```  `Hades252` has a `width` equals to `5`; it's possible to use a different value, see [How to generate the assets](assets/HOWTO."
  },
  {
    "name": "embedded-hal-async",
    "replacement": "embedded-io-async",
    "message": "svg)](https://docs. rs/embedded-hal-async)  # `embedded-hal-async`  An asynchronous Hardware Abstraction Layer (HAL) for embedded systems. This crate contains asynchronous versions of the [`embedded-hal`](https://crates. io/crates/embedded-hal) traits and shares its scope and [design goals](https://docs. rs/embedded-hal/latest/embedded_hal/#design-goals). This project is developed and maintained by the [HAL team](https://github. com/rust-embedded/wg#the-hal-team). ## Serial/UART traits  There is no serial traits in `embedded-hal-async`. Instead, use [`embedded-io-async`](https://crates. io/crates/embedded-io-async). A serial port is essentially a byte-oriented stream, and that's what `embedded-io-async` models."
  },
  {
    "name": "humantime",
    "replacement": "humantime-serde",
    "message": ". bench:          36 ns/iter (+/- 2) test rfc3339_humantime_seconds  . . . bench:          24 ns/iter (+/- 1)  test result: ok. 0 passed; 0 failed; 0 ignored; 6 measured; 0 filtered out ```  See [humantime-serde] for serde integration (previous crate [serde-humantime] looks unmaintained). [serde-humantime]: https://docs. rs/serde-humantime/0. 1. 1/serde_humantime/ [humantime-serde]: https://docs. rs/humantime-serde  License =======  Licensed under either of  * Apache License, Version 2."
  },
  {
    "name": "elrond-wasm-module-dns",
    "replacement": "elrond-wasm-modules",
    "message": "# [DEPRECATED] Elrond smart contract module for interacting with the DNS  The module was moved to crate `elrond-wasm-modules`, together with all documentation."
  },
  {
    "name": "delaunay_creator",
    "replacement": "meshing",
    "message": "Please note that the repository for this crate has been archived, which means it is no longer actively maintained. However, you can still use it in your projects, but be aware that you might encounter issues that will not be fixed by the original developers. Use meshing instead. [meshing crate page on crates. io](https://crates. io/crates/meshing)."
  },
  {
    "name": "duniter-wotb",
    "replacement": "runiter-wot",
    "message": "Deprecated crate. Use runiter-wot."
  },
  {
    "name": "elrond-wasm-module-pause",
    "replacement": "elrond-wasm-modules",
    "message": "# [DEPRECATED] Elrond smart contract module for adding a global pause flag  The module was moved to crate `elrond-wasm-modules`, together with all documentation."
  },
  {
    "name": "elastic_hyper",
    "replacement": "elastic_reqwest",
    "message": "Deprecated in favour of elastic_reqwest"
  },
  {
    "name": "lyon_bezier",
    "replacement": "lyon_geom",
    "message": "[Deprecated] This crate was renamed into lyon_geom."
  },
  {
    "name": "elrond-wasm-module-features",
    "replacement": "elrond-wasm-modules",
    "message": "# [DEPRECATED] Elrond smart contract module for adding feature flags  The module was moved to crate `elrond-wasm-modules`, together with all documentation."
  },
  {
    "name": "dinghy",
    "replacement": "cargo-dinghy",
    "message": "[Deprecated] use cargo-dinghy instead"
  },
  {
    "name": "downcast",
    "replacement": "downcast-rs",
    "message": "If you found a solution, feel free to share it! __Q: What is the difference between this and the `downcast-rs` crate on crates. io? __  A: At the moment, there isn't one, really. There was an unfortunate naming clash. You may consider using the other crate, as it is more actively maintained. This one is considered feature-complete and frozen in functionality. Hopefully, one day, the Rust language will make downcasting easier and we will need neither of these crates anymore!"
  },
  {
    "name": "crab_nat",
    "replacement": "netdev",
    "message": "(\"Successfully deleted the mapping. . . \"); } ```  Crab NAT does not determine the gateway address or the local client address. This is to reduce unnecessary assumptions about how this library will be used. For an easy API to determine these values reliably, I recommend using [netdev](https://crates. io/crates/netdev); see the example [client](examples/client. rs) for basic usage. ### Crate Features * `tracing`: Enables logging of UDP packet retry attempts using the [tracing](https://github. com/tokio-rs/tracing) crate. This currently only shows UDP retry attempts at an `INFO` verbosity level."
  },
  {
    "name": "dharitri-wasm-module-dns",
    "replacement": "dharitri-wasm-modules",
    "message": "# [DEPRECATED] Dharitri smart contract module for interacting with the DNS  The module was moved to crate `dharitri-wasm-modules`, together with all documentation."
  },
  {
    "name": "trust-dns-proto",
    "replacement": "hickory-proto",
    "message": "**NOTICE** This project has been rebranded to Hickory DNS and has been moved to the https://github. com/hickory-dns/hickory-dns organization and repo, this crate/binary has been moved to [hickory-proto](https://crates. io/crates/hickory-proto), from `0. 24` and onward. # Overview  Trust-DNS Proto is the foundational DNS protocol library and implementation for Trust-DNS. Unless you want to manipulate the DNS packets directly, it is likely not the library you want."
  },
  {
    "name": "baby-pool",
    "replacement": "topograph",
    "message": "Deprecated in favor of `topograph`"
  },
  {
    "name": "containerd-shim-client",
    "replacement": "containerd-shim-protos",
    "message": "# Shim protos and client for containerd  ## Deprecated: Use [containerd-shim-protos](https://crates. io/crates/containerd-shim-protos) instead. [! [Crates. io](https://img. shields."
  },
  {
    "name": "crossterm_terminal",
    "replacement": "crossterm",
    "message": "! [Lines of Code][s7] [! [Latest Version][s1]][l1] [! [MIT][s2]][l2] [! [docs][s3]][l3] [! [Join us on Discord][s5]][l5]\r \r # Crossterm Terminal\r \r **The `crossterm_terminal` crate is deprecated and no longer maintained. The GitHub repository will\r be archived soon. All the code is being moved to the `crossterm`\r [crate](https://github. com/crossterm-rs/crossterm). You can learn more in the\r [Merge sub-crates to the crossterm crate](https://github. com/crossterm-rs/crossterm/issues/265)\r issue."
  },
  {
    "name": "dharitri-wasm-module-features",
    "replacement": "dharitri-wasm-modules",
    "message": "# [DEPRECATED] Dharitri smart contract module for adding feature flags  The module was moved to crate `dharitri-wasm-modules`, together with all documentation."
  },
  {
    "name": "coord",
    "replacement": "vek",
    "message": "# `coord` is deprecated. I recommend using [`vek`](https://github. com/yoanlcq/vek), a project with near-identical aims instead. # <img src=\"https://imgur. com/qcUMer7. png\" alt=\"Coord\" width=\"32px\"/> Coord  [!"
  },
  {
    "name": "dcmdump",
    "replacement": "dicom-dump",
    "message": "svg)](https://crates. io/crates/dcmdump) [! [Documentation](https://docs. rs/dcmdump/badge. svg)](https://docs. rs/dcmdump)  **Warning:** This tool is deprecated in favor of [`dicom-dump`](. . /dump). A command line utility for inspecting DICOM files. This tool is part of the [DICOM-rs](https://github. com/Enet4/dicom-rs) project."
  },
  {
    "name": "dharitri-wasm-module-users",
    "replacement": "dharitri-wasm-modules",
    "message": "# [DEPRECATED] Dharitri smart contract module for managing a list of users  The module was moved to crate `dharitri-wasm-modules`, together with all documentation."
  },
  {
    "name": "duniter-rs-wotb",
    "replacement": "duniter-wotb",
    "message": "# Deprecated  This crate has been moved to `duniter-wotb` and should not be used anymore."
  },
  {
    "name": "default-net",
    "replacement": "netdev",
    "message": "shields. io/crates/l/default-net. svg [examples-url]: https://github. com/shellrow/default-net/tree/main/examples [netdev-github-url]: https://github. com/shellrow/netdev [netdev-crates-io-url]: https://crates. io/crates/netdev  # Notice - This project has been rebranded to `netdev` and repository has been moved to the https://github. com/shellrow/netdev  - This crate has been moved to [netdev][netdev-crates-io-url] from `0. 23`  # default-net [! [Crates. io][crates-badge]][crates-url] ! [License][license-badge]    `default-net` provides a cross-platform API for network interface and gateway."
  },
  {
    "name": "bigint",
    "replacement": "uint",
    "message": "DEPRECATED: use uint instead"
  },
  {
    "name": "cpuid-bool",
    "replacement": "cpufeatures",
    "message": "DEPRECATED: replaced by the `cpufeatures` crate"
  },
  {
    "name": "cortex-m-rtfm-macros",
    "replacement": "cortex-m-rtic",
    "message": "# DEPRECATED use `cortex-m-rtic` instead - Real Time For the Masses  **RTFM has gone through a name change as per RFC https://github. com/rtic-rs/rfcs/pull/33 and the name will now be Real-Time Interrupt-driven Concurrency (RTIC). ** A concurrency framework for building real time systems. ## Features  - **Tasks** as the unit of concurrency [^1]. Tasks can be *event triggered*   (fired in response to asynchronous stimuli) or spawned by the application on   demand. - **Message passing** between tasks."
  },
  {
    "name": "cortex-a",
    "replacement": "aarch64-cpu",
    "message": "# Deprecation Notice  This crate has been renamed to `aarch64-cpu`. Please find it at - https://github. com/rust-embedded/aarch64-cpu - https://crates. io/crates/aarch64-cpu  Version `8. 1. 1` will be the last version of this crate and has been added to get this message out."
  },
  {
    "name": "dynamodb-tester",
    "replacement": "dynamodb-tools",
    "message": "# DynamoDB tester  WARNING! This crate is deprecated. I realized that instead of a pure tester, what I really need is a connector that can be used in different environment, e. g. dev/test/staging/prod. Please use [dynamodb-tools](https://github. com/tyrchen/dynamodb-tools) instead."
  },
  {
    "name": "dinotree_alg",
    "replacement": "broccoli",
    "message": "This crate is deprecated. Use [broccoli](https://crates. io/crates/broccoli) instead."
  },
  {
    "name": "deflate",
    "replacement": "flate2",
    "message": "The API is based on the one in the [flate2](https://crates. io/crates/flate2) crate that contains bindings, zlib miniz_oxide, and miniz. Deflate encoding with and without zlib and gzip metadata (zlib dictionaries are not supported) is supported. No unsafe code is used. Encoding in gzip format requires enabling the 'gzip' feature. This library is now mostly in maintenance mode, focus being on the Rust backend of [flate2](https://crates. io/crates/flate2) instead. The minimum required Rust version is 1. 32. 0 due to use of library functions for endinaness conversion (unit tests requires a newer version). # Usage: ## Simple compression function: ``` rust use deflate::deflate_bytes;  let data = b\"Some data\"; let compressed = deflate_bytes(&data); ```  ## Using a writer:  ``` rust use std::io::Write;  use deflate::Compression; use deflate::write::ZlibEncoder;  let data = b\"This is some test data\"; let mut encoder = ZlibEncoder::new(Vec::new(), Compression::Default); encoder."
  },
  {
    "name": "cranelift-faerie",
    "replacement": "cranelift-object",
    "message": "This crate contains a library that enables [Cranelift](https://crates. io/crates/cranelift) to emit native object (\". o\") files, using the [Faerie](https://crates. io/crates/faerie) library. DEPRECATION NOTICE: the Cranelift developer team intends to stop maintaining the `cranelift-faerie` crate and remove it from the `wasmtime` git repository on or after August 3, 2020. We recommend users use its successor, the `cranelift-object` crate."
  },
  {
    "name": "multipart-nickel",
    "replacement": "multipart",
    "message": "DEPRECATED: Nickel support is returning to `multipart` itself in 0. 14. Support for `multipart/form-data` bodies in Nickel via the `multipart` crate."
  },
  {
    "name": "badgers",
    "replacement": "ab_glyph",
    "message": "3\". to_owned(),     color: \"#4d76ae\". to_owned(), }; let badge = Badge::new(options). unwrap(); let svg = badge. to_svg(); ```  ## Origin Story  This is a fork of the [`badge`](https://crates. io/crates/badge) crate in order to replace the now [deprecated](https://rustsec. org/advisories/RUSTSEC-2021-0140. html) [`rusttype`](https://crates. io/crates/rusttype) crate. `rusttype` was replaced by [`ab_glyph`](https://crates. io/crates/ab_glyph) as suggested in the rustsec advisory."
  },
  {
    "name": "erupt",
    "replacement": "ash",
    "message": "io/crates/v/erupt. svg)](https://crates. io/crates/erupt)  Vulkan API bindings  Take a look at the [`erupt` user guide](https://gitlab. com/Friz64/erupt/-/blob/main/USER_GUIDE. md). ## **MAINTENANCE MODE NOTICE**  It is not recommended to use erupt for new projects, use ash instead. There is work underway to rewrite ash using ideas from the erupt project, for updates see <https://github. com/ash-rs/ash/issues/344>. Simple patches to erupt will still be merged, but no large changes are to be expected. ## Features  - Full Vulkan API coverage - First-class support for all extensions - High quality auto-generated function wrappers - A [utility module] aiding your use of this crate   - [`VulkanResult`]: Idiomatic wrapper around a Vulkan Result   - [`surface`]: Create a [`SurfaceKHR`] using a [`RawWindowHandle`] (adapted from [`ash-window`]) - Generated code distributed into multiple modules - Function loading ([`EntryLoader`], [`InstanceLoader`], [`DeviceLoader`]) - Separate `Flags` and `FlagBits` types - A high level `Builder` for every struct - Type-safe pointer chain support - `Default` and `Debug` implementation for every type - Confirmed support for Linux, Windows, macOS and Android - Complete auto-generation of everything except [`utils`]  ## Example: Instance Creation  ```rust ignore use erupt::{vk, EntryLoader, InstanceLoader};  let entry = EntryLoader::new()? ;  let app_info = vk::ApplicationInfoBuilder::new()     ."
  },
  {
    "name": "actix_validated_forms",
    "replacement": "actix-web-validator",
    "message": "yml/badge. svg)](https://github. com/jacob-pro/actix-validated-forms/actions) ! [maintenance-status](https://img. shields. io/badge/maintenance-deprecated-red. svg)  ## Deprecation Notice  This crate is no longer maintained. For validated forms and queries please use [actix-web-validator](https://github. com/rambler-digital-solutions/actix-web-validator). For multipart forms please use [actix-easy-multipart](https://github. com/jacob-pro/actix-easy-multipart)"
  },
  {
    "name": "boa_unicode",
    "replacement": "icu_properties",
    "message": "DEPRECATED. Use the icu_properties crate instead."
  },
  {
    "name": "not-stakkr",
    "replacement": "tweetr",
    "message": "Replaced by tweetr."
  },
  {
    "name": "arcanist",
    "replacement": "pkgcraft",
    "message": "Project moved to [pkgcraft](https://github. com/pkgcraft/pkgcraft), contact me if you're interested in a name transfer on crates. io."
  },
  {
    "name": "lucet-module-data",
    "replacement": "lucet-module",
    "message": "DEPRECATED: This package is now available as `lucet-module`."
  },
  {
    "name": "rsincrond",
    "replacement": "incron",
    "message": "Rust rewrite of the incredibly useful but abandoned incron software"
  },
  {
    "name": "lucet-analyze",
    "replacement": "lucet-objdump",
    "message": "DEPRECATED: This package is now available as `lucet-objdump`."
  },
  {
    "name": "at-rs",
    "replacement": "atat",
    "message": "# CRATE MOVED! > This crate has been renamed, and has moved to [atat](https://crates. io/crates/atat)"
  },
  {
    "name": "block-cipher",
    "replacement": "cipher",
    "message": "DEPRECATED: replaced by the `cipher` crate"
  },
  {
    "name": "videocall-daemon",
    "replacement": "videocall-cli",
    "message": "# VideoCall Daemon Rust Client  ## Deprecated Renamed to [videocall-cli](https://crates. io/crates/videocall-cli)"
  },
  {
    "name": "clapme",
    "replacement": "auto-args",
    "message": "# ClapMe  This crate is deprecated in favor of [auto-args](https://crates. io/auto-args)."
  },
  {
    "name": "bb8-nebula-graph",
    "replacement": "bb8-nebula",
    "message": "# bb8-nebula-graph  * [Cargo package](https://crates. io/crates/bb8-nebula-graph)   Archived, Rename to [bb8-nebula](https://crates. io/crates/bb8-nebula)"
  },
  {
    "name": "ethcontract-generate",
    "replacement": "ethcontract-derive",
    "message": "unwrap()         . write_to_file(dest)         . unwrap(); }  ```  ## Relation to `ethcontract-derive`  `ethcontract-derive` uses `ethcontract-generate` under the hood so their generated bindings should be identical, they just provide different APIs to the same functionality. The long term goal of this project is to maintain `ethcontract-derive`. For now there is no extra work in having it split into two separate crates. That being said if RLS support improves for procedural macro generated code, it is possible that this crate be deprecated in favour of `ethcontract-derive` as long as there is no good argument to keep it around."
  },
  {
    "name": "atsamd51n20a",
    "replacement": "atsamd51n",
    "message": "# This crates has been replaced by [https://crates. io/crates/atsamd51n](https://crates. io/crates/atsamd51n)"
  },
  {
    "name": "alhc",
    "replacement": "curl",
    "message": "(\"{r}\");      Ok(()) } ```  Our little request example [`https`](. /examples/https. rs) with release build can be 182 KB, which is smaller than `tinyget`'s `http` example. If we use rustc nightly feature plus `build-std` and `panic_immediate_abort`, it'll be incredibly 65 KB! Currently work in progress and support Windows (Using WinHTTP) and unix-like system (including macOS) (Using System libcurl by wraping [`isahc`](https://github. com/sagebind/isahc) crate (Will be replaced by simplier `curl` crate binding)). ## Platform Status  | Name    | Status  | Note                                                                 | | ------- | ------- | -------------------------------------------------------------------- | | Windows | Working | Maybe unstable (To be optimized)                                     | | macOS   | Working | Simple wrapper of [`isahc`](https://github. com/sagebind/isahc) crate | | Linux   | Working | Simple wrapper of [`isahc`](https://github. com/sagebind/isahc) crate |  ## Features  - `async_t_boxed`: Use `async-trait` instead of `async-t`, which requires 1. 75+ version of rustc but with zero-cost. Default is disabled."
  },
  {
    "name": "gdnative_geom",
    "replacement": "gdnative",
    "message": "(DEPRECATED) Math primitives for the Godot game engine's gdnative bindings (See the gdnative crate)."
  },
  {
    "name": "bv2av",
    "replacement": "abv",
    "message": "# bv2av  DEPRECATED. use [abv](https://github. com/Colerar/abv) instead"
  },
  {
    "name": "rust_templates",
    "replacement": "tron",
    "message": "# WARNING\r This crate has been replaced by the tron crate as it has improved templating! This crate will still work but is not being maintained. # WARNING\r \r \r \r \r \r \r # Rust Template System\r \r A flexible and type-safe template system for Rust code generation and execution. This system allows you to create, manage, and execute Rust code templates with customizable placeholders and dependencies. ## Features\r \r - Template creation from strings or files\r - Placeholder management with validation\r - Template assembly and composition\r - Optional template execution using rust-script\r - Dependency management for executed templates\r - Error handling with custom error types\r \r ## Installation\r \r Add this to your `Cargo. toml`:\r \r ```toml\r [dependencies]\r rust_templates = \"0."
  },
  {
    "name": "atsame54p20a",
    "replacement": "atsame54p",
    "message": "# This crate has been replaced by [https://crates. io/crates/atsame54p](https://crates. io/crates/atsame54p)"
  },
  {
    "name": "battery-cli",
    "replacement": "battop",
    "message": "# battery-cli  This crate was yanked and replaced by `battop` crate:   * [crates. io](https://crates. io/crates/battop)  * [GitHub](https://github. com/svartalf/rust-battop)"
  },
  {
    "name": "dirs-sys-next",
    "replacement": "dirs-next",
    "message": "svg)](https://crates. io/crates/dirs-sys-next) [! [API documentation](https://docs. rs/dirs-sys-next/badge. svg)](https://docs. rs/dirs-sys-next/)  # `dirs-sys-next`  **NOTE**: This crate is a fork of once-abandoned `dirs-sys` crate. _Do not use this library directly, use [`dirs-next`] or [`directories-next`]. _  ## Compatibility  This crate only exists to facilitate code sharing between [`dirs-next`] and [`directories-next`]. There are no compatibility guarantees whatsoever. Functions may change or disappear without warning or any kind of deprecation period. ## Platforms  This library is written in Rust, and supports Linux, Redox, macOS and Windows."
  },
  {
    "name": "bevy-undo",
    "replacement": "bevy-undo2",
    "message": "This crate was deprecated; please use [`bevy-undo2`](https://crates. io/crates/bevy-undo2) instead."
  },
  {
    "name": "assertify_proc_macros",
    "replacement": "assert2",
    "message": "Deprecated: use assert2 for better assertions"
  },
  {
    "name": "morse-quest",
    "replacement": "code-smore",
    "message": "This crate is deprecated. Please see the code-smore crate instead."
  },
  {
    "name": "beetle-collatz-threaded",
    "replacement": "beetle-collatz",
    "message": "beetle-collatz-threaded is now deprecated. Use beetle-collatz instead which now contains all this crate's functions behind the `threaded` feature"
  },
  {
    "name": "all_variants",
    "replacement": "every_variant",
    "message": "moved to [every_variant](https://crates. io/crates/every_variant)"
  },
  {
    "name": "Minimal",
    "replacement": "minimal_web",
    "message": "# minimal\r Moved to minimal_web cause Uppercase mistake."
  },
  {
    "name": "abstract-core-testing",
    "replacement": "abstract-sdk",
    "message": "# Abstract  This package contains everything you need to interact with Abstract contracts. This package contains: * Abstract contract interface messages * Abstract contract states * Abstract objects (preferably use the re-exported version in [Abstract-SDK](https://crates. io/crates/abstract-sdk))  ## Usage ```rust // Import a contract Exec/Init/Query message abstract_core::contract::ExecuteMsg // Import a contract state lay-out abstract_core::contract::state::STATE // Import a state object abstract_core::object::ProxyValue; ```  ## Messages  Each interface in individually commented. ## States Each state-layout is also individually covered  ## Objects Abstract Objects are used to store information along with helper functions. We provide these as imports so the data can be retrieved externally (using Raw Queries). If you want to use these objects in your own contracts we suggest using the abstract-sdk package."
  },
  {
    "name": "audio-duration",
    "replacement": "sampled_data_duration",
    "message": "# audio-duration  This library has been deprecated in favour of [sampled_data_duration](https://crates. io/crates/sampled_data_duration). Please contact me if you would like to take ownership of the `audio-duration` crate name on `crates. io`."
  },
  {
    "name": "magicapi-ai-gateway",
    "replacement": "noveum-ai-gateway",
    "message": "[DEPRECATED] This package has been renamed to 'noveum-ai-gateway'. Please use the new package for all future development. A high-performance AI Gateway proxy for routing requests to various AI providers, offering seamless integration and management of multiple AI providers."
  },
  {
    "name": "atsamd21-hal",
    "replacement": "atsamd-hal",
    "message": "# HAL for working with atsamd21 devices  This crate provides a type-safe API for working with atsamd21 based devices. Currently this crate supports `atsamd21g18a` or `atsamd21e18a` (selectable via the `samd21g18a` or `samd21e18a` features), and should be able to support other variants in a similar fashion; pull requests for this are welcomed! ## Examples? Check out the metro_m0 board support crate examples:  https://github. com/wez/atsamd/tree/master/metro_m0/examples  ## Deprecated This crate has been replaced by atsamd-hal, which combines both atsamd21 and atsamd51 support."
  },
  {
    "name": "bibcompiler",
    "replacement": "latex-thebib",
    "message": "DEPRECATED: use latex-thebib, it offers a more complete compiler and also other functionality. Compile BibTeX files to legacy {thebibliography} TeX code. Francesco Alemanno (2022)"
  },
  {
    "name": "iroh-net",
    "replacement": "iroh",
    "message": "networking support for iroh (deprecated, use the iroh crate)"
  },
  {
    "name": "atsamd51j19a",
    "replacement": "atsamd51j",
    "message": "# This crate has been replaced by [https://crates. io/crates/atsamd51j](https://crates. io/crates/atsamd51j)"
  },
  {
    "name": "alkali",
    "replacement": "sodiumoxide",
    "message": "org) cryptographic library. Sodium is a fast, modern cryptographic library written in C. This crate intends to provide a higher-level API for making use of the constructs Sodium provides. These constructs include simple-to-use symmetric and asymmetric authenticated encryption, signatures, hashing, password derivation, and key exchange: In short, the majority of operations required for many modern cryptographic protocols. The intention for this library is to be a replacement for [sodiumoxide](https://github. com/sodiumoxide/sodiumoxide), which is now deprecated. Lots of design decisions here were inspired by this library, so thanks to all of its contributors! ## Usage/Documentation Comprehensive documentation for this library is available [on docs. rs](https://docs. rs/alkali). The intention is for the entire library to be well documented, with illustrative examples and information on security concerns."
  },
  {
    "name": "sodiumoxide-xchacha20poly1305",
    "replacement": "sodiumoxide",
    "message": "io/crates/v/sodiumoxide-xchacha20-poly1305. svg [crates-url]: https://crates. io/crates/sodiumoxide-xchacha20poly1305 [doc-badge]: https://docs. rs/sodiumoxide-xchacha20-poly1305/badge. svg [doc-url]: https://docs. rs/sodiumoxide-xchacha20-poly1305  >Note: This package only includes a sodiumoxide wrapper around the XChaCha20-Poly1305 AEAD stream cipher that is required by another package and will most likely be abandoned once sodiumoxide supports this in a new crate release. You probably should use sodiumoxide instead of this anyway if you are after the full bindings. > [NaCl](http://nacl. cr. yp. to) (pronounced \"salt\") is a new easy-to-use high-speed software library for network communication, encryption, decryption, signatures, etc."
  },
  {
    "name": "alloc-cortex-m",
    "replacement": "embedded-alloc",
    "message": "[crates. io](https://img. shields. io/crates/v/alloc-cortex-m. svg)](https://crates. io/crates/alloc-cortex-m)  # `alloc-cortex-m`  **This crate is deprecated; please use [`embedded-alloc`](https://crates. io/crates/embedded-alloc) instead. **  `embedded-alloc` is the latest version of `alloc-cortex-m`, but supports more than just cortex-m platforms. > A heap allocator for Cortex-M processors  This project is developed and maintained by the [Cortex-M team][team]. ## [Documentation](https://docs. rs/alloc-cortex-m)  ## [Change log](CHANGELOG."
  },
  {
    "name": "grafbase-composition",
    "replacement": "graphql-composition",
    "message": "This crate name is deprecated. Use [graphql-composition](https://crates. io/crates/graphql-composition) instead."
  },
  {
    "name": "truetype",
    "replacement": "opentype",
    "message": "# TrueType [! [Package][package-img]][package-url] [! [Documentation][documentation-img]][documentation-url] [! [Build][build-img]][build-url]  The package provides a builder and parser of TrueType fonts. It is recommended to use a higher-level abstraction called [`opentype`][opentype], which internally relies on this package. ## Contribution  Your contribution is highly appreciated. Do not hesitate to open an issue or a pull request. Note that any contribution submitted for inclusion in the project will be licensed according to the terms given in [LICENSE. md](LICENSE. md)."
  },
  {
    "name": "webm-native",
    "replacement": "webm",
    "message": "Deprecated: use the webm crate instead"
  },
  {
    "name": "woodcock",
    "replacement": "gateway",
    "message": "`-n mainnet` will allow you to query from Starkent mainnet, `-n goerli` will allow you to query from Starkent goerli, `-n goerli2` will allow you to query from Starkent goerli2. ## Usage  ``` Usage: woodcock [OPTIONS] [COMMAND]  Commands:   --to-time   Convert blocknumber to time. [aliases: btt]   --to-block  Convert time to blocknumber. [aliases: ttb]   help        Print this message or the help of the given subcommand(s)  Options:   -t, --timezone <TIME_ZONE>  Timezone   -n, --network <NETWORK>     Network: [mainnet/goerli/goerli2]   -f, --format <TIME_FORMAT>  The format to use time   -h, --help                  Print help ```  ### `--to-block`  ``` Convert time to blocknumber. Usage: woodcock --to-block <TIME>  Arguments:   <TIME>  The time to convert  Options:   -h, --help  Print help ```  ### `--to-time`  ``` Convert blocknumber to time. Usage: woodcock --to-time <BLOCK_NUMBER>  Arguments:   <BLOCK_NUMBER>  The blocknumber to convert  Options:   -h, --help  Print help ```  ## Improvement  - [ ] timezone support - [ ] RPC support ( gateway will be deprecated ) - [ ] algorithm upgrade?"
  },
  {
    "name": "atsamd21g18a",
    "replacement": "atsamd21g",
    "message": "# This crate has been replaced by [https://crates. io/crates/atsamd21g](https://crates. io/crates/atsamd21g)"
  },
  {
    "name": "block-cipher-trait",
    "replacement": "cipher",
    "message": "DEPRECATED: please switch to the `cipher` crate"
  },
  {
    "name": "terminal-escapes",
    "replacement": "termion",
    "message": "[DEPRECATED in favor of termion] Terminal escape sequence support for client applications."
  },
  {
    "name": "packed_integer_array",
    "replacement": "bitpacking",
    "message": "rs/packed_integer_array/badge. svg)](https://docs. rs/packed_integer_array)  This library provides an array of integers packed together in variable bit-lengths. It supports in-place random access as well as iterating through the whole array (unpacking). ## See Also The [bitpacking](https://crates. io/crates/bitpacking) crate provides a vectorised implementation of unpacking/packing routines similar to the ones used in this crate, and there is a possibility parts of this crate may be replaced by it in future for a speed increase when packing/unpacking."
  },
  {
    "name": "auto_uds",
    "replacement": "automotive_diag",
    "message": "DEPRECATED: The new crate name automotive_diag."
  },
  {
    "name": "sntp",
    "replacement": "smolapps",
    "message": "# :warning: DEPRECATION WARNING! :warning:  **This crate has been deprecated in favor of [smolapps], a collection of similar crates. **  [smolapps]: https://github. com/plorefice/smolapps  # sntp-rs  [! [crates. io badge](https://img."
  },
  {
    "name": "actors-rs",
    "replacement": "nav",
    "message": "20. 2 lerna info versioning independent lerna info Executing command in 2 packages: \"yarn run start\" actors-rs-mkdocs: $ nopenv mkdocs serve -a localhost:8001 actors-rs-frontpage: $ echo 'visit http://localhost:8000/ to test frontpage' && gatsby develop --no-color actors-rs-frontpage: visit http://localhost:8000/ to test frontpage actors-rs-mkdocs: INFO    -  Building documentation. . . actors-rs-mkdocs: WARNING -  Config value: 'pages'. Warning: The 'pages' configuration option has been deprecated and will be removed in a future release of MkDocs. Use 'nav' instead. actors-rs-mkdocs: INFO    -  Cleaning site directory actors-rs-mkdocs: INFO    -  The following pages exist in the docs directory, but are not included in the \"nav\" configuration: actors-rs-mkdocs:   - cluster. md actors-rs-mkdocs:   - io. md actors-rs-mkdocs:   - persistence. md actors-rs-mkdocs: WARNING -  A relative path to '."
  },
  {
    "name": "atsamd21e18a",
    "replacement": "atsamd21e",
    "message": "# This crate has been replaced by [https://crates. io/crates/atsamd21e](https://crates. io/crates/atsamd21e)"
  },
  {
    "name": "atsamd51j20a",
    "replacement": "atsamd51j",
    "message": "# This crate has been replaced by [https://crates. io/crates/atsamd51j](https://crates. io/crates/atsamd51j)"
  },
  {
    "name": "sol",
    "replacement": "embree-rs",
    "message": "A wrapper for the Embree ray tracing kernels. Moved to embree-rs!"
  },
  {
    "name": "wasmer-compiler-cranelift-near",
    "replacement": "wasmer-compiler-llvm",
    "message": "io/crates/v/wasmer-compiler-cranelift. svg)](https://crates. io/crates/wasmer-compiler-cranelift)  This crate contains a compiler implementation based on Cranelift. ## Usage  ```rust use wasmer::{Store, JIT}; use wasmer_compiler_cranelift::Cranelift;  let compiler = Cranelift::new(); // Put it into an engine and add it to the store let store = Store::new(&JIT::new(compiler). engine()); ```  *Note: you can find a [full working example using Cranelift compiler here][example]. *  ## When to use Cranelift  We recommend using this compiler crate **only for development proposes**. For production we recommend using [`wasmer-compiler-llvm`] as it offers a much better runtime speed (50% faster on average). ### Acknowledgments  This project borrowed some of the function lowering from [`cranelift-wasm`]. Please check [Wasmer `ATTRIBUTIONS`] to further see licenses and other attributions of the project. [example]: https://github. com/wasmerio/wasmer/blob/master/examples/compiler_cranelift."
  },
  {
    "name": "cargo-apk",
    "replacement": "xbuild",
    "message": "[Apache 2. 0](https://img. shields. io/badge/License-Apache_2. 0-green. svg)  > **Warning** > This tool is deprecated in favour of [`xbuild`](https://github. com/rust-mobile/xbuild). Tool for creating Android packages. ## Installation  From crates. io:  ```console $ cargo install cargo-apk ```  From source:  ```console $ cargo install --path cargo-apk/ ```  ## Commands  - `build`: Compiles the current package - `run`: Run a binary or example of the local package - `gdb`: Start a gdb session attached to an adb device with symbols loaded  ## Manifest  `cargo` supports the `metadata` table for configurations for external tools like `cargo apk`. Following configuration options are supported by `cargo apk` under `[package."
  },
  {
    "name": "transit_model_procmacro",
    "replacement": "relational_types",
    "message": "**⚠ This crate is not maintained anymore ⚠**  `transit_model_procmacro` =====  The functionality inside `transit_model_procmacro` has been moved into another crate [`relational_types`]. `v0. 1. 1` is the last version of `transit_model_procmacro`. [`relational_types`]: https://crates. io/crates/relational_types"
  },
  {
    "name": "assert_cli",
    "replacement": "assert_cmd",
    "message": "[crates. io](https://img. shields. io/crates/v/assert_cli. svg)][Crates. io]  Note: `assert_cli`, in its current form, is deprecated. The spiritual successor to `assert_cli` is [`assert_cmd`][assert_cmd]. Stayed tuned to [Issue #41][future] for our reinventing `assert_cli` on top of `assert_cmd`. ## License  Licensed under either of   * Apache License, Version 2. 0, ([LICENSE-APACHE](LICENSE-APACHE) or http://www. apache."
  },
  {
    "name": "bincode2",
    "replacement": "Bincode",
    "message": "# Bincode 2  A maintained fork of the now-defunct [Bincode](https://github. com/servo/bincode). <img align=\"right\" src=\". /logo. png\" />  [! [](https://img."
  },
  {
    "name": "rcc",
    "replacement": "saltwater",
    "message": "# This crate is no longer maintained  RCC has been renamed to `saltwater`. If you are looking for the documentation, it is now at <https://docs. rs/saltwater>. ## Why rename rcc? rcc is a great name for a Rust C compiler. Unfortunately, that binary name is already being used by the QT project for their resource compiler: https://doc."
  },
  {
    "name": "separator",
    "replacement": "num-format",
    "message": "io/crates/separator) [! [Build Status](https://travis-ci. org/saghm/rust-separator. svg? branch=master)](https://travis-ci. org/saghm/rust-separator)  rust-separator ==============  **NOTE**: This crate is entirely superseded by the very excellent [num-format](https://crates. io/crates/num-format), which has all the features of `separator` and much, much more. I highly recommend using `num-format` instead of this crate. Formats numbers into strings with thousands separators for readability. It currently supports floating-points (`f32` and `f64`), unsigned integers (`u16`, `u32`, `u64`, `u128`), signed integers (`i16`, `i32`, `i64`, `i128`), and size types (`isize` and `usize`). Usage -----  First, put `separator` as a dependency in your `Cargo."
  },
  {
    "name": "axum-cloudflare-adapter-macros",
    "replacement": "axum-wasm-macros",
    "message": "# DEPRECATED - axum-cloudflare-adapter-macros  This repository has been deprecated in favor of [axum-wasm-macros](https://crates. io/crates/axum-wasm-macros)"
  },
  {
    "name": "exprz-core",
    "replacement": "exprz",
    "message": "# This Package is Deprecated  This package is deprecated in favor of the main [`exprz`](https://crates. io/crates/exprz) crate starting from `v0. 0. 5`. The main package is `no_std` by default."
  },
  {
    "name": "smol-attributes",
    "replacement": "smol-potat",
    "message": "This crate is going to be deprecated. Use [smol-potat](https://crates. io/crates/smol-potat) instead."
  },
  {
    "name": "eo",
    "replacement": "eolib",
    "message": "com/sorokya/eo/actions? query=branch%3Amaster [mit-badge]: https://img. shields. io/badge/license-MIT-blue. svg [mit-url]: https://github. com/sorokya/eo/blob/master/LICENSE  # Archived  Please use the new [eolib](https://github. com/sorokya/eolib-rs) crate  # EO This crate will contain most of the data structures and methods needed to create any kind of program for [Endless Online](https://game. eoserv. net/). ## Modules * *character* - enums for character specific values * *data* - eo primitive types, stream builder and stream writer. * *pubs* - structs, and enums for reading+writing eo pub data files."
  },
  {
    "name": "jja",
    "replacement": "bytefmt",
    "message": "This may be disabled using the new `--sync` commandline argument   or using the environment variable `JJA_SYNC`. - drop `smallvec` crate usage, and remove dependency. - replace `humansize` with `bytefmt` crate. - `jja::abk::traverse_tree` function now returns a `BTreeMap<u64,   Vec<CompactBookEntry>` rather than a `BTreeMap<u64, Vec<BookEntry>` which is a   **breaking change**. Moreover this function now sorts the value vectors using   binary search which makes `abk->bin` both more memory efficient and faster. - `jja::ctg::ByteBoard::from_position` has been replaced with the function   `from_board` which is a **breaking change**. - `jja::ctgbook::CtgBook::process_move` function now utilizes binary search for move   table lookup improving efficiency. `jja::ctg::MOVETABLE`'s `encoding` element has   changed its type from `char` to `u8` which is a **breaking change**. - edit converts CTG books to BIN books with 20% less memory usage using the new compact   `jja::polyglot::CompactBookEntry` data structure. - `jja::abk::PackedSBookMoveEntry` has been renamed to `CompactSBookMoveEntry` which   is a **breaking change**. - drop the unused functions `jja::ctgbook::CtgBook::extract_all{,2}` and the unused   type `jja::ctgbook::CtgTree` both of which are **breaking changes**."
  },
  {
    "name": "gcc",
    "replacement": "cc",
    "message": "**Deprecated** crate, renamed to `cc`  A build-time dependency for Cargo build scripts to assist in invoking the native C compiler to compile native C code into a static archive to be linked into Rust code."
  },
  {
    "name": "axum-password-worker",
    "replacement": "password-worker",
    "message": "# DEPRECATED: Switched the crate name to `password-worker`  Crates IO: https://crates. io/crates/password-worker  GitHub: https://github. com/junderw/password-worker  # axum-password-worker [! [Latest Version](https://img. shields. io/crates/v/axum-password-worker."
  },
  {
    "name": "extendable-enums-helpers",
    "replacement": "extendable-data-helpers",
    "message": "# extendable-enums-helpers ## THIS VERSION OF THE LIBRARY HAS BEEN DEPRECATED It is now solely a wrapper for the new, improved, renamed crate [extendable-data-helpers](https://crates. io/crates/extendable-data-helpers). It works for now, but I do not promise that it always will! You are recommended to move to the new crate instead."
  },
  {
    "name": "fnm",
    "replacement": "Homebrew",
    "message": "`$HOME/. zshrc` for Zsh. For Fish - `$HOME/. config/fish/conf. d/fnm. fish`  `--force-install`  macOS installations using the installation script are deprecated in favor of the Homebrew formula, but this forces the script to install using it anyway. Example:  ```sh curl -fsSL https://fnm. vercel. app/install | bash -s -- --install-dir \". /. fnm\" --skip-shell ```  ### Manually  #### Using Homebrew (macOS/Linux)  ```sh brew install fnm ```  Then, [set up your shell for fnm](#shell-setup)  #### Using Winget (Windows)  ```sh winget install Schniz."
  },
  {
    "name": "axum-sessions",
    "replacement": "tower-sessions",
    "message": "> [! IMPORTANT] > > # **Migration to `tower-sessions`** > > **Development of this crate has moved to [`tower-sessions`](https://github. com/maxcountryman/tower-sessions). ** Please consider migrating. > > Numerous bugs and a significant design flaw with `axum-sessions` are addressed with `tower-sessions`."
  },
  {
    "name": "exempi",
    "replacement": "exempi2",
    "message": "exempi-rs =========  # This crate is deprecated. Use exempi2. Rust binding for Exempi, an XMP library. Exempi can be found at http://libopenraw. freedesktop. org/wiki/Exempi/  Exempi-sys provide unsafe binding to the C API and Exempis-rs a safe Rust API."
  },
  {
    "name": "Boa",
    "replacement": "boa_engine",
    "message": "DEPRECATED. Use the boa_engine crate instead."
  },
  {
    "name": "axum-debug",
    "replacement": "axum-macros",
    "message": "io/crates/axum-debug) [! [Documentation](https://docs. rs/axum-debug/badge. svg)](https://docs. rs/axum-debug)  This is a debugging crate that provides better error messages for [`axum`] framework. **Note:** this crate is deprecated. Use [axum-macros] instead. More information about this crate can be found in the [crate documentation][docs]. ## Safety  This crate uses `#! [forbid(unsafe_code)]` to ensure everything is implemented in 100% safe Rust. ## Minimum supported Rust version  axum-debug's MSRV is 1."
  },
  {
    "name": "wgpu_glyph",
    "replacement": "glyphon",
    "message": "# wgpu_glyph  > [! WARNING] > This crate has been superseded by [`glyphon`]. > > [`glyphon`] has a simpler design that fits better with [`wgpu`]. Furthermore, it is built on top of [`cosmic-text`], which supports many more advanced text use cases. [`glyphon`]: https://github. com/grovesNL/glyphon [`wgpu`]: https://github. com/gfx-rs/wgpu [`cosmic-text`]: https://github."
  },
  {
    "name": "avalanche-sdk",
    "replacement": "avalanche-types",
    "message": "## Deprecated  This crate has been replaced by [avalanche-types](https://crates. io/crates/avalanche-types)."
  },
  {
    "name": "awi",
    "replacement": "window",
    "message": "# [Aldaron's Window Interface](https://crates. io/crates/awi) This project has been discontinued, and replaced with the [window](https://crates. io/crates/window) crate. Contact me at aldaronlau@gmail. com if you wish to reclaim the crate name. ----  Interface through a window to a device. This project is part of [ADI](https://crates."
  },
  {
    "name": "exasol",
    "replacement": "sqlx-exasol",
    "message": "Inspired by [Py-Exasol](https://github. com/exasol/pyexasol). Please find the documentation [here](https://docs. rs/exasol/latest/exasol/). > [! IMPORTANT]   > This crate is no longer maintained and is now archived. > Since `crates. io` does not allow deletion of a crate and this pretty  > much keeps the `exasol` crate name occupied, I am more than willing to  > transfer ownership of the crate to someone representing Exasol. >  > Please reach out if you are interested. >  > Additionally, for an alternative driver, please see [sqlx-exasol](https://github. com/bobozaur/sqlx-exasol)."
  },
  {
    "name": "asn1_der",
    "replacement": "serde_asn1_der",
    "message": "g. `String`). ## What happened to `asn1_der_derive`? Since version 0. 7. 0, the `asn1_der_derive`-crates has been deprecated in favor of [`serde_asn1_der`](https://crates. io/crates/serde_asn1_der). If you have a specific use-case why you cannot use `serde`, let me know; it's probably not that hard to revive `asn1_der_derive` 😊"
  },
  {
    "name": "aes-ctr",
    "replacement": "aes",
    "message": "DEPRECATED: replaced by the `aes` crate"
  },
  {
    "name": "bcc",
    "replacement": "libbpf-rs",
    "message": "# rust-bcc  **Warning! Unmaintained! **  With the advances in other BPF crates in the Rust ecosystem, this crate is no longer actively maintained. We recommend adopting [libbpf-rs](https://crates. io/crates/libbpf-rs)  ## About  Idiomatic Rust bindings for the BPF compiler collection. The goal is to mimic the Python BCC bindings in https://github. com/iovisor/bcc in a Rusty way."
  },
  {
    "name": "apple-web-service-endpoint",
    "replacement": "http-api-client-endpoint",
    "message": "# apple-web-service-endpoint  * [Cargo package](https://crates. io/crates/apple-web-service-endpoint)  ## Dev  ``` cargo test --all-features -- --nocapture ```  Deprecated, Please use [http-api-client-endpoint](https://docs. rs/http-api-client-endpoint) crate."
  },
  {
    "name": "c255b3",
    "replacement": "r255b3",
    "message": "# c255b3: schnorr signatures using curve25519 and blake3. This crate provides [Schnorr signatures][Schnorr] based on [Curve25519] and [Blake3]. Please note that this particular formulation is deprecated. It lives on as [r255b3], based on ristretto255 and blake3 instead, for a cleaner definition and faster public key parsing. [r255b3]: https://crates. io/crates/r255b3 [Schnorr]: https://en. wikipedia. org/wiki/Schnorr_signature [Curve25519]: https://en."
  },
  {
    "name": "c-closures",
    "replacement": "c-closures-build",
    "message": "THIS CRATE IS DEPRECATED, you now only need c-closures-build. General purpose way for Rust closures to cross an FFI boundary into C/C++. Use with `c-closures-build`."
  },
  {
    "name": "dbus",
    "replacement": "dbus-crossroads",
    "message": "* Build method dispatching servers using the `dbus-crossroads` or `dbus-tree` crates. Standard D-Bus interfaces (introspection, properties, object manager) are supported. Breaking changes ----------------  The main dbus crate is fairly mature and the features you need should be all there. Breaking changes can still happen, but not often. * In 0. 9, the `dbus::tree` module moved to the `dbus-tree` crate (but consider migrating to `dbus-crossroads` instead). * If you're currently using 0. 6. x of dbus and want to upgrade to later versions, you can read [changes in dbus-rs 0. 7](dbus/changes-in-0. 7."
  },
  {
    "name": "slice-by-8",
    "replacement": "hud-slice-by-8",
    "message": "io/crates/slice-by-8) [! [License](https://img. shields. io/crates/l/slice-by-8? style=flat-square)](https://choosealicense. com/licenses/mit/)   </h1>      > **WARNING**: This crate is no more maintained, use [hud-slice-by-8](https://crates. io/crates/hud-slice-by-8) instead  </div> --- Rust improved implementation of the [Slice-by-8](http://slicing-by-8. sourceforge. net/) intel algorithm from the paper \"*A Systematic Approach to building High Performance, Software-based, CRC Generators By Intel Researche and Development*\"  Slice-by-8 do not load the standard library (a. k. a `#!"
  },
  {
    "name": "docopt",
    "replacement": "clap",
    "message": "# THIS CRATE IS UNMAINTAINED  This crate is unlikely to see significant future evolution. The primary reason to choose this crate for a new project is if you're specifically interested in using [docopt](http://docopt. org/) syntax for your project. However, the wider docopt project is mostly unmaintained at this point. Consider using [clap](http://docs. rs/clap/) or possibly [structopt](http://docs."
  },
  {
    "name": "apple-web-service-isahc-client",
    "replacement": "http-api-isahc-client",
    "message": "# apple-web-service-isahc-client  * [Cargo package](https://crates. io/crates/apple-web-service-isahc-client)  ## Dev  ``` cargo test --all-features -- --nocapture ```  Deprecated, Please use [http-api-isahc-client](https://docs. rs/http-api-isahc-client) crate."
  },
  {
    "name": "check-versions",
    "replacement": "version-sync",
    "message": "0 passed; 1 failed; 0 ignored; 0 measured; 0 filtered out  error: test failed, to rerun pass '--test check-versions' ```  ## Release History  This is a changelog describing the most important changes per release. ### Version 0. 1. 2 — September 18th, 2017  Identical to version 0. 1. 1, but with better deprecation notices. ### Version 0. 1. 1 — September 18th, 2017  The crate will be renamed to [`version-sync`][version-sync] and this is the last release of the crate under the name `check-versions`. Version 0. 1."
  },
  {
    "name": "fastcrypto",
    "replacement": "ed25519-consensus",
    "message": "com/penumbra-zone/ed25519-consensus) crate. Compliant to [ZIP-215](https://zips. z. cash/zip-0215) that defines the signature validity that is lacking from RFC8032 but critical for consensus algorithms. [`ed25519-dalek`](https://github. com/dalek-cryptography/ed25519-dalek) is fully deprecated due to the recently discovered [Chalkias double pub-key api vulnerability](https://github. com/MystenLabs/ed25519-unsafe-libs). - Secp256k1: ECDSA signatures over the secp256k1 curve. Backed by [Secp256k1 FFI](https://crates. io/crates/secp256k1/0. 23."
  },
  {
    "name": "abstract-os",
    "replacement": "abstract-sdk",
    "message": "# Abstract  This package contains everything you need to interact with Abstract contracts. This package contains: * Abstract contract interface messages * Abstract contract states * Abstract objects (preferably use the re-exported version in [Abstract-SDK](https://crates. io/crates/abstract-sdk))  ## Usage ```rust // Import a contract Exec/Init/Query message abstract_os::contract::ExecuteMsg // Import a contract state lay-out abstract_os::contract::state::STATE // Import a state object abstract_os::object::ProxyValue; ```  ## Messages  Each interface in individually commented. ## States Each state-layout is also individually covered  ## Objects Abstract Objects are used to store information along with helper functions. We provide these as imports so the data can be retrieved externally (using Raw Queries). If you want to use these objects in your own contracts we suggest using the abstract-sdk package."
  },
  {
    "name": "com",
    "replacement": "WinRT",
    "message": ":rotating_light: :rotating_light: :rotating_light: **NOTE** This crate is currently in heavy development as we decide on a stable API. :rotating_light:\r :rotating_light: :rotating_light:\r \r ## What is COM? > [COM](https://docs. microsoft. com/en-us/windows/win32/com/the-component-object-model) is a platform-independent, distributed, object-oriented system for creating binary software components that can interact. COM has been superseded by [WinRT](https://docs. microsoft. com/en-us/windows/uwp/cpp-and-winrt-apis/intro-to-using-cpp-with-winrt) which builds on COM to provide even more guarantees about the binary interface. As such, if you're not sure if you need to use COM, you probably shouldn't. ## Usage\r \r ### Defining a COM interface\r \r To both consume or produce a COM component through an interface, you will first need to generate the Rust representation of said interface. The `interfaces` macro is the main tool for automatically generating this Rust representation."
  },
  {
    "name": "hungarian",
    "replacement": "pathfinding",
    "message": "io/crates/d/hungarian. svg)  **IMPORTANT**: The [`pathfinding`](https://github. com/samueltardieu/pathfinding) crate has a significantly faster [implementation](https://docs. rs/pathfinding/2. 0/pathfinding/kuhn_munkres/index. html) of this algorithm (benchmarks below), uses traits to abstract over cost matrices, and is also better maintained. I recommend using it instead. A simple Rust implementation of the Hungarian (or Kuhn–Munkres) algorithm. Should run in `O(n^3)` time and take `O(m*n)` space, given an `m * n` rectangular matrix (represented as a 1D slice). Derived and modified from [this great explanation](http://csclab. murraystate."
  },
  {
    "name": "typestate-automata",
    "replacement": "typestate",
    "message": "# `typestate-automata`  This crate has been deprecated. The `typestate` crate is now self-sufficient."
  },
  {
    "name": "blob-store",
    "replacement": "blobstore",
    "message": "DEPRECATED: use 'blobstore' instead"
  },
  {
    "name": "tensor-stream",
    "replacement": "tensor-trade-stream",
    "message": "# tensor-stream  Crate for receiving updates from the Tensor API. DEPRECATED. Please check [tensor-trade-stream](https://crates. io/crates/tensor-stream)."
  },
  {
    "name": "sqldiff",
    "replacement": "sqlmo",
    "message": "# Moved to [`sqlmo`](https://github. com/kurtbuilds/sqlmo)"
  },
  {
    "name": "un_algebra",
    "replacement": "alga",
    "message": "*. 0\" ```  ## Stability  `un_algebra` is still under pre-version 1. 0 development, with a number of outstanding design and implementation [issues]. Breaking changes are likely to the crate API. ## Production use  `un_algebra` is intended to support self-study of abstract algebraic structures--it is not optimized for use in a production environment. For production environments I recommend using a more sophisticated library like [alga]. ## Compatibility  `un_algebra` uses 2018 edition features but unfortunately requires Rust _nightly_ as it uses the (experimental) external documentation feature. ## Errors  I'm not a mathematician so my implementation of the various structures and their respective axioms in `un_algebra` may not be strictly correct. Please let me know of any errors. ## Axioms and properties  All `un_algebra` structure traits have associated predicate functions that implement the structure _axioms_. Some structures also have associated predicate functions that implement derived _properties_ of the structure."
  },
  {
    "name": "databento-defs",
    "replacement": "dbn",
    "message": "# DEPRECATED  This crate has been folded into [dbn](https://crates. io/crates/dbn)."
  },
  {
    "name": "rust-graph",
    "replacement": "petgraph",
    "message": "[Build Status](https://travis-ci. org/gsingh93/rust-graph. svg? branch=master)](https://travis-ci. org/gsingh93/rust-graph) ==========  **Note**: This library was created a while ago so I could learn Rust. The API isn't very good and the code isn't very good, so I wouldn't recommend using this library. For a better alternative, see [petgraph](https://github. com/bluss/petulant-avenger-graphlibrary). I will not be adding new code to this library, but I will be maintaining it in the case of bugs/breaking changes. A library for creating and operating on graphs. See the examples folder for usage information."
  },
  {
    "name": "sqlx_wasi",
    "replacement": "dotenvy",
    "message": "rust-lang. org/cargo/reference/profiles. html) of The Cargo Book)  ```toml [profile. dev. package. sqlx-macros] opt-level = 3 ```  <sup>1</sup> The `dotenv` crate itself appears abandoned as of [December 2021](https://github. com/dotenv-rs/dotenv/issues/74) so we now use the `dotenvy` crate instead. The file format is the same. ## Safety  This crate uses `#! [forbid(unsafe_code)]` to ensure everything is implemented in 100% Safe Rust. If the `sqlite` feature is enabled, this is downgraded to `#!"
  },
  {
    "name": "strophe",
    "replacement": "libstrophe-sys",
    "message": "Moved to libstrophe-sys"
  },
  {
    "name": "cookie_store",
    "replacement": "reqwest_cookie_store",
    "message": "rs/cookie_store/badge. svg)](https://docs. rs/cookie_store)  Provides an implementation for storing and retrieving `Cookie`s per the path and domain matching  rules specified in [RFC6265](https://datatracker. ietf. org/doc/html/rfc6265). ## Features  * `preserve_order` - if enabled, iteration order of cookies will be maintained in insertion order. Pulls in an additional dependency on the [indexmap](https://crates. io/crates/indexmap) crate. ## Usage with [reqwest](https://crates. io/crates/reqwest)  Please refer to the [reqwest_cookie_store](https://crates. io/crates/reqwest_cookie_store) crate, which now provides an implementation of the `reqwest::cookie::CookieStore` trait for `cookie_store::CookieStore`."
  },
  {
    "name": "cw-storage",
    "replacement": "cosmwasm-storage",
    "message": "``` ██╗░░░██╗███╗░░██╗███╗░░░███╗░█████╗░██╗███╗░░██╗████████╗░█████╗░██╗███╗░░██╗███████╗██████╗░ ██║░░░██║████╗░██║████╗░████║██╔══██╗██║████╗░██║╚══██╔══╝██╔══██╗██║████╗░██║██╔════╝██╔══██╗ ██║░░░██║██╔██╗██║██╔████╔██║███████║██║██╔██╗██║░░░██║░░░███████║██║██╔██╗██║█████╗░░██║░░██║ ██║░░░██║██║╚████║██║╚██╔╝██║██╔══██║██║██║╚████║░░░██║░░░██╔══██║██║██║╚████║██╔══╝░░██║░░██║ ╚██████╔╝██║░╚███║██║░╚═╝░██║██║░░██║██║██║░╚███║░░░██║░░░██║░░██║██║██║░╚███║███████╗██████╔╝ ░╚═════╝░╚═╝░░╚══╝╚═╝░░░░░╚═╝╚═╝░░╚═╝╚═╝╚═╝░░╚══╝░░░╚═╝░░░╚═╝░░╚═╝╚═╝╚═╝░░╚══╝╚══════╝╚═════╝░  This repository and the cw-storage crate are unmaintained. All features were moved to the cosmwasm-storage package in https://github. com/CosmWasm/cosmwasm. ```  # cw-storage  [! [CircleCI](https://circleci. com/gh/CosmWasm/cw-storage/tree/master."
  },
  {
    "name": "pkcs10",
    "replacement": "x509-cert",
    "message": "DEPRECATED: use the `x509-cert` crate instead"
  },
  {
    "name": "stm32f030-hal",
    "replacement": "stm32f0xx-hal",
    "message": "stm32f030-hal =============  ## DEPRECATED Use [stm32f0xx-hal][] instead. _stm32f030-hal_ contains a hardware abstraction on top of the peripheral access API for the STMicro stm32f030 series microcontroller. It's heavily based on [stm32f042-hal][] by therealprof. This crate implements a partial set of the [embedded-hal][] traits. The following chips are supported, choose via features: - stm32f030f4 - stm32f030k6 - stm32f030c6 - stm32f030c8 - stm32f030r8 - stm32f030cc - stm32f030rc  Some of the implementation was shamelessly adapted from the [stm32f103xx-hal][] crate by Jorge Aparicio. [stm32f042-hal]: https://github."
  },
  {
    "name": "rayon-hash",
    "replacement": "hashbrown",
    "message": "[Travis Status](https://travis-ci. org/rayon-rs/rayon-hash. svg? branch=master)](https://travis-ci. org/rayon-rs/rayon-hash) ! [deprecated](https://img. shields. io/badge/maintenance-deprecated-red. svg)  This crate is now **deprecated**, because the [new implementation in `std`] also exists as the [`hashbrown`] crate with its own \"rayon\" feature. [new implementation in `std`]: https://github. com/rust-lang/rust/pull/58623 [`hashbrown`]: https://crates."
  },
  {
    "name": "mileage",
    "replacement": "icu_collections",
    "message": "# mileage  This crate is deprecated, as there are better ways of accomplishing its contributions now. - `CharRange` is a simple range of codepoints, effectively `std::ops::RangeInclusive<char>`. The std ranges have supported iterating `char` for a long time now. - `CharSet` is a set of codepoints handled as a sorted vector of compact ranges. `icu_collections` provides a `CodePointInversionList`. - `CharTrie` is a static set of codepoints optimized for wide codepoint coverage."
  },
  {
    "name": "zinc64-debug",
    "replacement": "zinc64-emu",
    "message": "io/crates/v/zinc64. svg? maxAge=2592000)](https://crates. io/crates/zinc64)  ** **NOTE: zinc64 crate has been renamed to zinc64-emu** **  ## Overview  zinc64 is a Commodore 64 emulator toolkit \"with batteries included but swappable\". It is designed to be used as a standalone emulator or a library used to build new emulators. The design philosophy allows for each component to be swapped out and replaced by different implementation. Therefore, special considerations were made to model interactions between chips without coupling them together. It implements MOS 6510 CPU, MOS 6526 CIA, MOS 6581 SID, MOS 6567/6569 VIC chipset as well as various devices and peripherals available with C64. ### Story  zinc64 was started as an exercise to learn Rust and explore Commodore 64 hardware in more detail. Somewhere around mid 2016 I needed to feed my 8-bit nostalgia so I picked up a working Commodore 64 (physical version) and started to assemble various accessories required to get software onto it. Soon enough I had picked up a copy of C64 Programmer's Reference Guide and the rest is now history."
  },
  {
    "name": "flate2-crc",
    "replacement": "crc32fast",
    "message": "SIMD acceleration for CRC-32 checksums used in the gzip format  **Deprecated in favor of the `crc32fast` crate**"
  },
  {
    "name": "ffmpeg-sys-next-rk",
    "replacement": "ffmpeg-sys-next",
    "message": "cacheSeconds=3600)](https://crates. io/crates/ffmpeg-sys-next) [! [build](https://github. com/zmwangx/rust-ffmpeg-sys/workflows/build/badge. svg)](https://github. com/zmwangx/rust-ffmpeg-sys/actions)  This is a fork of the abandoned [ffmpeg-sys](https://github. com/meh/rust-ffmpeg-sys) crate. You can find this crate as [ffmpeg-sys-next](https://crates. io/crates/ffmpeg-sys-next) on crates. io. This crate contains low level bindings to FFmpeg."
  },
  {
    "name": "x264-next",
    "replacement": "x264",
    "message": "This crate is deprecated in favor of the x264 crate."
  },
  {
    "name": "rnnoise-sys",
    "replacement": "nnnoiseless",
    "message": "Raw C API of Xiph's rnnoise denoising library. DEPRECATED in favour of the nnnoiseless crate."
  },
  {
    "name": "test-case-derive",
    "replacement": "test-case",
    "message": "# This crate is deprecated. Please use instead [test-case](https://github. com/frondeus/test-case)      Test-case-derive has a couple of issues which I could not clean up due to lack of time. Fortunately, [@frondeus](https://github. com/frondeus) forked it and resolved all of them. The most important differences: 1) The name does not contain missleading `derive` anymore."
  },
  {
    "name": "activitypub",
    "replacement": "ActivityStreams",
    "message": "### This crate is deprecated in favor of using [ActivityStreams](https://crates. io/crates/activitystreams) directly"
  },
  {
    "name": "cbitmap",
    "replacement": "flagset",
    "message": "io/crates/cbitmap) [! [Doc](https://docs. rs/cbitmap/badge. svg)](https://docs. rs/cbitmap)  # cbitmap       > A conventional, compact and core (no_std) bitmap. ## Use cases   You are recommended to use this crate when you want to  maintain a bitmap containing a large but fixed number of bits. Especially, when you are caring memory usage/alignment, for   `cbitmap` wastes almost no places. For example, you may want to manage a set of resources, which  can be described by two states, and a bitmap is fit for you. If you want to maintain a small set of flags, like 2 or 3, we  recommend [flagset](https://crates. io/crates/flagset) instead. The most extensive and mature implementation of bitmap might be   [bitvec](https://crates."
  },
  {
    "name": "send-cell",
    "replacement": "fragile",
    "message": "org/sdroege/send-cell) [! [docs. rs](https://docs. rs/send-cell/badge. svg)](https://docs. rs/send-cell)  **DEPRECATED: This crate is now deprecated in favour of [fragile](https://crates. io/crates/fragile). The `fragile::Fragile` type has essentially the same guarantees and works the same**  An immutable memory location that implements `Send` for types that do not implement it. Enforcing safety with regard to the `Send` trait happens at runtime instead of compile time. Accessing the contained value will call `panic! ` if happening from any thread but the thread on which the value was created on."
  },
  {
    "name": "rnnoise-c",
    "replacement": "nnnoiseless",
    "message": "Rust bindings to Xiph's rnnoise denoising library. DEPRECATED in favour of the nnnoiseless crate."
  },
  {
    "name": "aws-lc",
    "replacement": "aws-lc-sys",
    "message": "Please use `aws-lc-sys`. AWS-LC is a general-purpose cryptographic library maintained by the AWS Cryptography team for AWS and their customers. It іs based on code from the Google BoringSSL project and the OpenSSL project."
  },
  {
    "name": "bytebuffer-rs",
    "replacement": "bytebuffer",
    "message": "### Deprecated\r \r Crate moved to [bytebuffer](https://crates. io/crates/bytebuffer)"
  },
  {
    "name": "srce",
    "replacement": "selfref",
    "message": "# Self-Ref Cell Environment (SRCE)  **Deprecated:** This crate is deprecated in favor of `selfref`'s `srce` module. It was an experiment that's now integrated into `selfref`. It now merely re-exports the `srce` module."
  },
  {
    "name": "sorted-vec2",
    "replacement": "sorted-vec",
    "message": "Maintained successor to the sorted-vec crate"
  },
  {
    "name": "nale",
    "replacement": "libnail",
    "message": "# nale ## DEPRECATED We have decided to restructure this project in a way that includes renaming this crate. Moving forward, you can instead use the `libnail` crate. ## License  Nale is licensed under the BSD-3-Clause license. See `LICENSE` for details. ## Authors  Jack Roddy - jroddy@arizona. edu"
  },
  {
    "name": "instagram-web-api-client",
    "replacement": "http-api-isahc-client",
    "message": "# instagram-web-api-client  * [Cargo package](https://crates. io/crates/instagram-web-api-client)  Deprecated, Please use [http-api-isahc-client](https://docs. rs/http-api-isahc-client) crate."
  },
  {
    "name": "bevy-cross-gizmo",
    "replacement": "Bevy",
    "message": "## Deprecated\r \r This crate is deprecated. The functionality has been integrated into Bevy. Use [`Gizmos::cross`](https://docs. rs/bevy/latest/bevy/prelude/struct. Gizmos. html#method."
  },
  {
    "name": "bls_ckd",
    "replacement": "curv-kzen",
    "message": "Since EIP2333 only proposes the hardened child key derivation, this library has also implemented a method of non-hardened child key derivation inspired by [BIP32](https://github. com/bitcoin/bips/blob/master/bip-0032. mediawiki) to support the current application scenarios. ## Changes  Differences with the original library (<https://github. com/ChainSafe/rust-bls-derivation>) lie in the following:  1. removing the dependency on the unmaintained-for-over-6-years crate [rust-crypto](https://crates. io/crates/rust-crypto); 2. adding the active crate [curv-kzen](https://crates. io/crates/curv-kzen) to support non-hardened BLS child key derivation beyond EIP233; 3. changing the lower limit of the seed entropy from 16 bytes to 32 bytes to be consistent with the current EIP2333 and [draft-irtf-cfrg-bls-signature-05](https://datatracker. ietf."
  },
  {
    "name": "actinium226-librespot",
    "replacement": "librespot",
    "message": "svg)](https://crates. io/crates/librespot)  Current maintainers are [listed on GitHub](https://github. com/orgs/librespot-org/people). # librespot *librespot* is an open source client library for Spotify. It enables applications to use Spotify's service to control and play music via various backends, and to act as a Spotify Connect receiver. It is an alternative to the official and [now deprecated](https://pyspotify. mopidy. com/en/latest/#libspotify-s-deprecation) closed-source `libspotify`. Additionally, it will provide extra features which are not available in the official library. _Note: librespot only works with Spotify Premium. This will remain the case."
  },
  {
    "name": "rand-sequence",
    "replacement": "rand-unique",
    "message": "# rand-sequence (deprecated for rand-unique)  Please note, **this crate has been renamed** in favour of [rand-unique](https://crates. io/crates/rand-unique), which better describes the functionality of this crate. If you would like to take ownership of the `rand-sequence` crate name, please [raise a GitHub issue](https://github. com/hoxxep/rand-unique/issues). ---  Deterministically generate a sequence of unique random numbers. A non-repeating pseudo-random number generator, directly index-able for the nth number in the sequence."
  },
  {
    "name": "terra-asset",
    "replacement": "cw-asset",
    "message": "# `terra-asset`  ### _This repository has been deprecated in favor of the `cw-asset` library:_ [GitHub](https://github. com/mars-protocol/cw-asset), [crates. io](https://crates. io/crates/cw-asset)"
  },
  {
    "name": "rmp-serialize",
    "replacement": "rmp-serde",
    "message": "# RMP - MessagePack for legacy rustc-serialize  This crate is deprecated. Use [rmp-serde](https://lib. rs/rmp-serde) instead."
  },
  {
    "name": "apple-web-service-client",
    "replacement": "http-api-client",
    "message": "# apple-web-service-client  * [Cargo package](https://crates. io/crates/apple-web-service-client)  ## Clients  * [Isahc](. . /apple-web-service-isahc-client/)  ## Dev  ``` cargo test --all-features -- --nocapture ```  Deprecated, Please use [http-api-client](https://docs. rs/http-api-client) crate."
  },
  {
    "name": "awl",
    "replacement": "web-sys",
    "message": "id() => *control_flow = ControlFlow::Exit,             _ => (),         }     }); } ```  Winit is only officially supported on the latest stable version of the Rust compiler. ### Cargo Features  Winit provides the following features, which can be enabled in your `Cargo. toml` file: * `serde`: Enables serialization/deserialization of certain types with [Serde](https://crates. io/crates/serde). * `x11` (enabled by default): On Unix platform, compiles with the X11 backend * `wayland` (enabled by default): On Unix platform, compiles with the Wayland backend  ### Platform-specific usage  #### WebAssembly  Winit supports compiling to the `wasm32-unknown-unknown` target with either a `stdweb` or a `web-sys` backend for use on web browsers. However, please note that **the `stdweb` backend is being deprecated and may be removed in a future release of Winit**. The `web-sys` backend is also more feature complete. On the web platform, a Winit window is backed by a `<canvas>` element. You can either [provide Winit with a `<canvas>` element][web with_canvas], or [let Winit create a `<canvas>` element which you can then retrieve][web canvas getter] and insert it into the DOM yourself. For example code using Winit with WebAssembly, check out the [web example]. For information on using Rust on WebAssembly, check out the [Rust and WebAssembly book]."
  },
  {
    "name": "secretbox",
    "replacement": "crypto_box",
    "message": "# secretbox      ⚠️⚠️⚠️ THIS CRATE IS DEPRECATED, USE `crypto_box` INSTEAD! ⚠️⚠️⚠️  Rust-only implementation of NaCl/Libsodium's secure networking protocol used in multiple network protocols  ## Built with  - `crypto_box` - `x25519_dalek`"
  },
  {
    "name": "roboplc",
    "replacement": "rtsc",
    "message": "service`):  ```ini [Service] # . . . RuntimeDirectory=roboplc RuntimeDirectoryMode=700 ```  ## Migration from 0. 4. x  * Certain `thread-rt` module components have been moved to   [`rtsc`](https://crates. io/crates/rtsc) crate. RoboPLC re-exports them,   adding compatibility with simulated mode. * `thread_rt::set_simulated` has been moved to [`set_simulated`]. * `thread_rt` components `CpuGovernor` and `SystemConfig` have been moved to   [`system`] crate module. * `openssl-vendored` feature has been removed, as [EVA   ICS](https://www."
  },
  {
    "name": "usvg-cli",
    "replacement": "usvg",
    "message": "DEPRECATED! Use usvg instead."
  },
  {
    "name": "ratatui-textarea",
    "replacement": "tui-textarea",
    "message": "ratatui-textarea ============ [! [crate][crates-io-badge]][crate] [! [CI][ci-badge]][ci] [! [CD][cd-badge]][cd]  > [! warning] > This project are no more maintained, [tui-textarea](https://github. com/rhysd/tui-textarea) are now support lastest `ratatui` version  [ratatui-textarea][crate] is a simple yet powerful text editor widget like `<textarea>` in HTML for [ratatui][] (ratatui forked of [tui-textarea][]). Multi-line text editor can be easily put as part of your ratatui application. **Features:**  - Multi-line text editor widget with basic operations (insert/delete characters, auto scrolling, . . ."
  },
  {
    "name": "oasis-test",
    "replacement": "memchain",
    "message": "rs/oasis-test)  A framework for unit testing Oasis executables and integration testing Oasis workflows. For the most part, all you need to know about this crate is that it provides the [`create_account`](https://docs. rs/oasis-test/latest/oasis-test/fn. create_account. html) function. This crate is due to be replaced with `memchain`."
  },
  {
    "name": "opentls",
    "replacement": "async-native-tls",
    "message": "rs/opentls\">       API Docs     </a>     <span> | </span>     <a href=\"https://github. com/prisma/opentls/releases\">       Releases     </a>     <span> | </span>     <a href=\"https://github. com/prisma/opentls/blob/main/. github/CONTRIBUTING. md\">       Contributing     </a>   </h3> </div>  ## About  Implementing TLS with OpenSSL either asynchronously or as a synchronous version. If looking for a good TLS implementation, it is highly recommended to use either [native-tls](https://crates. io/crates/native-tls) for synchronous connections or [async-native-tls](https://crates. io/crates/async-native-tls). Use this crate only if you cannot rely on the libraries provided by the operating system, and have some special needs such as always linking to OpenSSL statically. In general, you probably should not use this crate. The API is taken directly from the crates mentioned above, so opentls `sync_io` module should be a drop-in replacement to `native-tls` and `async_io` to `async-native-tls` accordingly."
  },
  {
    "name": "passablewords",
    "replacement": "zxcvbn",
    "message": "# passablewords  ---  # DEPRECATED  I'm not planning on maintaining this any longer. Please just use [zxcvbn](https://github. com/shssoichiro/zxcvbn-rs) instead. ---  `passablewords` is a password validation library which checks a password against a million of the most common as well as it's ability to be cracked. If you're asking why use `passablewords` over [`zxcvbn`](https://github. com/shssoichiro/zxcvbn-rs), it's because `passablewords` checks a password against 1,000,000 of the most common passwords."
  },
  {
    "name": "protobuf-codegen-pure3",
    "replacement": "protobuf-codegen",
    "message": "\"); } ```  And in `Cargo. toml`:  ```toml [build-dependencies] protobuf-codegen-pure = \"2\" ```  It is advisable that `protobuf-codegen-pure` build-dependecy version be the same as `protobuf` dependency. The alternative is to use [`protoc-rust`](https://docs. rs/protoc-rust/=2) crate which uses `protoc` command for parsing (so it uses the same parser Google is using in their protobuf implementations). # Version 2  This is documentation for version 2 of the crate. In version 3, this API is moved to [`protobuf-codegen` crate](https://docs. rs/protobuf-codegen/%3E=3. 0. 0-alpha). <! -- cargo-sync-readme end -->"
  },
  {
    "name": "lottie2gif",
    "replacement": "lottieconv",
    "message": "DEPRECATED - use lottieconv crate instead"
  },
  {
    "name": "aes-soft",
    "replacement": "aes",
    "message": "DEPRECATED: replaced by the `aes` crate"
  },
  {
    "name": "osrs-buffer",
    "replacement": "osrs-bytes",
    "message": "[Discord](https://img. shields. io/discord/926860365873184768? color=5865F2)](https://discord. gg/CcTa7TZfSc)\r \r A buffer for Oldschool Runescape data types. ## Deprecated\r \r This crate has been deprecated in favor of [osrs-bytes](https://github. com/osrs-rs/osrs-bytes). `osrs-buffer` will not be updated anymore. ## Installation\r \r Add this crate as a dependency to your `Cargo. toml` file. ```toml\r [dependencies]\r osrs-buffer = \"0."
  },
  {
    "name": "should_error",
    "replacement": "should_match",
    "message": "# `should_error`  > **NOTE**: This crate is deprecated in favor of [`should_match`](https://crates. io/crates/should_match). Pass a test if an error is returned. ## Setup  This crate is primarily intended for use in tests, so add it to your `dev-dependencies` instead of `dependencies`:  ```shell cargo add --dev should_error ```  Recommended to work with [`macro_rules_attr`](https://crates. io/crates/macro_rules_attr):  ```shell cargo add --dev macro_rules_attr should_error ```  ## Usage  ### With `macro_rules_attr`  Simply `apply` the `should_error` macro (the order does not matter):  ```rust use macro_rules_attr::apply; use should_error::should_error;  // This test will pass #[apply(should_error)] #[test] fn test_apply_first() -> Result<(), &'static str> {     Err(\"error\") }  // This test will also pass #[test] #[apply(should_error)] fn test_apply_second() -> Result<(), &'static str> {     Err(\"error\") } ```  To further specify the pattern that's expected to match, use the `expected` argument:  ```rust # use macro_rules_attr::apply; # use should_error::should_error; # #[test] #[apply(should_error, expected = Err(\"error\"))] fn test_with_error_expected() -> Result<(), &'static str> {     Err(\"error\") } ```  You can also match anything else other than an `Err`:  ```rust # use macro_rules_attr::apply; # use should_error::should_error; # #[allow(dead_code, reason = \"Only used in tests\")] enum MyEnum {     One,     Two, }  #[test] #[apply(should_error, expected = MyEnum::One)] fn test_with_arbitrary_expected() -> MyEnum {     MyEnum::One } ```  ### Directly  Wrap your tests with `should_error! ` (note that the `#[test]` attribute must be wrapped inside the macro):  ```rust use should_error::should_error;  // This test will pass should_error!"
  },
  {
    "name": "smartnoise_validator",
    "replacement": "OpenDP",
    "message": "**Notice**: SmartNoise-Core is deprecated. Please migrate to the OpenDP library: - [OpenDP Rust Crate](https://crates. io/crates/opendp) - [OpenDP GitHub Repo](https://github. com/opendp/opendp/)  ----------------------------------------------------  ## SmartNoise Core: Differential Privacy Library Validator   The validator is a sub-project of [SmartNoise-Core](https://github. com/opendp/smartnoise-core). See also the accompanying [SmartNoise SDK repository](https://github."
  },
  {
    "name": "ch32v-rt",
    "replacement": "qingke-rt",
    "message": "DEPRECATED: use qingke-rt instead"
  },
  {
    "name": "lmake_version_from_date",
    "replacement": "cargo-auto",
    "message": "# lmake_version_from_date    **🔴OBSOLETE, 🔴DEPRECATED, 🔴DEFUNCT! It was replaced by the crate [cargo-auto](https://crates. io/crates/cargo-auto)**   \\ \\ \\  [comment]: # (lmake_readme cargo. toml data start)  version: 0. 3. 37  date: 2020-05-21 authors: Luciano Bestia   **In cargo."
  },
  {
    "name": "pimalaya-shellexpand",
    "replacement": "shellexpand-utils",
    "message": "**This crate is no longer maintained**, because it has been renamed `shellexpand-utils`. https://git. sr. ht/~soywod/pimalaya"
  },
  {
    "name": "mobc-nebula-graph",
    "replacement": "mobc-nebula",
    "message": "# mobc-nebula-graph  * [Cargo package](https://crates. io/crates/mobc-nebula-graph)  Archived, Rename to [mobc-nebula](https://crates. io/crates/mobc-nebula)"
  },
  {
    "name": "rpsl-parser",
    "replacement": "rpsl-rs",
    "message": "# Deprecated  rpsl-parser was renamed to [rpsl-rs](https://crates. io/crates/rpsl-rs), this crate is now deprecated."
  },
  {
    "name": "pact_verifier_ffi",
    "replacement": "pact_ffi",
    "message": "Pact verifier FFI for provider pact verification [DEPRECATED, replaced with pact_ffi]"
  },
  {
    "name": "adi_speaker",
    "replacement": "Wavy",
    "message": "This project has moved to [Wavy](https://crates. io/crates/wavy)."
  },
  {
    "name": "jujutsu",
    "replacement": "jj-cli",
    "message": "This crate has been replaced by the jj-cli crate. Please upgrade to jj-cli version 0. 8+, or specify jujutsu of version \"=0. 7. 0\" if you need to compile an obsolete version."
  },
  {
    "name": "libtwitch-rs",
    "replacement": "Helix",
    "message": "(r. name, user. name),\r         Err(r) => { println! (\"{:? }\", r); assert! (false); }\r     }\r }\r ```\r \r # Supported API versions\r \r __Important Note:__ Kraken is deprecated and Helix (the new API version) \r is out of scope of this repository currently. Endpoints         | Kraken/v5          | \r :----------------:|:------------------:|\r Analytics         | :heavy_minus_sign: |\r Bits              | :heavy_check_mark: |\r Channels          | :heavy_check_mark: |\r Chat              | :heavy_check_mark: |\r Clips             | :heavy_check_mark: |\r Collections       | :heavy_check_mark: |\r Entitlements      | :heavy_minus_sign: |\r Games             | :heavy_check_mark: |\r Ingests           | :heavy_check_mark: |\r Moderation        | :heavy_minus_sign: |\r Search            | :heavy_check_mark: |\r Streams           | :heavy_check_mark: |\r Subscriptions     | :heavy_minus_sign: |\r Tags              | :heavy_minus_sign: |\r Teams             | :heavy_check_mark: |\r Users             | :heavy_check_mark: |\r Videos            | :heavy_check_mark: |\r Webhooks          | :heavy_minus_sign: |\r \r \r # Links\r ## Helpful Documentation\r - [Token test, infos incl. Channel_ID](https://codepen. io/Alca/pen/VwwazOK)\r - [Achieve Authorization for a bot](http://web. archive. org/web/20191016034229/https://d-fischer."
  },
  {
    "name": "rlua",
    "replacement": "mlua",
    "message": "# rlua -- High level bindings between Rust and Lua  *rlua is now deprecated in favour of mlua: see below for migration information*  `rlua` is now a thin transitional wrapper around [`mlua`](https://github. com/mlua-rs/mlua); it is recommended to use mlua directly for new projects and to migrate to it when convenient. `mlua` was a fork of `rlua` which has recently seen more development activity and new features. ## Migration  `rlua` 0. 20 includes some utilities to help transition to `mlua`, but is otherwise just re-exporting `mlua` directly. The main changes are:  * In `mlua`, `Lua::context()` is no longer necessary."
  },
  {
    "name": "nebula-graph-fbthrift-meta",
    "replacement": "nebula-fbthrift-meta",
    "message": "# nebula-graph-fbthrift-meta  * [Cargo package](https://crates. io/crates/nebula-graph-fbthrift-meta)  Archived, Rename to [nebula-fbthrift-meta](https://crates. io/crates/nebula-fbthrift-meta)"
  },
  {
    "name": "macchina-read",
    "replacement": "libmacchina",
    "message": "This crate has moved to [libmacchina](https://github. com/Macchina-CLI/libmacchina)."
  },
  {
    "name": "resvg-qt",
    "replacement": "resvg",
    "message": "[DEPRECATED] use the resvg crate instead."
  },
  {
    "name": "actix-telepathy",
    "replacement": "Actix-Telepathy",
    "message": "Each actor is a computational entity with strictly private state and behavior. Actors communicate via asynchronous messaging and, in this way, require neither shared memory nor locking. This makes the actor model suitable not only for parallel programming but also for distributed applications engineering. The Rust programming language is a statically-typed language that gained a lot of attention in the past years due to its efficient, economical and safe memory management. To ease the development of parallel applications, several actor model frameworks have been built for Rust. However, no actively maintained Rust actor framework provides the necessary features to write distributed applications. For this reason, we propose an extension for Rust’s Actix library, called Actix-Telepathy, that enables remote messaging and offers clustering support. It allows developers to setup remote actors that can communicate across a computer network with the help of a straight forward and easy to understand interface. Our evaluation demonstrates that Actix-Telepathy competes well in remote messaging performance and memory consumption with other actor libraries, such as Scala’s popular Akka library. },     booktitle = {Proceedings of the 10th ACM SIGPLAN International Workshop on Reactive and Event-Based Languages and Systems},     pages = {14–24},     numpages = {11},     keywords = {Distributed Computing, Rust, Actor Model},     location = {Cascais, Portugal},     series = {REBLS 2023} } ```"
  },
  {
    "name": "javy-apis",
    "replacement": "Javy",
    "message": "# This crate is deprecated. Javy APIs have been folded into the [Javy crate](https://crates. io/crates/javy)"
  },
  {
    "name": "microasync-util",
    "replacement": "MicroAsync-RT",
    "message": "DEPRECATED, use [MicroAsync-RT](https://crates. io/crates/microasync-rt) instead! ================================================================================  # microasync-util  [MicroAsync](https://crates. io/crates/microasync) ([GitHub](https://github. com/tudbut/microasync)) does not have many features, no IO support, no proper runtime. MicroAsync-Util provides such things: - A small runtime with the ability to add tasks (`no_std` supported) - A small timer - AsyncIO for Files, TCP, and UDP  ## QueuedRuntime  QueuedRuntime is a very small async runtime with support for adding more tasks while it is running."
  },
  {
    "name": "pimalaya-secret",
    "replacement": "secret-lib",
    "message": "**This crate is no longer maintained**, because it has been renamed [secret-lib](https://crates. io/crates/secret-lib). https://git. sr. ht/~soywod/pimalaya"
  },
  {
    "name": "rl_localtime",
    "replacement": "tz-rs",
    "message": "# Rust-locked localtime implementation  ## Crate abandoned  **This crate is abandoned** because there's a pure Rust implemenation - [`tz-rs`](https://docs. rs/tz-rs/). The code is up for archival purposes only. ## About  **Warning:** this crate is currently proof-of-concept and it wasn't deeply audited! While I believe this fixes the unsoundness, I may have introduced other bug(s). Use at your own risk or, better, help improve it!"
  },
  {
    "name": "rubble-nrf52810",
    "replacement": "rubble-nrf52",
    "message": "DEPRECATED - use `rubble-nrf52` instead"
  },
  {
    "name": "imxrt1062-fcb-gen",
    "replacement": "imxrt-boot-gen",
    "message": "Generate Firmware Configuration Block (FCB) for iMXRT1062 processors in Rust build scripts. This crate is unmaintained. Consider using [imxrt-boot-gen](https://github. com/imxrt-rs/imxrt-boot-gen), which provides a similar API and works across iMXRT processor variants. Formerly part of the teensy4-rs project."
  },
  {
    "name": "atsamd21j18a",
    "replacement": "atsamd21j",
    "message": "# This crate has been replaced by [https://crates. io/crates/atsamd21j](https://crates. io/crates/atsamd21j)"
  },
  {
    "name": "atsamd11c14a",
    "replacement": "atsamd11c",
    "message": "# This crate has been replaced by [https://crates. io/crates/atsamd11c](https://crates. io/crates/atsamd11c)"
  },
  {
    "name": "async-ssh2",
    "replacement": "async-ssh2-lite",
    "message": "# async-ssh2-rs (deprecated)  PLEASE USE https://crates. io/crates/async-ssh2-lite INSTEAD. [! [Build Status](https://travis-ci. com/spebern/async-ssh2. svg?"
  },
  {
    "name": "riscv-semihosting",
    "replacement": "semihosting",
    "message": "# About the [`semihosting`] crate  `riscv-semihosting` provides a simple semihosting API that matches [`cortex-m-semihosting`]. This allows a simple port from Cortex-M applications to RISC-V applications. However, the [`semihosting`] crate presents a more advanced interface that is compatible for RISC-V as well as other architectures (e. g. , ARM or MIPS). While `riscv-semihosting` is a good starting point for developing semihosted applications, **we recommend using the [`semihosting`] crate. **   # Minimum Supported Rust Version (MSRV)  This crate is guaranteed to compile on stable Rust 1. 60. 0 and up. It **won't** compile with older versions. ## License  Copyright 2018-2023 [RISC-V team][team]  Permission to use, copy, modify, and/or distribute this software for any purpose with or without fee is hereby granted, provided that the above copyright notice and this permission notice appear in all copies."
  },
  {
    "name": "lockpool",
    "replacement": "lockable",
    "message": "com/smessmer/lockpool/blob/master/LICENSE-APACHE) [! [codecov](https://codecov. io/gh/smessmer/lockpool/branch/master/graph/badge. svg? token=FRSBH7YYA9)](https://codecov. io/gh/smessmer/lockpool)  # lockpool  **This library is not maintained anymore. Please use the [lockable](https://crates. io/crates/lockable) crate instead. **  **It offers a [LockPool](https://docs. rs/lockable/latest/lockable/struct. LockPool."
  },
  {
    "name": "iterwindows",
    "replacement": "itermore",
    "message": "[Build Status](https://badgers. space/github/checks/rossmacarthur/itermore? label=build)](https://github. com/rossmacarthur/itermore/actions/workflows/build. yaml)  This crate provides an iterator adapter to iterate over all contiguous windows of length `N`. ### Deprecated  This crate is deprecated in favour of the [`itermore`] crate and it currently just re-exports types from there. The following dependency definition is the equivalent of using this crate. ```toml # Cargo. toml  [dependencies] itermore = { version = \". . ."
  },
  {
    "name": "icu_segmenter_lstm",
    "replacement": "icu_segmenter",
    "message": "This ICU4X crate is deprecated. Its functionality can now be found in the [`icu_segmenter`](https://docs. rs/icu_segmenter) crate."
  },
  {
    "name": "dbus-tree",
    "replacement": "dbus-crossroads",
    "message": "* Build method dispatching servers using the `dbus-crossroads` or `dbus-tree` crates. Standard D-Bus interfaces (introspection, properties, object manager) are supported. Breaking changes ----------------  The main dbus crate is fairly mature and the features you need should be all there. Breaking changes can still happen, but not often. * In 0. 9, the `dbus::tree` module moved to the `dbus-tree` crate (but consider migrating to `dbus-crossroads` instead). * If you're currently using 0. 6. x of dbus and want to upgrade to later versions, you can read [changes in dbus-rs 0. 7](dbus/changes-in-0. 7."
  },
  {
    "name": "arkmsm",
    "replacement": "ark-msm",
    "message": "Moved to https://crates. io/crates/ark-msm"
  },
  {
    "name": "lmake_cargo_toml_to_md",
    "replacement": "cargo-auto",
    "message": "[comment]: # (lmake_md_to_doc_comments segment start A)  # lmake_cargo_toml_to_md  [comment]: # (lmake_cargo_toml_to_md start)  **🔴OBSOLETE, 🔴DEPRECATED, 🔴DEFUNCT! It was replaced by the crate [cargo-auto](https://crates. io/crates/cargo-auto)**    \\ \\ \\ **Includes Cargo. toml data into md. **   ***[repo](https://github. com/LucianoBestia/lmake_cargo_toml_to_md); version: 2020."
  },
  {
    "name": "aws-lc-rust",
    "replacement": "aws-lc-sys",
    "message": "Please use aws-lc-sys: https://crates. io/crates/aws-lc-sys. AWS-LC is a general-purpose cryptographic library maintained by the AWS Cryptography team for AWS and their customers. It іs based on code from the Google BoringSSL project and the OpenSSL project."
  },
  {
    "name": "apple-errnos",
    "replacement": "bsd-errnos",
    "message": "# apple-errnos  Moved to [bsd-errnos](https://github. com/shurizzle/bsd-errnos)."
  },
  {
    "name": "jerk-test",
    "replacement": "jerk",
    "message": "# **jerk**-test: **J**ava **E**mbedding **R**ust **K**it - Unit Testing\r \r This crate is deprecated and has been merged into `jerk`"
  },
  {
    "name": "nebula-graph-fbthrift-storage",
    "replacement": "nebula-fbthrift-storage",
    "message": "# nebula-graph-fbthrift-storage  * [Cargo package](https://crates. io/crates/nebula-graph-fbthrift-storage)  Archived, Rename to [nebula-fbthrift-storage](https://crates. io/crates/nebula-fbthrift-storage)"
  },
  {
    "name": "nebula-graph-fbthrift-raftex",
    "replacement": "nebula-fbthrift-raftex",
    "message": "# nebula-graph-fbthrift-raftex  * [Cargo package](https://crates. io/crates/nebula-graph-fbthrift-raftex)  Archived, Rename to [nebula-fbthrift-raftex](https://crates. io/crates/nebula-fbthrift-raftex)"
  },
  {
    "name": "chan-signal",
    "replacement": "crossbeam-channel",
    "message": "## **This crate has reached its end-of-life and is now deprecated. **  The intended successor of the `chan` crate is the [`crossbeam-channel`](https://github. com/crossbeam-rs/crossbeam/tree/master/crossbeam-channel) crate. Its API is strikingly similar, but comes with a much better `select! ` macro, better performance, a better test suite and an all-around better implementation. If you were previously using this crate for signal handling, then it is simple to reproduce a similar API with `crossbeam-channel` and the [`signal-hook`](https://github."
  },
  {
    "name": "myhumantime",
    "replacement": "humantime-serde",
    "message": ". bench:          36 ns/iter (+/- 2) test rfc3339_humantime_seconds  . . . bench:          24 ns/iter (+/- 1)  test result: ok. 0 passed; 0 failed; 0 ignored; 6 measured; 0 filtered out ```  See [humantime-serde] for serde integration (previous crate [serde-humantime] looks unmaintained). [serde-humantime]: https://docs. rs/serde-humantime/0. 1. 1/serde_humantime/ [humantime-serde]: https://docs. rs/humantime-serde  License =======  Licensed under either of  * Apache License, Version 2."
  },
  {
    "name": "liquid-dsp-bindings",
    "replacement": "liquid-dsp-bindings-sys",
    "message": "These are the high-level Rust bindings for liquid-dsp (liquidsdr. org) - This repository was previously the lower level bindings. They have been moved to the liquid-dsp-bindings-sys crate to better keep with the standards for binding crates."
  },
  {
    "name": "redid",
    "replacement": "CVT",
    "message": "3 Support   - [ ] Color Point Descriptor   - [ ] Standard Timing Descriptor - [x] Edid 1. 4 Support   - [ ] Color Point Descriptor   - [ ] Standard Timing Descriptor   - [ ] Color Management Descriptor   - [ ] CVT 3 byte Timing Codes  ### Specific Features  - [ ] Extensions   - [ ] Video Timing Block Extension (VTB-EXT)   - [ ] Display Information Extension (DI-EXT)   - [ ] Localized String Extension (LS-EXT)   - [ ] Digital Packet Video Link Extension (DPVL-EXT)   - [ ] CEA-861 Series Timing Extensions  ### Type Safety  - [ ] Manufacturer Name   - [x] Mandatory   - [x] 3 Characters   - [x] ASCII Only   - [ ] Upper Case Only  - [ ] Product Code   - [ ] Mandatory   - [ ] 2 bytes  - [ ] Serial Number   - [ ] 4 bytes  - [ ] Date   - [ ] Mandatory   - [ ] Year is higher than or equal to 1990   - [ ] EDID 1. 3     - [ ] Week is between 1 and 53   - [ ] EDID 1. 4     - [ ] Week is between 1 and 54  - [ ] Basic Display Parameters and Features   - [ ] Mandatory   - [ ] Video Input Definition     - [ ] Mandatory       - [ ] Analog         - [ ] Serrations on the vsync pulse are required when composite sync or sync on green   - [ ] Display Size     - [ ] Mandatory     - [ ] 0x00, 0x00 is allowed for undefined size   - [ ] Gamma     - [ ] Mandatory   - [ ] Feature Support     - [ ] Mandatory     - [ ] Bits 3 and 4 must be consistent with bit 7 at 0x14     - [ ] SRGB       - [ ] If set, the color information in the Chromaticity Coordinates must match       - [ ] Signaled, but the Gamma isn't set to 2. 2       - [ ] Not signaled, but the Chromaticities match SRGB     - [ ] EDID 1. 4       - [ ] Suspend is deprecated       - [ ] Standby is deprecated     - [ ] Preferred Timing       - [ ] EDID 1. 3         - [ ] Required  - [ ] Display XY Chromaticity Coordinates   - [ ] Mandatory  - [ ] Established Timings   - [ ] Required if Plug & Play   - [ ] 640x480@60Hz is required if Plug & Play  - [ ] Standard Timings   - [ ] Horizontal Addressable Pixels is between 256 and 2288, in increment of 8 pixels   - [ ] Field Refresh Rate is between 60 and 123Hz   - [ ] Unused Timings mut be set to 0x01, 0x01  - [ ] Descriptors   - [ ] Detailed Descriptors must be first and is preferred mode   - [ ] EDID 1. 3     - [ ] Display Product Name is required     - [ ] Display Range Limits is required   - [ ] EDID 1. 4     - [ ] Display Range Limits is required if continuous frequency, recommended otherwise     - [ ] Display Product Name is recommended   - [ ] Detailed Timings     - [ ] Display Size is set (in the base block), but Image size isn't     - [ ] Display Size is smaller than the image size     - [ ] Image Size is set but the Display Size isn't     - [ ] Frequency is between 10 and 655,350kHz     - [ ] Horizontal Addressable, Blanking and Vertical Addressable are between 0 and 4095 pixels     - [ ] HFP and Hsync are between 0 and 1023 pixels     - [ ] VFP, Vsync are between 0 and 63  lines     - [ ] Hsync / vsync are between 0 and 4095 mm     - [ ] Right / Left and Top / Bottom Borders are between 0 and 255 pixels / lines     - [ ] Can be set to 0 if undefined   - [ ] Display Range Limits     - [ ] GTF       - [ ] Minimum Horizontal Rate is higher that Maximum Horizontal Rate       - [ ] Minimum Vertical Rate is higher than Maximum Vertical Rate       - [ ] Default GTF         - [ ] Byte 11 is set to 0x0a         - [ ] Bytes 12-17 are set to 0x20       - [ ] Secondary GTF         - [ ] Byte 11 is set to 0x00         - [ ] Start Frequency is less than the highest P/N Frequency       - [ ] EDID 1. 4         - [ ] Vertical Rates between 1 and 510 Hz         - [ ] Horizontal Rates between 1 and 510kHz         - [ ] GTF is deprecated in favor of CVT         - [ ] Video Timing Support           - [ ] Descriptor required if bit 0 in 0x18 is set           - [ ] Default GTF bit can be set only if bit 0 in 0x18 is set           - [ ] Secondary GTF bit can be set only if bit 0 in 0x18 is set           - [ ] CVT Supported bit can be set only if bit 0 in 0x18 is set           - [x] Range Limits Only can only bet set for EDID 1. 4           - [x] CVT Supported can only bet set for EDID 1."
  },
  {
    "name": "crossterm_input",
    "replacement": "crossterm",
    "message": "! [Lines of Code][s7] [! [Latest Version][s1]][l1] [! [MIT][s2]][l2] [! [docs][s3]][l3]  [! [Join us on Discord][s5]][l5]\r \r # Crossterm Input\r \r **The `crossterm_input` crate is deprecated and no longer maintained. The GitHub repository will\r be archived soon. All the code is being moved to the `crossterm`\r [crate](https://github. com/crossterm-rs/crossterm). You can learn more in the\r [Merge sub-crates to the crossterm crate](https://github. com/crossterm-rs/crossterm/issues/265)\r issue."
  },
  {
    "name": "hyper-server",
    "replacement": "axum",
    "message": "## Minimum Supported Rust Version  hyper-server's MSRV is `1. 65`. ## Safety  This crate uses `#! [forbid(unsafe_code)]` to ensure everything is implemented in 100% safe Rust. ## License  This project is licensed under the [MIT license](LICENSE). ## Why fork  This project is based on the great work in [axum-server], which is no longer actively maintained. The rationale for forking is that we use this for critical infrastructure and want to be able to extend the crate and fix bugs as needed. [axum-server]: https://github. com/programatik29/axum-server [axum]: https://crates. io/crates/axum [hyper]: https://crates. io/crates/hyper [rustls]: https://crates."
  },
  {
    "name": "cargo-packager-config",
    "replacement": "cargo-packager",
    "message": "# DEPRECATED  The config is now available in the main crate [`cargo-packager`](https://docs. rs/cargo-packager/latest/cargo-packager/struct. Config. html) and this crate has been yanked and deprecated. # cargo-packager-config  Config types for [`cargo-packager`](. ."
  },
  {
    "name": "aspotify",
    "replacement": "rspotify",
    "message": "Deprecated in favour of rspotify"
  },
  {
    "name": "num-macros",
    "replacement": "num-derive",
    "message": "deprecated -- use num-derive"
  },
  {
    "name": "rust_process_interface_library",
    "replacement": "ssvm_process_interface",
    "message": "# This Repository Is Deprecated  The library name is renamed to [ssvm_process_interface](https://crates. io/crates/ssvm_process_interface). Please follow the new crate for future versions. # Rust Process Interface Library  A Rust library that provides Rust to WebAssembly developers with syntax for running commands functionality when their Wasm is being executed on [SecondState's SSVM](https://github. com/second-state/SSVM). From a high-level overview here, we are essentially building a process interface that will allow the native operating system (which SSVM is running on) to play a part in the runtime execution."
  },
  {
    "name": "cargo-junit",
    "replacement": "cargo-test-junit",
    "message": "Converts cargo test output into a junit report. Hard forked from cargo-test-junit, after it went unmaintained with critical bugs."
  },
  {
    "name": "python_mixin",
    "replacement": "external_mixin",
    "message": "Deprecated in favour of `external_mixin`. Use Python to generate your Rust, right in your Rust."
  },
  {
    "name": "once_mut",
    "replacement": "lock-free-static",
    "message": "**Note: `once_mut` is now a part of [`lock-free-static`](https://crates. io/crates/lock-free-static) crate and no longer maintained separately. **  # once_mut  [! [Crates. io][crates_badge]][crates] [! [Docs. rs][docs_badge]][docs] [!"
  },
  {
    "name": "macro_state",
    "replacement": "macro_magic",
    "message": "# macro_state  ### DEPRECATED This crate is built upon some underlying UB (undefined behavior) in the rust compiler and is very likely to break in random circumstances outside of your control. For a safer option that allows for similar behavior, please consider using the [outer macro pattern](https://youtu. be/aEWbZxNCH0A? si=pjP2rFVyV3SotIW-&t=2284) combined with my [macro_magic](https://crates. io/crates/macro_magic) crate. `macro_state` is now in archive mode and will no longer be actively updated."
  },
  {
    "name": "cortex-m-rtfm",
    "replacement": "cortex-m-rtic",
    "message": "# DEPRECATED use `cortex-m-rtic` instead - Real Time For the Masses  **RTFM has gone through a name change as per RFC https://github. com/rtic-rs/rfcs/pull/33 and the name will now be Real-Time Interrupt-driven Concurrency (RTIC). ** A concurrency framework for building real time systems. ## Features  - **Tasks** as the unit of concurrency [^1]. Tasks can be *event triggered*   (fired in response to asynchronous stimuli) or spawned by the application on   demand. - **Message passing** between tasks."
  },
  {
    "name": "bracket_parse",
    "replacement": "Gobble",
    "message": "simple parser for bracketed lists with quoted and unquoted strings -- Now deprecated, favouring Gobble instead which can do everything this does much tidier"
  },
  {
    "name": "samotop-model",
    "replacement": "samotop-core",
    "message": "Deprecated. Use samotop-core"
  },
  {
    "name": "nightly-async-nats",
    "replacement": "async-nats",
    "message": "[Build Status](https://github. com/nats-io/nats. rs/workflows/Rust/badge. svg)](https://github. com/nats-io/nats. rs/actions)  Legacy *synchronous* client that supports:  * Core NATS * JetStream API * JetStream Management API * Key Value Store * Object Store  This client will be deprecated soon, when `async-nats` reaches version 1. 0, with a sync wrapper around it. ### Documentation  Please refer each crate docs for API reference and examples. ## Feedback  We encourage all folks in the NATS and Rust ecosystems to help us improve this library. Please open issues, submit PRs, etc. We're available in the `rust` channel on [the NATS slack](https://slack."
  },
  {
    "name": "azul-winit",
    "replacement": "web-sys",
    "message": "### Cargo Features\r \r Winit provides the following features, which can be enabled in your `Cargo. toml` file:\r * `serde`: Enables serialization/deserialization of certain types with [Serde](https://crates. io/crates/serde). * `x11` (enabled by default): On Unix platform, compiles with the X11 backend\r * `wayland` (enabled by default): On Unix platform, compiles with the Wayland backend\r * `mint`: Enables mint (math interoperability standard types) conversions. ### Platform-specific usage\r \r #### WebAssembly\r \r Winit supports compiling to the `wasm32-unknown-unknown` target with either a\r `stdweb` or a `web-sys` backend for use on web browsers. However, please note\r that **the `stdweb` backend is being deprecated and may be removed in a future\r release of Winit**. The `web-sys` backend is also more feature complete. On the web platform, a Winit window is backed by a `<canvas>` element. You can\r either [provide Winit with a `<canvas>` element][web with_canvas], or [let Winit\r create a `<canvas>` element which you can then retrieve][web canvas getter] and\r insert it into the DOM yourself. For example code using Winit with WebAssembly, check out the [web example]. For\r information on using Rust on WebAssembly, check out the [Rust and WebAssembly\r book]."
  },
  {
    "name": "oaf",
    "replacement": "restore",
    "message": "). * `status` uses a short format. When determining whether a file is modified,   it (effectively) compares the working tree to HEAD (10. ). Note: if you just want the new commands, not the changed behaviour, see \"New commands as Git external commands\" above. ## Obsolete commands * `checkout` is superseded by `switch` or `restore`. ## Unchanged commands All commands not listed by `oaf help` will automatically fall through to `git`. So `oaf write-tree -h` is the same as `git write-tree -h`. # Extensions Because `oaf` falls through to `git`, `oaf` will also fall through to external git commands. So `git-lfs` can also be invoked as `oaf lfs`. Currently, Oaf does not have native support for extension."
  },
  {
    "name": "amethyst_cli",
    "replacement": "amethyst_tools",
    "message": "Deprecated, merged into amethyst_tools"
  },
  {
    "name": "lz4-compression",
    "replacement": "lz-fear",
    "message": "rs/crate/lz4-compression/)\r \r \r # LZ4-compression\r \r A pure Rust implementation of LZ4 compression and decompression. Currently, this implementation is __not 100% compatible with the reference implementation__. Pull requests are welcome though! This is based on [redox-os' LZ4 compression](https://github. com/redox-os/tfs/tree/master/lz4), but has been gradually improved since then. As this is only a passively maintained crate, consider using [lz-fear](https://github. com/main--/rust-lz-fear) instead,\r which also aims to be compatible with the reference implementation of LZ4. Usage: \r ```rust\r use lz4_compression::prelude::{ decompress, compress };\r \r fn main(){\r     let uncompressed_data: &[u8] = b\"Hello world, what's up? \";\r \r     let compressed_data = compress(uncompressed_data);\r     let decompressed_data = decompress(&compressed_data). unwrap();\r \r     assert_eq! (uncompressed_data, decompressed_data."
  },
  {
    "name": "actix_validated_forms_derive",
    "replacement": "actix-web-validator",
    "message": "yml/badge. svg)](https://github. com/jacob-pro/actix-validated-forms/actions) ! [maintenance-status](https://img. shields. io/badge/maintenance-deprecated-red. svg)  ## Deprecation Notice  This crate is no longer maintained. For validated forms and queries please use [actix-web-validator](https://github. com/rambler-digital-solutions/actix-web-validator). For multipart forms please use [actix-easy-multipart](https://github. com/jacob-pro/actix-easy-multipart)"
  },
  {
    "name": "azul-glutin",
    "replacement": "glow",
    "message": "You are encouraged to write another layer of abstraction between glutin and your application. Glutin is only officially supported on the latest stable version of the Rust compiler. ## Platform-specific notes\r \r ### Android\r \r To compile the examples for android, you have to use the `cargo apk` utility. See [the `android-rs-glue` repository](https://github. com/rust-windowing/android-rs-glue) for instructions. ### Emscripten with asmjs\r \r Emscripten support has been deprecated in favor of platforms like stdweb. To get an OpenGL context on these platforms, please use crates like [glow](https://crates. io/crates/glow) instead. ### X11\r \r The plan is that glutin tries to dynamically link-to and use Wayland w/EGL if possible. If it doesn't work, it will try Xlib w/GLX follow by Xlib w/EGL instead. This is work-in-progress."
  },
  {
    "name": "extendable-enums",
    "replacement": "extendable-data",
    "message": "# extendable-enums ## THIS VERSION OF THE LIBRARY HAS BEEN DEPRECATED What's left here is a functional wrapper that will not be updated and might break! You are recommended to move to the new renamed [extendable-data](https://crates. io/crates/extendable-data) package."
  },
  {
    "name": "lockbook_core",
    "replacement": "lb-rs",
    "message": "deprecated, see the lb-rs crate"
  },
  {
    "name": "peg-syntax-ext",
    "replacement": "peg",
    "message": "Deprecated syntax extension plugin for Rust nightly. See the `peg` crate for other integration options."
  },
  {
    "name": "shabling",
    "replacement": "shebling",
    "message": "This crate has been replaced by [`shebling`](https://crates. io/crates/shebling) 💎"
  },
  {
    "name": "multipart-2021",
    "replacement": "multipart-async",
    "message": "Supports several different (**sync**hronous API) HTTP crates. **Async**hronous (i. e. `futures`-based) API support will be provided by [multipart-async]. ## About the fork  `multipart-2021` is a fork of [the original](https://github. com/abonander/multipart) which has now been archived. The fork only updates the library to support Rust 2018 and 2021 edition changes, no changes or improvements to the API are intended. You can rebind your import of `multipart-2021` so that all the examples continue to work as normal: ```rust use multipart_2021 as multipart; ```  ##### Minimum supported Rust version: 1. 56. 0  ##### Maintenance Status: Archived  As the web ecosystem in Rust moves towards asynchronous APIs, the need for this crate in synchronous API form becomes dubious. This crate in its current form is usable enough, so as of June 2020 it is now in passive maintenance mode; bug reports will be addressed as time permits and PRs will be accepted but otherwise no new development of the existing API is taking place."
  },
  {
    "name": "arcon_spec",
    "replacement": "arcon_proto",
    "message": "# Arcon Specification This crate has been deprecated and moved into arcon_proto"
  },
  {
    "name": "soroban-wasmi-validation",
    "replacement": "upstream",
    "message": "# soroban-wasmi  This is a fork of https://github. com/paritytech/wasmi with a small set of local patches applied for customizing interaction with https://soroban. stellar. org   It may be abandoned at some point if Soroban is able to meet its needs strictly with upstream interfaces. The fork was for expedience during development. Other projects should not use it, and should use upstream instead. The Parity authors have been removed from the Cargo. toml metadata to avoid the implication that this fork is their responsibility or action, and to emphasize that users should not bother the Parity authors with support requests for this crate. This crate was still entirely (with the exception of a couple small patches) written by Parity Technologies, and their copyright notices are maintained."
  },
  {
    "name": "arcon_backend",
    "replacement": "arcon",
    "message": "# arcon backend  This crate has been deprecated! Its logic has been moved into the arcon crate."
  },
  {
    "name": "tauri-dialog",
    "replacement": "rfd",
    "message": "# tauri-dialog-rs  Rust bindings to forked https://github. com/aaronmjacobs/Boxer. ## Deprecation notice  This crate is no longer maintained. Tauri now uses [rfd](https://github. com/PolyMeilex/rfd)."
  },
  {
    "name": "watchboi",
    "replacement": "floof",
    "message": "DEPRECATED: this project was renamed to 'floof'. If you are interested in the name 'watchboi', please contact me :)"
  },
  {
    "name": "tauri_includedir",
    "replacement": "tauri-codegen",
    "message": "This crate was deprecated. It is now part of the `tauri-codegen` crate."
  },
  {
    "name": "lmake_md_to_doc_comments",
    "replacement": "cargo-auto",
    "message": "[comment]: # (lmake_md_to_doc_comments segment start A)  # lmake_md_to_doc_comments    **🔴OBSOLETE, 🔴DEPRECATED, 🔴DEFUNCT! It was replaced by the crate [cargo-auto](https://crates. io/crates/cargo-auto)**   \\ \\ \\  [comment]: # (lmake_readme cargo. toml data start) ***version: 0. 5. 5  date: 2020-07-15 authors: Luciano Bestia***   **Includes segments of md files into rs files as doc comments."
  },
  {
    "name": "light-snowflake-connector",
    "replacement": "snowflake-api",
    "message": "## Multiple Batches This library supports multiple batches, which is useful for streaming large result sets. But the results are transferred as JSON, so if high throughput is a concern, you should consider one of the Arrow based libraries instead, like [snowflake-api](https://docs. rs/snowflake-api/latest/snowflake_api/). # Relationship to other Snowflake Connectors This is a fork of the [snowflake-connector](https://github. com/Ripper53/snowflake-connector) library, and differs in a few ways: - It returns Cells rather than deserializing the data into custom structs - It does not support Decimal types (because it is hard to do correctly)  It differs from [snowflake-api](https://docs. rs/snowflake-api/latest/snowflake_api/) in that: - It uses only the documented v2 API, which (presently) does not support GET or PUT - It doesn't use any deprecated or undocumented APIs at all - It doesn't require Arrow (but it also doesn't get the performance benefits of Arrow)  It differs from most other languages' Snowflake connectors in that: - It doesn't use Arrow - It doesn't use the deprecated v1 API - It doesn't use undocumented APIs - It doesn't support GET or PUT - It doesn't support Async Queries - It's not affiliated with or supported by Snowflake. - It's not an official product of any company, doesn't have any guarantees, warranties, or support."
  },
  {
    "name": "mobc-boltrs",
    "replacement": "mobc-bolt",
    "message": "# mobc-boltrs  This crate is no longer being maintained. The mobc-boltrs crate is deprecated in favor of [mobc-bolt](https://crates. io/crates/mobc-bolt). The remainder of the README file is preserved below, for historical purposes, but this crate should no longer be used. # Usage  Include the following in `Cargo. toml` under the dependencies section:  ``` mobc = \"0."
  },
  {
    "name": "pi_res",
    "replacement": "pi_res_mgr",
    "message": "Deprecated 已废弃\r \r 老版本资源管理器，以后不再维护，请使用pi_res_mgr"
  },
  {
    "name": "nonparallel",
    "replacement": "serial_test",
    "message": "Rust macro for ensuring non-parallel execution of functions. (Deprecated, use `serial_test` instead. )"
  },
  {
    "name": "pimalaya-process",
    "replacement": "process-lib",
    "message": "**This crate is no longer maintained**, because it has been renamed [process-lib](https://crates. io/crates/process-lib). https://git. sr. ht/~soywod/pimalaya"
  },
  {
    "name": "wasmer-compiler-cranelift",
    "replacement": "wasmer-compiler-llvm",
    "message": "shields. io/crates/v/wasmer-compiler-cranelift. svg)](https://crates. io/crates/wasmer-compiler-cranelift)  This crate contains a compiler implementation based on Cranelift. ## Usage  ```rust use wasmer::{Store, sys::EngineBuilder}; use wasmer_compiler_cranelift::Cranelift;  let compiler = Cranelift::new(); let mut store = Store::new(compiler); ```  *Note: you can find a [full working example using Cranelift compiler here][example]. *  ## When to use Cranelift  We recommend using this compiler crate **only for development proposes**. For production we recommend using [`wasmer-compiler-llvm`] as it offers a much better runtime speed (50% faster on average). ### Acknowledgments  This project borrowed some of the function lowering from [`cranelift-wasm`]. Please check [Wasmer `ATTRIBUTIONS`] to further see licenses and other attributions of the project. [example]: https://github. com/wasmerio/wasmer/blob/main/examples/compiler_cranelift."
  },
  {
    "name": "net-mc",
    "replacement": "minceraft",
    "message": "# net-mc\r \r net-mc is a WIP library for sending and receiving minecraft packets\r \r ## net-mc has been moved to the net feature of the minceraft crate! in order to receive updates, use the minceraft crate!"
  },
  {
    "name": "openrr",
    "replacement": "openrr-planner",
    "message": "com/OpenRR/ros-nalgebra) : rosrust nalgebra converter generator * [rrt](https://github. com/OpenRR/rrt) : RRT-dual-connect path planner * [trajectory](https://github. com/OpenRR/trajectory) : trajectory interpolator * [urdf-rs](https://github. com/OpenRR/urdf-rs) : URDF parser * [urdf-viz](https://github. com/OpenRR/urdf-viz): URDF visualizer * ~~[gear](https://github. com/OpenRR/gear)~~ : (deprecated) motion planning library, but it is openrr-planner now. ## Why OpenRR? We strongly believe that Rust is the future of robotics. OpenRR is the world first robotics platform which is made by Rust, made for Rust. It can be a reference, a base for the future robotic people, like us. ## Contribution  We appreciate for your any contributions!"
  },
  {
    "name": "matrix-qrcode",
    "replacement": "matrix-sdk-qrcode",
    "message": "# Deprecated  ## With the release `0. 3. 0`, **`matrix-qrcode`** has been renamed to [**`matrix-sdk-qrcode`**](https://crates. io/crates/matrix-sdk-qrcode/). Please use that instead. We won't be providing any further updates of this crate."
  },
  {
    "name": "vec_file",
    "replacement": "vecfile",
    "message": "## VecFile This crate is no longer maintained, see crates. io/crates/vecfile"
  },
  {
    "name": "monster_chess",
    "replacement": "cozy-chess",
    "message": "generate_legal_moves(NORMAL_MODE); let pseudolegal_moves = board. generate_moves(NORMAL_MODE); ```  For testing and benchmarking purposes, `monster-chess` provides a method named `perft`, which will count the number of all possible moves possible that are `depth` half-moves ahead from the position (with a half-move being a move from one of the two players for reference. )  ```rust let perft = board. perft(5, true); let perft_pseudolegal = board. perft(5, false); ```  From the benchmarks I've done, `monster-chess` can reach about 20,000,000 pseudo-legal moves per second, and 5,000,000 legal moves per second. This isn't ideal and if you're only interested in performance, I recommend using the [cozy-chess](https://github. com/analog-hors/cozy-chess/) crate which is at least 25x faster then the implementation of chess in `monster-chess`. However, `monster-chess` is a sound option for chess given you also want the ability to support chess variants or even other games. It may be noted that `monster-chess` also aims to support [Fischer Random Chess](https://www. chess. com/terms/chess960)."
  },
  {
    "name": "ip6gen",
    "replacement": "ipgen-cli",
    "message": "A command line tool for generating unique and reproducible IPv6 addresses (DEPRECATED in favour of ipgen-cli)"
  },
  {
    "name": "kubectx-rs",
    "replacement": "Kubectx",
    "message": "# Deprecated, see [Kubectx](https://crates. io/crates/kubectx)"
  },
  {
    "name": "extHarvester",
    "replacement": "vsixHarvester",
    "message": "# extHarvester\r \r Deprecated\r \r Please use [vsixHarvester](https://crates. io/crates/vsixHarvester)"
  },
  {
    "name": "openal-rs",
    "replacement": "alto",
    "message": "DEPRECATED - Use alto instead"
  },
  {
    "name": "msp430fr2476",
    "replacement": "msp430fr247x",
    "message": "# Archived This repository/crate was archived in favor of [msp430fr247x](https://crates. io/crates/msp430fr247x) as it's a more generic name. # `msp430fr2476`  > Peripheral access API for MSP430FR2476 microcontroller  Generated using [svd2rust] from SVD file generated by [msp430_svd] tool. [svd2rust]: https://github. com/japaric/svd2rust [msp430_svd]: https://github. com/pftbest/msp430_svd  # License  Licensed under either of  - Apache License, Version 2."
  },
  {
    "name": "serde-matcher",
    "replacement": "serde_json_matcher",
    "message": "DEPRECATED: moved to serde_json_matcher"
  },
  {
    "name": "zinc64-loader",
    "replacement": "zinc64-emu",
    "message": "io/crates/v/zinc64. svg? maxAge=2592000)](https://crates. io/crates/zinc64)  ** **NOTE: zinc64 crate has been renamed to zinc64-emu** **  ## Overview  zinc64 is a Commodore 64 emulator toolkit \"with batteries included but swappable\". It is designed to be used as a standalone emulator or a library used to build new emulators. The design philosophy allows for each component to be swapped out and replaced by different implementation. Therefore, special considerations were made to model interactions between chips without coupling them together. It implements MOS 6510 CPU, MOS 6526 CIA, MOS 6581 SID, MOS 6567/6569 VIC chipset as well as various devices and peripherals available with C64. ### Story  zinc64 was started as an exercise to learn Rust and explore Commodore 64 hardware in more detail. Somewhere around mid 2016 I needed to feed my 8-bit nostalgia so I picked up a working Commodore 64 (physical version) and started to assemble various accessories required to get software onto it. Soon enough I had picked up a copy of C64 Programmer's Reference Guide and the rest is now history."
  },
  {
    "name": "htsget-actix",
    "replacement": "htsget-axum",
    "message": "yml/badge. svg [actions-url]: https://github. com/umccr/htsget-rs/actions? query=workflow%3Atests+branch%3Amain  > [! IMPORTANT]   > The functionality of [htsget-axum] is identical to this crate, and it is recommended for all > projects to use [htsget-axum] instead. >  > This crate will be maintained to preserve backwards compatibility, however [htsget-axum] is > favoured because it contains components that better fit with the rest of htsget-rs. Framework dependent code for a server instance of [htsget-rs], using [Actix Web][actix-web]. [htsget-rs]: https://github. com/umccr/htsget-rs [actix-web]: https://actix. rs/ [htsget-actix]: . ## Overview  This crate is used for running a local instance of htsget-rs."
  },
  {
    "name": "hjson2json",
    "replacement": "Hjson",
    "message": "Json wrapper for deprecated Hjson"
  },
  {
    "name": "mercy-cli",
    "replacement": "Mercy",
    "message": "# Mercy CLI  Mercy is an open-source Rust crate and CLI for building cybersecurity tools, assessment projects, and testing infrastructure. The goal is to create a sustainable project to make creating security tools in Rust a little easier. This repository is now deprecated and archived. All future updates are now published under the official `mercy` crate. ### All future updates will be posted here: [Mercy](https://github. com/azazelm3dj3d/mercy)"
  },
  {
    "name": "htime",
    "replacement": "humantime",
    "message": "# htime  **DEPRECATED**  Please use the humantime crate instead."
  },
  {
    "name": "nom-config-in",
    "replacement": "Kconfig",
    "message": "io/crates/nom-config-in\" >     <img src=\"https://img. shields. io/crates/v/nom-config-in. svg? logo=crate\" alt=\"crates. io Version\"/>   </a> </p>   **This parser is not actively maintained** since it has been replaced by [Kconfig](https://www. kernel. org/doc/html/next/kbuild/kconfig-language. html). This library has been tested from linux kernel [1. 0](https://cdn."
  },
  {
    "name": "mpu9250-i2c",
    "replacement": "mpu9250",
    "message": "# mpu9250-i2c  **This crate/repository is no longer maintained. Consider using the [mpu9250 crate](https://crates. io/crates/mpu9250)**  MPU9250 driver for embedded devices and Linux written in Rust. A platform agnostic driver to interface with the MPU9250 over i2c. This driver was built using [`embedded-hal`] traits. [`embedded-hal`]: https://docs."
  },
  {
    "name": "rclip",
    "replacement": "clipboard",
    "message": "No longer maintained. Use 'clipboard' crate instead."
  },
  {
    "name": "levenshtein-rs",
    "replacement": "levenshtein-distance",
    "message": "**:warning: This crate has been moved to [levenshtein-distance](https://crates. io/crates/levenshtein-distance). **  # levenshtein-rs  Provides the Levenshtein distance algorithm for Rust. ## Usage  ```toml [dependencies] levenshtein-rs = \"0. 1. 0\" ```  ```rust use levenshtein_rs::compute;  fn main() {     let cat = \"I Am a Cat\";     let dog = \"I Am a Dog\";     println!"
  },
  {
    "name": "rea-rs-low",
    "replacement": "float_eq",
    "message": "to_string()} }  fn my_action_func(_flag: i32) -> Result<(), Box<dyn Error>> {     Reaper::get(). show_console_msg(\"running\");     Ok(()) }  #[reaper_extension_plugin] fn plugin_main(context: PluginContext) -> Result<(), Box<dyn Error>> {     Reaper::init_global(context);     let reaper = Reaper::get_mut();      let action = reaper. register_action(         // This will be capitalized and used as action ID in action window         \"command_name\",         // This is the line user searches action for         \"description\",         my_action_func,         // Only type currently supported         None     )? ;      reaper. register_timer(Box::new(Listener{action}));     Ok(()) } ```  There are float values in API. I recommend to use `float_eq` crate. ## API structure  Most of the time, API is used hierarchically: [Reaper](https://levitanus. github. io/rea-rs-doc/rea_rs/reaper/struct. Reaper. html) holds top-level functions and can return [Project](https://levitanus."
  },
  {
    "name": "rdftk_graph",
    "replacement": "rdftk_core",
    "message": "Deprecated - moved to rdftk_core"
  },
  {
    "name": "rss-rs",
    "replacement": "rss",
    "message": "Deprecated. This project has been merged with the `rss` crate."
  },
  {
    "name": "ordered-streams",
    "replacement": "ordered-stream",
    "message": "# Abandoned fork of `ordered-stream`  Use [`ordered-stream`]. [`ordered-stream`]: https://crates. io/crates/ordered-stream"
  },
  {
    "name": "rifle",
    "replacement": "gateway",
    "message": "`-n mainnet` will allow you to query from Starkent mainnet, `-n goerli` will allow you to query from Starkent goerli, `-n goerli2` will allow you to query from Starkent goerli2. ## Usage  ``` Usage: rifle [OPTIONS] [COMMAND]  Commands:   --to-time   Convert blocknumber to time. [aliases: btt]   --to-block  Convert time to blocknumber. [aliases: ttb]   help        Print this message or the help of the given subcommand(s)  Options:   -n, --network <NETWORK>     Network: [mainnet/goerli/goerli2]   -f, --format <TIME_FORMAT>  The format to use time   -h, --help                  Print help ```  ### `--to-block`  ``` Convert time to blocknumber. Usage: rifle --to-block <TIME>  Arguments:   <TIME>  The time to convert  Options:   -h, --help  Print help ```  ### `--to-time`  ``` Convert blocknumber to time. Usage: rifle --to-time <BLOCK_NUMBER>  Arguments:   <BLOCK_NUMBER>  The blocknumber to convert  Options:   -h, --help  Print help ```  ## Improvement  - [ ] timezone support - [ ] RPC support ( gateway will be deprecated ) - [ ] algorithm upgrade?"
  },
  {
    "name": "uhppote-sys",
    "replacement": "uhppote-rs",
    "message": "# uhppote-sys  NOTE: This project has been deprecated! This crate contains FFI bindings for [uhppoted-dll](https://github. com/uhppoted/uhppoted-dll) that's part of the [uhppoted](https://github. com/uhppoted/uhppoted) project. This crate provides low-level and unsafe access to `uhppoted-dll`. Please use ['uhppote-rs'](https://crates."
  },
  {
    "name": "parse-hyperlinks-html",
    "replacement": "parse-hyperlinks-extras",
    "message": "This crate moved to `parse-hyperlinks-extras`."
  },
  {
    "name": "lottie2webp",
    "replacement": "lottieconv",
    "message": "DEPRECATED - use lottieconv crate instead"
  },
  {
    "name": "gdnative-visual_script",
    "replacement": "gdnative",
    "message": "# DEPRECATED. This crate is no longer maintained as a part of the GDNative bindings. Please use the [gdnative](https://crates. io/crates/gdnative) crate instead."
  },
  {
    "name": "svgparser",
    "replacement": "svgtypes",
    "message": "rs/svgparser/badge. svg)](https://docs. rs/svgparser)  [Build Status]: https://travis-ci. org/RazrFalcon/svgparser. svg? branch=master  **DEPRECATED**. Use [`svgtypes`](https://github. com/RazrFalcon/svgtypes) instead. *svgparser* is a pull-based parser for [SVG 1. 1 Full](https://www. w3."
  },
  {
    "name": "fst-regex",
    "replacement": "regex-automata",
    "message": "DEPRECATED. Use 'regex-automata' crate with 'transducer' feature instead."
  },
  {
    "name": "gdnative-editor",
    "replacement": "gdnative",
    "message": "# DEPRECATED. This crate is no longer maintained as a part of the GDNative bindings. Please use the [gdnative](https://crates. io/crates/gdnative) crate instead."
  },
  {
    "name": "pi_adler32",
    "replacement": "adler32",
    "message": "# pi_adler32\r \r ## Deprecated 已废弃\r \r 该crate 已废弃！ ## 概述\r \r 本库最开始是从[adler32](https://github. com/remram44/adler32-rs)拷贝过来，拷贝原因不记得了\r \r 但此时再对比[adler32](https://github. com/remram44/adler32-rs)，发现与它的代码并没有什么出入\r  \r 如果你想使用本库的功能，请直接引用 [adler32](https://github. com/remram44/adler32-rs)"
  },
  {
    "name": "rusteams",
    "replacement": "upstream",
    "message": "Fork of [MHteams](https://github. com/MHmorgan/mhteams) This doesn't add any functionality and will not be maintained. Please use upstream"
  },
  {
    "name": "concrete_lib",
    "replacement": "concrete",
    "message": "# WARNING  Development has moved to the [concrete crate](https://crates. io/crates/concrete). Watch out that your `Cargo. toml` file has the right following dependency:  ```toml [dependencies] concrete = \"^0. 1\" ```  We thank [Daniel May](https://gitlab. com/danieljrmay) for supporting this project and donating the Concrete crate."
  },
  {
    "name": "mantle-test",
    "replacement": "memchain",
    "message": "rs/mantle-test)  A framework for unit testing Mantle executables and integration testing Mantle workflows. For the most part, all you need to know about this crate is that it provides the [`create_account`](https://docs. rs/mantle-test/latest/mantle-test/fn. create_account. html) function. This crate is due to be replaced with `memchain`."
  },
  {
    "name": "fui_tray",
    "replacement": "fui_system",
    "message": "# fui_tray  This crate content was moved to fui_system crate: https://crates. io/crates/fui_system"
  },
  {
    "name": "hematite-client",
    "replacement": "hematite",
    "message": "DEPRECATED. Use `hematite`."
  },
  {
    "name": "regent",
    "replacement": "bilge",
    "message": "Bitfields in Rust (DEPRECATED; use bilge instead)"
  },
  {
    "name": "qiniu-multipart",
    "replacement": "multipart-async",
    "message": "e. `futures`-based) API support will be provided by [multipart-async]. ##### Minimum supported Rust version: 1. 33. 0  ##### Maintenance Status: Passive  As the web ecosystem in Rust moves towards asynchronous APIs, the need for this crate in synchronous API form becomes dubious. This crate in its current form is usable enough, so as of June 2020 it is now in passive maintenance mode; bug reports will be addressed as time permits and PRs will be accepted but otherwise no new development of the existing API is taking place. Look for a release of [multipart-async] soon which targets newer releases of Hyper. ### [Documentation](http://docs. rs/multipart/)  ## Integrations  Example files demonstrating how to use `multipart` with these crates are available under [`examples/`](examples). ### [Hyper ! [](https://img."
  },
  {
    "name": "festivities",
    "replacement": "process_control",
    "message": "# Festivities  This is a stripped down rusty_fork meant to be easily auditable. Most of the business has been replaced with process_control."
  },
  {
    "name": "fastcrypto-derive",
    "replacement": "ed25519-consensus",
    "message": "com/penumbra-zone/ed25519-consensus) crate. Compliant to [ZIP-215](https://zips. z. cash/zip-0215) that defines the signature validity that is lacking from RFC8032 but critical for consensus algorithms. [`ed25519-dalek`](https://github. com/dalek-cryptography/ed25519-dalek) is fully deprecated due to the recently discovered [Chalkias double pub-key api vulnerability](https://github. com/MystenLabs/ed25519-unsafe-libs). - Secp256k1: ECDSA signatures over the secp256k1 curve. Backed by [Secp256k1 FFI](https://crates. io/crates/secp256k1/0. 23."
  },
  {
    "name": "evm-network-ellaism",
    "replacement": "evm-network",
    "message": "Ellaism patches for SputnikVM. Deprecated and will be dropped in future releases: use evm-network instead"
  },
  {
    "name": "ethereumvm-network-ubiq",
    "replacement": "ethereumvm-network",
    "message": "Ubiq patches for EthereumVM. Deprecated and will be dropped in future releases: use ethereumvm-network instead"
  },
  {
    "name": "runtime",
    "replacement": "async-std",
    "message": "rs/runtime\">       API Docs     </a>     <span> | </span>     <a href=\"https://github. com/rustasync/runtime/blob/master/. github/CONTRIBUTING. md\">       Contributing     </a>     <span> | </span>     <a href=\"https://discord. gg/NtbaeUm\">       Chat     </a>   </h3> </div>  <div align=\"center\">   <sub>Built with ⛵ by <a href=\"https://github. com/rustasync\">The Rust Async Ecosystem WG</a> </div>  ## ⚠️ Deprecation notice  ⚠️ Runtime is no longer actively developed. The team behind Runtime has moved on to building [async-std](https://async. rs/): an asynchronous version of the Rust stdlib. If you're looking for an asynchronous runtime please consider using [async-std](https://docs. rs/async-std) or [tokio](https://docs. rs/tokio)."
  },
  {
    "name": "evm-network-ubiq",
    "replacement": "evm-network",
    "message": "Ubiq patches for SputnikVM. Deprecated and will be dropped in future releases: use evm-network instead"
  },
  {
    "name": "ethereumvm-network-ellaism",
    "replacement": "ethereumvm-network",
    "message": "Ellaism patches for EthereumVM. Deprecated and will be dropped in future releases: use ethereumvm-network instead"
  },
  {
    "name": "ethereumvm-network-musicoin",
    "replacement": "ethereumvm-network",
    "message": "Musicoin patches for EthereumVM. Deprecated and will be dropped in future releases: use ethereumvm-network instead"
  },
  {
    "name": "packed_simd_2",
    "replacement": "stdsimd",
    "message": "[Travis-CI Status]][travis] <! -- [! [Appveyor Status]][appveyor] --> [! [Latest Version]][crates. io] [! [docs]][master_docs]  **WARNING**: this crate only supports the most recent nightly Rust toolchain and will be superseded by [stdsimd](https://github. com/rust-lang/stdsimd). ## Documentation  * [API docs (`master` branch)][master_docs] * [Performance guide][perf_guide] * [API docs (`docs. rs`)][docs. rs] * [RFC2366 `std::simd`][rfc2366]: - contains motivation, design rationale,   discussion, etc. ## Examples  Most of the examples come with both a scalar and a vectorized implementation."
  },
  {
    "name": "ethereumvm-network-expanse",
    "replacement": "ethereumvm-network",
    "message": "Expanse patches for EthereumVM. Deprecated and will be dropped in future releases: use ethereumvm-network instead"
  },
  {
    "name": "eigs-rs",
    "replacement": "eigs",
    "message": "eigs-rs was moved to eigs: https://crates. io/crates/eigs"
  },
  {
    "name": "evm-network-expanse",
    "replacement": "evm-network",
    "message": "Expanse patches for SputnikVM. Deprecated and will be dropped in future releases: use evm-network instead"
  },
  {
    "name": "patchwork",
    "replacement": "ggez",
    "message": "# Patchwork\r Patchwork is a convenient crate for drawing tiles from a tilesheet using \r a 'SpriteBatch'. An update to the 'Mosaic' crate by Repnop(https://github. com/repnop/mosaic),\r which is no longer maintained. [`ggez`](https://crates. io/crates/ggez). ## Example\r TODO\r \r ## License\r Patchwork is licensed under both MIT and Apache 2. 0"
  },
  {
    "name": "tui_draw",
    "replacement": "rillo",
    "message": "# tui_draw  **The `tui_draw` crate is deprecated and no longer maintained. The GitHub repository will be archived soon. All the code is being moved to the `rillo` [crate](https://github. com/ecmatthee/rillo). **  tui_draw provides various tools to design and draw TUI's. ## Contributing  Contributions are always welcome!"
  },
  {
    "name": "ffmpeg-sys-next-crossfix",
    "replacement": "ffmpeg-sys-next",
    "message": "cacheSeconds=3600)](https://crates. io/crates/ffmpeg-sys-next) [! [build](https://github. com/zmwangx/rust-ffmpeg-sys/workflows/build/badge. svg)](https://github. com/zmwangx/rust-ffmpeg-sys/actions)  This is a fork of the abandoned [ffmpeg-sys](https://github. com/meh/rust-ffmpeg-sys) crate. You can find this crate as [ffmpeg-sys-next](https://crates. io/crates/ffmpeg-sys-next) on crates. io. This crate contains low level bindings to FFmpeg."
  },
  {
    "name": "quicr-core",
    "replacement": "quinn-proto",
    "message": "Moved to quinn-proto (was: State machine for the QUIC transport protocol)"
  },
  {
    "name": "nebula-graph-fbthrift-common-v2",
    "replacement": "nebula-fbthrift-common-v2",
    "message": "# nebula-graph-fbthrift-common-v2  * [Cargo package](https://crates. io/crates/nebula-graph-fbthrift-common-v2)  Archived, Rename to [nebula-fbthrift-common-v2](https://crates. io/crates/nebula-fbthrift-common-v2)"
  },
  {
    "name": "rust_intfic",
    "replacement": "intfic",
    "message": "# rust_intfic has been moved to intfic\r \r Please see [intfic](https://crates. io/crates/intfic) for the current version"
  },
  {
    "name": "fst-levenshtein",
    "replacement": "fst",
    "message": "DEPRECATED. Use 'fst' crate with 'levenshtein' feature instead."
  },
  {
    "name": "deadpool-redis-cluster",
    "replacement": "deadpool-redis",
    "message": "63+\")](https://blog. rust-lang. org/2022/08/11/Rust-1. 63. 0. html)  # ⚠️  DEPRECATED! ⚠️  The functionality of `redis_cluster_async` has been merged into the `redis` crate rendering this crate obsolete. Please use [`deadpool-redis`](https://crates. io/crates/deadpool-redis) instead. # ⚠️  DEPRECATED! ⚠️  Deadpool is a dead simple async pool for connections and objects of any type."
  },
  {
    "name": "dbz-lib",
    "replacement": "dbn",
    "message": "# DEPRECATED  This crate has been renamed to [dbn](https://crates. io/crates/dbn)."
  },
  {
    "name": "gdnative-ui",
    "replacement": "gdnative",
    "message": "# DEPRECATED. This crate is no longer maintained as a part of the GDNative bindings. Please use the [gdnative](https://crates. io/crates/gdnative) crate instead."
  },
  {
    "name": "darktoken",
    "replacement": "darkcontract",
    "message": "Project deprecated. See darkcontract crate instead"
  },
  {
    "name": "pyth-client",
    "replacement": "pyth-sdk-solana",
    "message": "# Pyth Client  **This crate has been deprecated. Please use [pyth-sdk-solana](https://github. com/pyth-network/pyth-sdk-rs/tree/main/pyth-sdk-solana) instead. pyth-sdk-solana provides identical functionalities with an easier interface. **  This crate provides utilities for reading price feeds from the [pyth. network](https://pyth."
  },
  {
    "name": "rfid-rs",
    "replacement": "mfrc522",
    "message": "# Deprecated  This crate has been deprecated in favor of [mfrc522](https://crates. io/crates/mfrc522)."
  },
  {
    "name": "pimalaya-oauth2",
    "replacement": "oauth-lib",
    "message": "**This crate is no longer maintained**, because it has been renamed [oauth-lib](https://crates. io/crates/oauth-lib). https://git. sr. ht/~soywod/pimalaya"
  },
  {
    "name": "ctftools",
    "replacement": "pwnr",
    "message": "Moved to pwnr crate"
  },
  {
    "name": "ocsp-x509",
    "replacement": "x509-ocsp",
    "message": "DEPRECATED. Use RustCrypto's x509-ocsp."
  },
  {
    "name": "fortify",
    "replacement": "ouroboros",
    "message": "* The [owning_ref](https://crates. io/crates/owning_ref) crate allows you to avoid specifying the lifetime for a reference by bundling it with the data it is referencing. However, it has [numerous](https://github. com/Kimundi/owning-ref-rs/issues/49) [soundness](https://github. com/Kimundi/owning-ref-rs/issues/61) [issues](https://github. com/Kimundi/owning-ref-rs/issues/77) and is no longer being maintained. * There have been proposals for allowing self-referential structs. In lieu of language support, the [rental](https://crates. io/crates/rental) and [ouroboros](https://crates. io/crates/ouroboros) crates enable a limited form of this. However, the implementation of self-referential structs is not as simple or intuitive as one would expect."
  },
  {
    "name": "rca9539",
    "replacement": "PCA9539",
    "message": "# Moved  This crate moved to [PCA9539](https://crates. io/crates/pca9539)."
  },
  {
    "name": "ring-aead",
    "replacement": "ring-compat",
    "message": "DEPRECATED: please switch to the `ring-compat` crate"
  },
  {
    "name": "ethereumvm-network-foundation",
    "replacement": "ethereumvm-network",
    "message": "Ethereum patches for EthereumVM. Deprecated and will be dropped in future releases: use ethereumvm-network instead"
  },
  {
    "name": "voicevox-dyn",
    "replacement": "vvcore",
    "message": ";\r \r     let wav = vv. tts(\"こんにちは\", SPEAKER_ID, Default::default())? ;\r \r     std::fs::write(\"audio. wav\", wav. as_slice())? ;\r \r     Ok(())\r }\r \r ```\r \r ### Alternatives\r \r If you prefer to dynamically link voicevox instead, I recommend using [vvcore](https://github. com/iwase22334/voicevox-core-rs)."
  },
  {
    "name": "convert-nonogram",
    "replacement": "number-loom",
    "message": "Deprecated; please use number-loom instead"
  },
  {
    "name": "dire",
    "replacement": "dirs-next",
    "message": "# dire\r \r This is a fork of the [`tbu-/dirs`](https://github. com/tbu-/dirs) library, which\r is a library for querying operating system specific directories. **Note:** The crate is now in **maintenance mode**, and I encourage using\r [`dirs-next`](https://crates. io/crates/dirs-next) or its sister project,\r [directories-next](https://crates. io/crates/directories-next) as a more\r updated replacement. Contact me by raising an issue [in this repo](https://github. com/hch12907/dire)\r if you would like to reuse the crate name for your library. However, in spite\r of the library being abandoned, you can still send pull requests to the repo\r mentioned above to improve the library."
  },
  {
    "name": "cargo-lyc",
    "replacement": "cargo-faircode",
    "message": "Deprecated. Use cargo-faircode instead"
  },
  {
    "name": "atsamd51g19a",
    "replacement": "atsamd51g",
    "message": "# This crate has been replaced by [https://crates. io/crates/atsamd51g](https://crates. io/crates/atsamd51g)"
  },
  {
    "name": "version-bump",
    "replacement": "nextver",
    "message": "Moved to nextver"
  },
  {
    "name": "atsamd51p20a",
    "replacement": "atsamd51p",
    "message": "# This crate has been replaced by [https://crates. io/crates/atsamd51p](https://crates. io/crates/atsamd51p)"
  },
  {
    "name": "crash_orm_migration",
    "replacement": "crash_orm",
    "message": "# Crash ORM Migration (deprecated) This was moved into the [crash_orm](https://crates. io/crates/crash_orm) crate behind the \"migration\" feature for version 0. 2."
  },
  {
    "name": "async-serialization",
    "replacement": "async-codec",
    "message": "# Deprecated This was a failed attempt at finding a suitable abstraction. The async-codec crate might be what you need instead. # Async Serialization  Traits for types that can be asynchronously serialized into AsyncWrites and deserialized from AsyncReads. Unlike serde's approach, the serialized data does not need to be in memory at once, and it saves a step of copying."
  },
  {
    "name": "atsamd51p19a",
    "replacement": "atsamd51p",
    "message": "# This crate has been replaced by [https://crates. io/crates/atsamd51p](https://crates. io/crates/atsamd51p)"
  },
  {
    "name": "gdnative-video",
    "replacement": "gdnative",
    "message": "# DEPRECATED. This crate is no longer maintained as a part of the GDNative bindings. Please use the [gdnative](https://crates. io/crates/gdnative) crate instead."
  },
  {
    "name": "tonic-richer-error",
    "replacement": "tonic-types",
    "message": "**Important**: This crate's functionality was incorporated into [`tonic-types`] and will be actively maintained there. This repository is no longer maintained. [`tonic-types`]: https://crates. io/crates/tonic-types  ---  # Tonic Richer Error Assets for implementation of the gRPC Richer Error Model with tonic. This crate introduces the [`WithErrorDetails`] trait and implements it in [`tonic::Status`], allowing the implementation of the [gRPC Richer Error Model] with [`tonic`] in a convenient way. [!"
  },
  {
    "name": "clippy_dummy",
    "replacement": "clippy",
    "message": "Installing clippy via crates. io is deprecated. Please use the following:  ```terminal rustup component add clippy ```  on a Rust version 1. 29 or later. You may need to run `rustup self update` if it complains about a missing clippy binary. See [the homepage](https://github. com/rust-lang/rust-clippy/#clippy) for more information"
  },
  {
    "name": "bevy_mod_gltf_patched",
    "replacement": "bevy_gltf",
    "message": "rs/bevy_mod_gltf_patched/badge. svg)](https://docs. rs/bevy_mod_gltf_patched)  This crate is a fork of [Bevy's](https://bevyengine. org/) first-party `bevy_gltf` crate with a patch introducing [support for custom vertex attributes](https://github. com/bevyengine/bevy/pull/5370). This crate will be deprecated once such functionality is available in mainline Bevy. ## Dependency  ```toml [dependencies] bevy_mod_gltf_patched = \"0. 2\" ```  ## Example  A mesh with barycentric coordinates used to draw variable-width borders around the triangles. ```shell cargo run --example custom_gltf_2d ```  ## Versions  | This Version | Bevy version | |--------------|--------------| | 0. 1. x        | 0."
  },
  {
    "name": "gdnative-physics",
    "replacement": "gdnative",
    "message": "# DEPRECATED. This crate is no longer maintained as a part of the GDNative bindings. Please use the [gdnative](https://crates. io/crates/gdnative) crate instead."
  },
  {
    "name": "iced_audio_widgets",
    "replacement": "iced_audio",
    "message": "deprecated: please use https://crates. io/crates/iced_audio instead"
  },
  {
    "name": "gdnative-common",
    "replacement": "gdnative",
    "message": "# DEPRECATED. This crate is no longer maintained as a part of the GDNative bindings. Please use the [gdnative](https://crates. io/crates/gdnative) crate instead."
  },
  {
    "name": "yew-unocss-transformer",
    "replacement": "unocss-classes",
    "message": "## ⚠️ This crate is no longer maintained ⚠️  The Variant Groups feature of this package is no longer in sync with the present versions of UnoCSS, therefore you should avoid using it. Also, utilizing a dedicated UnoCSS preset to parse Rust files is no longer necessary. \\ [unocss-classes](https://crates. io/crates/unocss-classes) has been created as the replacement. It adds a few new features and aims to support more Rust frontend frameworks than just Yew. # yew-unocss-transformer  > Yew classes macro with variant group transformer for UnoCSS  This crate provides `uno!"
  },
  {
    "name": "gdnative-input",
    "replacement": "gdnative",
    "message": "# DEPRECATED. This crate is no longer maintained as a part of the GDNative bindings. Please use the [gdnative](https://crates. io/crates/gdnative) crate instead."
  },
  {
    "name": "sentry-contrib-native",
    "replacement": "sentry",
    "message": "com/getsentry/onpremise), it is quiet easy to set up. The hidden cargo feature `test` is automatically activated when testing. It has the following effects:  - Automatically sets the DSN to the `SENTRY_DSN` environment variable, no matter   what is set through `Options::set_dsn`. - Automatically sets the database path to the `OUT_DIR` environment variable, no   matter what is set through `Options::set_database_path`. - Automatically puts the crashpad handler path to the correct path, taking into   account `SENTRY_NATIVE_INSTALL`, no matter what is set through   `Options::set_handler_path`. `cargo test`  ## Alternatives  It's recommended to use Sentry's official SDK for Rust: **[sentry](https://github. com/getsentry/sentry-rust)** - [! [Crates. io](https://img. shields. io/crates/v/sentry."
  },
  {
    "name": "openai-openapi",
    "replacement": "openai2",
    "message": "Moved to [openai2](https://crates. io/crates/openai2)"
  },
  {
    "name": "fastdl",
    "replacement": "libfastdl",
    "message": "This repository is deprecated, Go to libfastdl instead"
  },
  {
    "name": "parquet2",
    "replacement": "arrow2",
    "message": "This crate cannot be used directly to read parquet (except metadata). To read data from parquet, checkout [arrow2](https://github. com/jorgecarleitao/arrow2). ## Functionality implemented  * Read dictionary pages * Read and write V1 pages * Read and write V2 pages * Compression and de-compression (all)  ## Functionality not (yet) implemented  * [Index pages](https://github. com/apache/parquet-format/blob/master/PageIndex. md) * [Bit-packed (Deprecated)](https://github. com/apache/parquet-format/blob/master/Encodings. md#bit-packed-deprecated-bit_packed--4) * [Byte Stream Split](https://github. com/apache/parquet-format/blob/master/Encodings. md#byte-stream-split-byte_stream_split--9)  The parquet format has multiple encoding strategies for the different physical types. This crate currently reads from almost all of them, and supports encoding to a subset of them."
  },
  {
    "name": "gdnative-arvr",
    "replacement": "gdnative",
    "message": "# DEPRECATED. This crate is no longer maintained as a part of the GDNative bindings. Please use the [gdnative](https://crates. io/crates/gdnative) crate instead."
  },
  {
    "name": "tri_avltree",
    "replacement": "avltriee",
    "message": "Sorry, this crate has been moved to \"avltriee\"."
  },
  {
    "name": "plaid-openapi",
    "replacement": "plaid",
    "message": "Deprecated: Use the `plaid` crate instead."
  },
  {
    "name": "pathutil",
    "replacement": "anyhow-std",
    "message": "DEPRECATED; use `anyhow-std` instead."
  },
  {
    "name": "nrf52",
    "replacement": "nrf52832-pac",
    "message": "DEPRECATED: Use `nrf52832-pac` instead"
  },
  {
    "name": "proc",
    "replacement": "procinfo",
    "message": "DEPRECATED: use the procinfo crate."
  },
  {
    "name": "pimalaya-time",
    "replacement": "time-lib",
    "message": "**This crate is no longer maintained**, because it has been renamed [time-lib](https://crates. io/crates/time-lib). https://git. sr. ht/~soywod/pimalaya"
  },
  {
    "name": "tauri-mobile",
    "replacement": "cargo-mobile2",
    "message": "# ❗⚠️ WARNING - DEPRECATION NOTICE ❗⚠️  THIS CRATE HAS BEEN DEPRECATED, AND HAS BEEN RENAMED TO `cargo-mobile2`  # tauri-mobile  > _The answer to \"how do I use Rust on iOS and Android? \"_ > > cargo-mobile takes care of generating Xcode and Android Studio project files, building and running on device, generating project boilerplate, and a few other things! This project is a fork of [cargo-mobile](https://github. com/BrainiumLLC/cargo-mobile/). Tauri uses it as a library dependency instead of using its CLI directly. For more information, please visit [Tauri's mobile guide](https://next--tauri."
  },
  {
    "name": "djot",
    "replacement": "jotdown",
    "message": "# `djot. rs`  This crate is not actively maintained and is no longer supported. I recommend using [jotdown](https://crates. io/crates/jotdown) instead, which is actively maintained."
  },
  {
    "name": "fluvio-smartstream-derive",
    "replacement": "fluvio-smartmodule-derive",
    "message": "This crate has been deprecated. Please update your code to use the [`fluvio-smartmodule-derive`](https://crates. io/crates/fluvio-smartmodule-derive) crate instead"
  },
  {
    "name": "nebula-graph-fbthrift-storage-v2",
    "replacement": "nebula-fbthrift-storage-v2",
    "message": "# nebula-graph-fbthrift-storage-v2  * [Cargo package](https://crates. io/crates/nebula-graph-fbthrift-storage-v2)  Archived, Rename to [nebula-fbthrift-storage-v2](https://crates. io/crates/nebula-fbthrift-storage-v2)"
  },
  {
    "name": "femtorinth",
    "replacement": "ferinth",
    "message": "io/crates/femtorinth)  [! [forthebadge](https://forthebadge. com/images/badges/made-with-rust. svg)](https://www. rust-lang. org/)  ⚠️ This library is no longer maintained, I lost interest in this project after discovering a minecraft launcher called \"MultiMC\", however if you want to interact with the [Modrinth][modrinth] api have a look at the [Ferinth][ferinth] crate which is more up-to-date :D. [ferinth]: https://crates. io/crates/ferinth  Femtorinth is a rust library to interact with a sub-set of the [Modrinth][modrinth] api, it only includes the api calls that don't need auth (a. k. a only GET calls), it includes parsing for all the structs that exist in the v1 documentation of Modrinth's api and the structs themselves aswell, plus, helper functions that will return those structs and handle calling the Modrinth api, currently this library is using the [ureq][ureq] crate as it's back-end to call the Modrinth api but that's planned to change in the near future so the library can become backend agnostic (although i have no idea what the use of this library would then be). Right now Femtorinth is still very much in infancy, it does have good enough error handling, documentation and code but i think there's still room for improvement, have a look at the `Roadmap` section of this readme if you're interested in contributing!"
  },
  {
    "name": "duniter-keys",
    "replacement": "duniter-crypto",
    "message": "Deprecated crate. Use duniter-crypto."
  },
  {
    "name": "ethereumvm-network-classic",
    "replacement": "ethereumvm-network",
    "message": "Ethereum Classic patches for EthereumVM. Deprecated and will be dropped in future releases: use ethereumvm-network instead"
  },
  {
    "name": "yaml-rust-davvid",
    "replacement": "yaml-rust2",
    "message": "# Development has moved to yaml-rust2  **IMPORTANT** The enhancements from this fork have been merged into [yaml-rust2](https://github. com/Ethiraric/yaml-rust2), the de-facto Rust YAML implementation. All future development has moved to `yaml-rust2`. Users are advised to upgrade to `yaml-rust2`. * https://github. com/Ethiraric/yaml-rust2/pull/2  * https://github."
  },
  {
    "name": "hdrhistogram-c",
    "replacement": "hdrhistogram",
    "message": "Rust binding to HdrHistogram_c library ======================================  # NOTE This crate is no longer actively maintained, and is only intended for backwards compatibility. New users should use the pure Rust [hdrhistogram](https://crates. io/crates/hdrhistogram) crate. [! [Build Status](https://travis-ci. org/jsgf/rust-hdrhistogram."
  },
  {
    "name": "enum-kinds-traits",
    "replacement": "enum-kinds",
    "message": "Deprecated in favor of the enum-kinds crate. Traits for enum-kinds-macros crate."
  },
  {
    "name": "naja_async_runtime",
    "replacement": "async_executors",
    "message": "io](https://img. shields. io/crates/v/naja_async_runtime. svg)](https://crates. io/crates/naja_async_runtime)   > A lightweight runtime for global spawning of futures. **DEPRECATED**: This crate has not been updated in a long time. It would need a rewrite, but it turns out most people are [more interested an a parameter based approach rather than a global executor approach](https://users. rust-lang. org/t/poll-async-await-lets-talk-about-executors). I have in the mean time released [async_executors](https://crates. io/crates/async_executors) and [async_nursery](https://crates."
  },
  {
    "name": "ogl33",
    "replacement": "gl33",
    "message": "Deprecated, use the `gl33` crate instead."
  },
  {
    "name": "dbz-cli",
    "replacement": "dbn-cli",
    "message": "# DEPRECATED  This crate has been renamed to [dbn-cli](https://crates. io/crates/dbn-cli)."
  },
  {
    "name": "gdnative-network",
    "replacement": "gdnative",
    "message": "# DEPRECATED. This crate is no longer maintained as a part of the GDNative bindings. Please use the [gdnative](https://crates. io/crates/gdnative) crate instead."
  },
  {
    "name": "nebula-graph-fbthrift-graph-v2",
    "replacement": "nebula-fbthrift-graph-v2",
    "message": "# nebula-graph-fbthrift-graph-v2  * [Cargo package](https://crates. io/crates/nebula-graph-fbthrift-graph-v2)  Archived, Rename to [nebula-fbthrift-graph-v2](https://crates. io/crates/nebula-fbthrift-graph-v2)"
  },
  {
    "name": "eink_waveshare_rs",
    "replacement": "epd-waveshare",
    "message": "This crate was moved to [epd-waveshare](https://crates. io/crates/epd-waveshare)"
  },
  {
    "name": "gexiv2-sys",
    "replacement": "rexiv2",
    "message": "Only FFI declarations are provided here; **for a usable Rust library, consider the [rexiv2][rexiv2] crate**. This project is considered “complete” — i. e. all the functionality that has been planned has been added (well, [almost][feature-issues]! ), and no new development work is expected/planned. This doesn’t mean it’s abandoned or unsupported: bug reports and pull requests are still gladly welcomed and will be addressed. [gexiv2]: https://wiki. gnome. org/Projects/gexiv2 [exiv2]:  http://www. exiv2. org/ [rexiv2]: https://github."
  },
  {
    "name": "pimalaya-pomodoro",
    "replacement": "time-lib",
    "message": "**This crate is no longer maintained**, because it has been renamed [time-lib](https://crates. io/crates/time-lib). https://git. sr. ht/~soywod/pimalaya"
  },
  {
    "name": "probe-run",
    "replacement": "probe-rs",
    "message": "> ⚠️ As of 11. 10. 2023 `probe-run` is in maintainance mode. We recommend everyone to switch to `probe-rs`. Read following article on the why and on how to migrate: https://ferrous-systems. com/blog/probe-run-deprecation/  # `probe-run`  > Runs embedded programs just like native ones  `probe-run` is a custom Cargo runner that transparently runs Rust firmware on an embedded device. `probe-run` is powered by [`probe-rs`] and thus supports all the devices and probes supported by `probe-rs`. [`probe-rs`]: https://probe. rs/  ## Features  * Acts as a Cargo runner, integrating into `cargo run`. * Displays program output streamed from the device via RTT. * Exits the firmware and prints a stack backtrace on hardware breakpoints (e."
  },
  {
    "name": "tezos-smart-rollup-core",
    "replacement": "tezos-smart-rollup-host",
    "message": "- manipulating **durable storage**. This crate provides the definitions of these host functions, including linking to the `smart_rollup_core` WASM module. In addition, various constants (such as error codes) used when interacting with these host functions, are defined here. # Safety  This crate exposes the host functions through the `SmartRollupCore` trait, which is unsafe to use - as it makes no effort to provide a *safe rust* API. A safe API is defined in the `tezos-smart-rollup-host` crate, as the `Runtime` trait. It's therefore recommended to use the `Runtime` trait directly from the `tezos-smart-rollup-host` crate, or alternatively directly through the `tezos-smart-rollup` top-level SDK crate."
  },
  {
    "name": "duniter-crypto",
    "replacement": "runiter-crypto",
    "message": "Deprecated crate. Use runiter-crypto."
  },
  {
    "name": "error-annotation",
    "replacement": "anyhow",
    "message": "DEPRECATED: use `anyhow` instead."
  },
  {
    "name": "ether_convert",
    "replacement": "ether-converter",
    "message": "# NOTICE: This package has been moved to [ether-converter](https://crates. io/crates/ether-converter)."
  },
  {
    "name": "ssmarshal",
    "replacement": "bincode",
    "message": "To successfully deserialize a value, the exact layout must be known ahead-of-time. ## Alternatives  This is designed for doing IPC in a microkernel, with a stable ABI, not saving to disk or transferring over the network. It may be useful for those cases, although you'll likely want a format which can handle data evolution, like Cap'n Proto. If you care about truly minimizing encoding space, you might look into ASN. 1 PER. If you need more features (for example, slices or references), but still don't care about data evolution, I recommend using bincode. ## Testing  The `roundtrip` test suite exercises almost all of the functionality of ssmarshal, with coverage over 95% (missing mostly some of the error cases for invalid/unsupported types). This library is extensively fuzz tested with `cargo-fuzz` (libFuzzer) before every release. See the `fuzz` directory for the scripts used."
  },
  {
    "name": "evm-network-musicoin",
    "replacement": "evm-network",
    "message": "Musicoin patches for SputnikVM. Deprecated and will be dropped in future releases: use evm-network instead"
  },
  {
    "name": "elastic_types_macros",
    "replacement": "elastic_types_derive",
    "message": "Deprecated in favour of elastic_types_derive"
  },
  {
    "name": "gdnative-audio",
    "replacement": "gdnative",
    "message": "# DEPRECATED. This crate is no longer maintained as a part of the GDNative bindings. Please use the [gdnative](https://crates. io/crates/gdnative) crate instead."
  },
  {
    "name": "polymesh-extension",
    "replacement": "polymesh-api",
    "message": "# polymesh-extension Polymesh chain extension for Ink! Smart contracts. This is the low-level Ink! ChainExtension for Polymesh. It is recommended to use crate `polymesh-api` (with feature `ink`) for an easier to use interface. See example `examples/extension-tester` to see how to make runtime calls and read storage."
  },
  {
    "name": "curv-embedded",
    "replacement": "k256",
    "message": "io/crates/l/curv-kzen)](LICENSE) [! [dependency status](https://deps. rs/repo/github/ZenGo-X/curv/status. svg)](https://deps. rs/repo/github/ZenGo-X/curv)  Curv ===================================== ### Changes  Feb 1, 2023  The dependency of `secp256k1` crate (<https://crates. io/crates/secp256k1>) was replaced with `k256` crate (<https://crates. io/crates/k256>) to be embedded-friendly. Though this repo is forked from `curv-kzen` v0. 9. 0, the updated `secp256_k1. rs` also works well with `curv-kzen` v0."
  },
  {
    "name": "gdnative-macros",
    "replacement": "gdnative",
    "message": "# DEPRECATED. This crate is no longer maintained as a part of the GDNative bindings. Please use the [gdnative](https://crates. io/crates/gdnative) crate instead. This version is empty, because the original code can no longer be compiled with the current rustc."
  },
  {
    "name": "futures-io-traits-sync-wrapper",
    "replacement": "async-stream-packed",
    "message": "# futures-io-traits-sync-wrapper  Deprecated, Please use [async-stream-packed](https://docs. rs/async-stream-packed) crate."
  },
  {
    "name": "walker",
    "replacement": "walkdir",
    "message": "# This library is deprecated. Use [walkdir]. If you want the name, open an issue on the repo. [walkdir]: https://crates. io/crates/walkdir"
  },
  {
    "name": "mockall_examples",
    "replacement": "Mockall",
    "message": "# Mockall Examples  Examples of autogenerated mock objects by Mockall  **DEPRECATED** All of the content from this crate has been merged into the main Mockall crate. This one no longer has any use."
  },
  {
    "name": "gdnative-graphics",
    "replacement": "gdnative",
    "message": "# DEPRECATED. This crate is no longer maintained as a part of the GDNative bindings. Please use the [gdnative](https://crates. io/crates/gdnative) crate instead."
  },
  {
    "name": "zoneinfo_parse",
    "replacement": "zoneinfo_compiled",
    "message": "branch=master&service=github)](https://coveralls. io/github/rust-datetime/zoneinfo-parse? branch=master)  Rust library for reading the text files comprising the [zoneinfo database][w], which records time zone changes and offsets across the world from multiple sources. The zoneinfo database is distributed in one of two formats: a raw text format with one file per continent, and a compiled binary format with one file per time zone. This crate deals with the former; for the latter, see the [`zoneinfo_compiled` crate][zc] instead. The database itself is maintained by IANA. For more information, see [IANA’s page on the time zone database][iana]. You can also find the text files themselves in [the tz repository][tz]. [iana]: https://www. iana. org/time-zones [tz]: https://github."
  },
  {
    "name": "ink-wrapper-types",
    "replacement": "aleph_client",
    "message": "They're provided by the trait `my_contract::MyContract` (depends on your actual contract name)     use my_contract::MyContract as _;      // Construct the call object. let exec_call = address. some_exec_call();          // Execute it. let res = session. execute(exec_call); } ```  For more comprehensive examples on actual contract wrappers, see `tests` directory. #### `aleph_client` (deprecated from `0. 7. 0`)  You will need the following dependencies for the wrapper to work:  ```toml ink-wrapper-types = \"0. 6. 0\" scale = { package = \"parity-scale-codec\", version = \"3\", default-features = false, features = [\"derive\"] } ink_primitives = \"4. 2."
  },
  {
    "name": "netsock",
    "replacement": "netstat2",
    "message": "local_addr, udp_socket. local_port, socket. processes                     ),                 }             }         }         Err(e) => {             // If an error occurs, print the error message. eprintln! (\"Error: {}\", e);         }     } } ```  ## Inspired by - [netstat](https://crates. io/crates/netstat): unmaintained - [netstat2](https://crates. io/crates/netstat2)"
  },
  {
    "name": "nphysics",
    "replacement": "nphysics3d",
    "message": "3-dimensional physics engine in Rust. DEPRECATED USE nphysics2d OR nphysics3d INSEAD."
  },
  {
    "name": "elastic_macros",
    "replacement": "elastic_derive",
    "message": "Deprecated in favour of elastic_derive"
  },
  {
    "name": "evm-network-foundation",
    "replacement": "evm-network",
    "message": "Ethereum patches for SputnikVM. Deprecated and will be dropped in future releases: use evm-network instead"
  },
  {
    "name": "die-exit-2",
    "replacement": "die-exit",
    "message": "Archived, please use die-exit."
  },
  {
    "name": "ddtrace",
    "replacement": "reqwest-middleware",
    "message": "For ease of integration with services written in other languages that use the official Datadog SDK, we opted for sticking with Datadog-style propagation over `B3`. This is set via the `set_global_propagator` function. # Reqwest Propagation The Python library takes care of propagation of the trace context automatically. Unfortunately, we need to do this manually in Rust. Arguably, propagation in HTTP requests is the most common need. This crate does not provide any additional support, but we recommend using the [reqwest-middleware](https://crates. io/crates/reqwest-middleware) crate to inject the necessary headers when using `reqwest`. If you set the global propagator using `ddtrace`, it will work out of the box. ```rust use ddtrace::set_global_propagator; use reqwest_middleware::{ClientBuilder, ClientWithMiddleware}; use reqwest_tracing::TracingMiddleware;  #[tokio::main] async fn main() {     set_global_propagator();     client = get_http_client();          // configure tracing, setup your app and inject the client }  fn get_http_client() -> ClientWithMiddleware {     ClientBuilder::new(reqwest::Client::new())         . with(TracingMiddleware::default())         . build() } ```  [crates-badge]: https://img."
  },
  {
    "name": "aws-lc-ring",
    "replacement": "aws-lc-sys",
    "message": "Please use aws-lc-sys: https://crates. io/crates/aws-lc-sys. AWS-LC is a general-purpose cryptographic library maintained by the AWS Cryptography team for AWS and their customers. It іs based on code from the Google BoringSSL project and the OpenSSL project."
  },
  {
    "name": "gdnative-animation",
    "replacement": "gdnative",
    "message": "# DEPRECATED. This crate is no longer maintained as a part of the GDNative bindings. Please use the [gdnative](https://crates. io/crates/gdnative) crate instead."
  },
  {
    "name": "automatic_file_sorter",
    "replacement": "FileSorterX",
    "message": "### automatic_file_sorter is deprecated please use [FileSorterX](https://crates. io/crates/FileSorterX) instead\r \r ## I Xanthus58 consent to the transfer of this crate to the first person who asks help@crates. io for it\r \r If you have any questions concerns or need any addition information please contact me on business@xanthus. uk"
  },
  {
    "name": "uri",
    "replacement": "url",
    "message": "Deprecated, use url crate instead"
  },
  {
    "name": "soroban-wasmi_core",
    "replacement": "upstream",
    "message": "# soroban-wasmi  This is a fork of https://github. com/paritytech/wasmi with a small set of local patches applied for customizing interaction with https://soroban. stellar. org  It may be abandoned at some point if Soroban is able to meet its needs strictly with upstream interfaces. The fork was for expedience during development. Other projects should not use it, and should use upstream instead. The Parity authors have been removed from the Cargo. toml metadata to avoid the implication that this fork is their responsibility or action, and to emphasize that users should not bother the Parity authors with support requests for this crate. This crate was still entirely (with the exception of a couple small patches) written by Parity Technologies, and their copyright notices are maintained."
  },
  {
    "name": "tauri-winres",
    "replacement": "embed-resource",
    "message": "org/wiki/Resource_(Windows)>) (metainformation and icons) to [Portable Executables](https://en. wikipedia. org/wiki/Portable_Executable). Note: `tauri-winres` is a fork of [winres](https://github. com/mxre/winres) which no longer works on Rust 1. 61 or higher and has been [left unmaintained](https://github. com/mxre/winres/issues/40). This fork completely replaced the resource compiler implementation with the awesome [embed-resource](https://github. com/nabijaczleweli/rust-embed-resource) crate for better cross-platform compilation support. This fork was primarily updated and modified for use in [Tauri](https://github. com/tauri-apps/tauri)."
  },
  {
    "name": "litrs",
    "replacement": "literalext",
    "message": "**Why this library? ** Unfortunately, the `proc_macro` API shipped with the compiler offers no easy way to inspect literals. There are mainly two libraries for this purpose: [`syn`](https://github. com/dtolnay/syn) and [`literalext`](https://github. com/mystor/literalext). The latter is deprecated. And `syn` is oftentimes overkill for the task at hand, especially when developing function-like proc-macros (e. g. `foo! (. ."
  },
  {
    "name": "crossterm_style",
    "replacement": "crossterm",
    "message": "! [Lines of Code][s7] [! [Latest Version][s1]][l1] [! [MIT][s2]][l2] [! [docs][s3]][l3] [! [Join us on Discord][s5]][l5]\r \r # Crossterm Style\r \r **The `crossterm_style` crate is deprecated and no longer maintained. The GitHub repository will\r be archived soon. All the code is being moved to the `crossterm`\r [crate](https://github. com/crossterm-rs/crossterm). You can learn more in the\r [Merge sub-crates to the crossterm crate](https://github. com/crossterm-rs/crossterm/issues/265)\r issue."
  },
  {
    "name": "rustcracker",
    "replacement": "firecracker-rs-sdk",
    "message": "# DEPRECATED: This crate is no longer maintained. Use [firecracker-rs-sdk](https://github. com/xuehaonan27/firecracker-rs-sdk) instead. # rustcracker A crate for communicating with [firecracker](https://github. com/firecracker-microvm/firecracker) developed by [Xue Haonan](https://github. com/xuehaonan27) during development of [PKU-cloud](https://github."
  },
  {
    "name": "rust-p2p-core",
    "replacement": "rustp2p",
    "message": "await. unwrap();\r         // Each tunnel corresponds to a TCP or UDP socket. // 1. A TCP-type tunnel only appears after successful hole punching\r         // 2. UDP-type tunnels are dispatched right from the start. }\r }\r \r ```\r \r It is recommended to use `rustp2p` directly, which is ergonomic and easy to use."
  },
  {
    "name": "vercre-wallet",
    "replacement": "vercre-holder",
    "message": "# vercre-wallet (deprecated)  DEPRECATED: Use [`vercre-holder`](https://crates. io/crates/vercre-holder) instead."
  },
  {
    "name": "vercre-core",
    "replacement": "vercre-holder",
    "message": "# vercre-core (deprecated)  DEPRECATED: See * [`vercre-holder`](https://crates. io/crates/vercre-holder) instead. * [`vercre-issuer`](https://crates. io/crates/vercre-issuer) instead. * [`vercre-verifier`](https://crates. io/crates/vercre-verifier) instead."
  },
  {
    "name": "jui_file",
    "replacement": "cbsk_file",
    "message": "this crates move to cbsk_file, jui_file will no longer be maintained, more\r see [cbsk_file](https://crates. io/crates/cbsk_file)"
  },
  {
    "name": "vercre-vci",
    "replacement": "vercre-issuer",
    "message": "# vercre-vci (deprecated)  DEPRECATED: Use [`vercre-issuer`](https://crates. io/crates/vercre-issuer) instead."
  },
  {
    "name": "portaudio",
    "replacement": "CPAL",
    "message": "branch=master)](https://travis-ci. org/RustAudio/rust-portaudio)  [**PortAudio**](http://www. portaudio. com/) bindings and wrappers for Rust. PortAudio is a free, cross-platform, open-source, audio I/O library. **rust-portaudio** is in maintenance mode. Consider using [CPAL](https://github. com/RustAudio/cpal) instead. # Installation  **rust-portaudio** will try to detect portaudio on your system and, failing that (or if given the `PORTAUDIO_ONLY_STATIC` environment variable on the build process), will download and build portaudio statically. If this fails please let us know! In the mean-time, you can manually [download and install PortAudio](http://www."
  },
  {
    "name": "vercre-vp",
    "replacement": "vercre-verifier",
    "message": "# vercre-vp (deprecated)  DEPRECATED: Use [`vercre-verifier`](https://crates. io/crates/vercre-verifier) instead."
  },
  {
    "name": "yoga",
    "replacement": "taffy",
    "message": "org/bschwind/yoga-rs. svg? branch=master)](https://travis-ci. org/bschwind/yoga-rs)  A Rust wrapper for Facebook's Yoga layout library. You may also want to check out [taffy](https://github. com/dioxuslabs/taffy) (a revived fork of the abandoned [stretch](https://github. com/vislyhq/stretch)) as it is a pure Rust implementation. Dependencies ------------ - cargo - rustc - libc++-dev (LLVM’s libc++)  Build -----     $ cargo build --release  Run Example ----------- \t$ cargo run --release --example layout  Format Code ----------- \t$ cargo +nightly fmt  Example Code ------------ ```rust #[macro_use] extern crate yoga;  use yoga::prelude::*; use yoga::Node; use yoga::StyleUnit::{Auto, UndefinedValue};  fn main() { \tlet mut node = Node::new();  \tlet mut child = Node::new(); \tlet mut other_child = Node::new();  \tnode. insert_child(&mut child, 0); \tnode. insert_child(&mut other_child, 1);  \tstyle! (node, \t\tMargin(10 pt), \t\tMarginLeft(Auto), \t\tPaddingHorizontal(4 pt), \t\tLeft(16 %), \t\tBottom(UndefinedValue) \t);  \tlet child_styles = make_styles!"
  },
  {
    "name": "pact-crypto",
    "replacement": "codas",
    "message": "This crate has been renamed and moved to the [`codas`](https://crates. io/crates/codas) crate. If this crate is not updated by June 21st, 2025, please feel free to contact [`hello@alicorn. systems`] about transferring the ownership (and/or purpose of) this crate. ## License  Copyright 2024 Alicorn Systems, Inc. Licensed under the GNU Affero General Public License version 3, as published by the Free Software Foundation."
  },
  {
    "name": "pact-derive",
    "replacement": "codas",
    "message": "This crate has been renamed and moved to the [`codas`](https://crates. io/crates/codas) crate. If this crate is not updated by June 21st, 2025, please feel free to contact [`hello@alicorn. systems`] about transferring the ownership (and/or purpose of) this crate. ## License  Copyright 2024 Alicorn Systems, Inc. Licensed under the GNU Affero General Public License version 3, as published by the Free Software Foundation."
  },
  {
    "name": "axum_csrf",
    "replacement": "axum_session",
    "message": "If you want to Prevent Post Replay Attacks then you should use a Session Storage method. you store the hash in the server side session store as well as send it with the form. when they post the data you would check the hash of the form first and then against the internal session data 2nd. After the 2nd hash is valid you would then remove the hash from the session. This prevents replay attacks and ensure no data was manipulated. If you need a Session database I would suggest using [`axum_session`](https://crates. io/crates/axum_session)\r \r Changes using `axum_session`. ```rust\r async fn greet(token: CsrfToken, session: Session<SessionPgPool>) -> impl IntoResponse {\r     let authenticity_token = token. authenticity_token();\r     session. set(\"authenticity_token\", authenticity_token. clone())."
  },
  {
    "name": "garmin_client",
    "replacement": "garmin_download",
    "message": "login(args[1], args[2]);      // get endpoint for service     let endpoint = \"weight-service/weight/dateRange\";      let weight_date = \"2023-01-01 00:00:00\";     let datetime = NaiveDateTime::parse_from_str(&weight_date, \"%Y-%m-%d %H:%M:%S\"). unwrap();      let params = HashMap::from([         (\"startDate\", \"2023-01-01\"),         (\"endDate\", \"2023-01-01\"),         (\"_\", datetime. timestamp_millis(). as_str())     ]);      let is_json_result = true;     let filename = \"weight. json\";     client. api_request(endpoint, Some(params), is_json_result, filename); } ```  Recommend using garmin_download crate for more programmatic control, and otherwise demonstration of how to format various other API endpoints. Note: this client uses basic session management to store session tokens. However, heuristics show that only one endpoint download is allowed for a given session (e. g. , can only download specific sleep data for specific date for one session, but you can download sleep data for another date on the same session). Therefore to redownload the same file(s) from the same endpoints you'll need to delete the ."
  },
  {
    "name": "unspoken",
    "replacement": "jutella",
    "message": "**NOTICE** This project has been renamed to `jutella` and has been moved to https://github. com/dmitry-markin/jutella. This crate/binary has been moved to [jutella](https://crates. io/crates/jutella) from `0. 2. 0`   # unspoken  Chatbot API client library and CLI interface."
  },
  {
    "name": "cargo-manifest",
    "replacement": "cargo-util-schemas",
    "message": "toml` files. Alternatives ------------------------------------------------------------------------------  This crate is a fork of the [`cargo_toml`](https://crates. io/crates/cargo_toml) project. There are only some minor differences between these projects at this point, you will need to evaluate which one fits your needs better. There is also [`cargo-util-schemas`](https://crates. io/crates/cargo-util-schemas) now, which is maintained by the cargo team themselves. This crate was extracted from the cargo codebase and is used inside the `cargo` binary itself. It is kept up-to-date with the latest changes to the `Cargo. toml` file format, but is currently lacking some of the post-processing features that `cargo-manifest` provides. License ------------------------------------------------------------------------------  This project is licensed under either of  - Apache License, Version 2. 0, ([LICENSE-APACHE](LICENSE-APACHE) or   <http://www."
  },
  {
    "name": "oxigraph_server",
    "replacement": "oxigraph-cli",
    "message": "Deprecated Oxigraph SPARQL HTTP server, use oxigraph-cli instead"
  },
  {
    "name": "hyprforest-installer",
    "replacement": "HERE",
    "message": "# Hyprforest  <p align=\"center\"><img src=\"hyprforest_logo. png\" /></p>  This create is deprecated and moved [HERE](https://crates. io/crates/autoricer)."
  },
  {
    "name": "pact",
    "replacement": "codas",
    "message": "This crate has been renamed and moved to the [`codas`](https://crates. io/crates/codas) crate. If this crate is not updated by June 21st, 2025, please feel free to contact [`hello@alicorn. systems`] about transferring the ownership (and/or purpose of) this crate. ## License  Copyright 2024 Alicorn Systems, Inc. Licensed under the GNU Affero General Public License version 3, as published by the Free Software Foundation."
  },
  {
    "name": "wasm-compose",
    "replacement": "wac",
    "message": "style=flat-square\" alt=\"Download\" /></a>     <a href=\"https://docs. rs/wasm-compose/\"><img src=\"https://img. shields. io/static/v1? label=docs&message=wasm-compose&color=blue&style=flat-square\" alt=\"docs. rs docs\" /></a>   </p> </div>  ## Overview  **IMPORTANT**:  `wasm-compose` has been been deprecated in favor of [`wac`](https://github. com/bytecodealliance/wac). `wasm-compose` is a library for composing [WebAssembly components](https://github. com/webassembly/component-model) from other WebAssembly components. It is made available as the `compose` subcommand of `wasm-tools`. ## Usage  To compose a component, run the `compose` command:  ```sh wasm-tools compose -o composed."
  },
  {
    "name": "risc0-zkvm",
    "replacement": "metal",
    "message": "| Feature          | Target(s)         | Implies    | Description                                                                                                                                                  | | ---------------- | ----------------- | ---------- | ------------------------------------------------------------------------------------------------------------------------------------------------------------ | | client           | all except rv32im | std        | Enables the client API. | | cuda             |                   | prove, std | Enables CUDA GPU acceleration for the prover. Requires CUDA toolkit to be installed. | | disable-dev-mode | all except rv32im |            | Disables dev mode so that proving and verifying may not be faked. Used to prevent a misplaced `RISC0_DEV_MODE` from breaking security in production systems. | | metal            | macos             | prove, std | Deprecated - Metal GPU acceleration for the prover is now enabled by default on Apple Silicon. | | prove            | all except rv32im | std        | Enables the prover, incompatible within the zkvm guest. | | std              | all               |            | Support for the Rust stdlib. |  [`cargo risczero` tool]: https://crates. io/crates/cargo-risczero [dev-docs]: https://dev. risczero."
  },
  {
    "name": "trauma",
    "replacement": "Zou",
    "message": "download(&downloads). await;     Ok(()) } ```  More examples can be found in the [examples](examples) folder. They are well commented and will guide you through the different features of this library. ## Why another download manager  Before starting this project, I spent some time searching the internet, trying not to reinvent the wheel. And I did find a bunch of interesting existing projects! However they are almost all abandoned:  - DLM: <https://github. com/agourlay/dlm>   - Active, but is just a binary/CLI tool - Snatch: <https://github. com/derniercri/snatch>   - Inactive since Sept '17   - Recommend switching to [Zou] - Zou: <https://github. com/k0pernicus/zou>   - Inactive since Oct '17 - Duma: <https://github. com/mattgathu/duma>   - Inactive since Nov '20 - Siwi: <https://github. com/rs-videos/siwi-download>   - Inactive since Mar '21 - Downloader: <https://github."
  },
  {
    "name": "slip-10",
    "replacement": "hd-wallet",
    "message": "# SLIP-10: Deterministic key generation  > <div class=\"warning\"> > > **Warning** > > `slip-10` crate has been restructured and renamed into > [`hd-wallet`](https://crates. io/crates/hd-wallet). `slip-10` is not likely > to receive any future updates. Please, consider switching to successor library. > > In order to migrate to the successor `hd-wallet v0. 5`, include it into Cargo. toml: > ```toml > hd-wallet = \"0. 5\" > ``` > > Then you'll need to change `slip_10::` references in your code to `hd_wallet::`. For instance, > `slip_10::HardenedIndex` becomes `hd_wallet::HardenedIndex`."
  },
  {
    "name": "unit-prefix",
    "replacement": "number_prefix",
    "message": "# unit-prefix  This project is a fork / continuation of the unmaintained [number_prefix](https://crates. io/crates/number_prefix) crate. The minimum supported Rust version is currently 1. 31 (matching the release of the 2018 edition). API documentation and usage examples are available on [docs. rs](https://docs."
  },
  {
    "name": "rdftk_core",
    "replacement": "rdftk_iri",
    "message": "* Build: updated dependency `rdftk_names`. ### Version 0. 4. 1  * Build: cargo audit/outdated/udeps  ### Version 0. 4. 0  * Feature: moved to new `rdftk_iri` package which uses the `url::Url` and is more   efficient. * Feature: moved to new `rdftk_names` package. * Feature: replaced own implementation of `LanguageTag` with that from the package   `language_tags`. * Refactor: made the trait `ObjectNode` inherit from `SubjectNode`. * Refactor: move `SimpleSubjectNode` to be a tuple type, and implement `From<>` for   all `Subject` variants. * Build: updated Rust edition from 2018 to 2021."
  },
  {
    "name": "rdftk_names",
    "replacement": "rdftk_iri",
    "message": "* Feature: add new `$name _str` function for namespace members. ### Version 0. 2. 1 * Build: cargo audit/outdated/udeps  ### Version 0. 2. 0  * Feature: moved to new `rdftk_iri` package which uses the `url::Url` and is more   efficient. * Feature: performance improvements in the `namespace` and `nsname` macros. * Feature: removed need for any `use` statements in either macro or client. * Build: updated Rust edition from 2018 to 2021. * Docs: run markuplint on `README. md`."
  },
  {
    "name": "rustls-native-certs",
    "replacement": "rustls-platform-verifier",
    "message": "githubusercontent. com/rustls/rustls/main/admin/rustls-logo-web. png)  **rustls-native-certs** allows [rustls](https://github. com/rustls/rustls) to use the platform's native certificate store when operating as a TLS client. > [! IMPORTANT] > Instead of this crate, we suggest using [rustls-platform-verifier](https://github. com/rustls/rustls-platform-verifier), > which provides a more robust solution with a simpler API. This crate is still maintained, > but mostly for use inside the platform verifier on platforms where no other > solution is available. For more context, see > [deployment considerations](https://github. com/rustls/rustls-platform-verifier? tab=readme-ov-file#deployment-considerations)."
  },
  {
    "name": "next-rs",
    "replacement": "opensass",
    "message": "# 📦 Next RS  > ⚠️ **Warning**: This crate has been moved to [`opensass`](https://crates. io/crates/opensass). > Please use [`opensass`](https://crates. io/crates/opensass) instead of `next-rs`. [! [Crates."
  },
  {
    "name": "cargo-color-gen",
    "replacement": "bevygen",
    "message": "⚠️ This repository is no longer maintained ⚠️  This project has been moved to [bevygen](https:://github. com/dsgallups/bevygen). If you would like to own this crate's name, please contact me! # Cargo Color Generator [<img alt=\"github\" src=\"https://img. shields. io/badge/github-dsgallups/color-gen?"
  },
  {
    "name": "libscemu",
    "replacement": "libmwemu",
    "message": "# SCEMU the lib  This repo has been archived, now libscemu, pyscemu and scemu become 1 repo: https://github. com/sha0coder/mwemu https://crates. io/crates/libmwemu     ## Usage  Download the maps32 or maps64 from: https://github. com/sha0coder/scemu  In the example it's on /tmp/ but dont use tmp. Create an emu32 or emu64 and it's important to set the maps folder. ```rust use libscemu::emu32;   fn main() {     let mut emu = emu32();     emu."
  },
  {
    "name": "currency_convertor",
    "replacement": "oer_conversion_rates",
    "message": "# DEPRECATED SEE [oer_conversion_rates](https://crates. io/crates/oer_conversion_rates) ## A minimalist terminal currency convertor **How to run** ``` currency_converter amount starting_currency_code currency_to_convert_to (optional: -r) ``` Example: ``` $ currency_converter 500 USD GBP 500 USD is 394. 5705 GBP ``` It uses the [OER](openexchangerates. org) API with a user provided API key. The first time you run it, you must refresh your currencies with the -r flag. After that, you can do so as needed."
  },
  {
    "name": "gxi_hako",
    "replacement": "GXCI",
    "message": "rust-lang. org/2022/02/24/Rust-1. 77. 2. html)\r \r \r <hr />\r \r ! [alt text](assets/deprecated. png)\r \r # Deprecated\r 这个库基本上已经停止维护了，或者说已经被整合进了新的库之中，新的库是GXCI，它包含大恒相机SDK本地相机部分的全部原生实现，并且提供了对应的HAL封装，可以在[github](https://www. github. com/zoneherobrine/gxci)和[crates](https://crates. io/crates/gxci)上查看\r \r This project is deprecated, or it has been integrated into a new project, the new project is GXCI, it's in[github](https://www. github."
  },
  {
    "name": "comfy-table",
    "replacement": "Comfy-table",
    "message": "io/crates/term-table) is pretty basic in terms of features. My goal with the project is to provide a good set of tools for rendering CLI tables, while also allowing users to bring their own tools for things like colours. One thing that is unique to `term-table` (as far as I'm aware) is the ability to have different number of columns in each row of the table. ### Prettytables-rs  [`prettytables-rs`](https://crates. io/crates/prettytable-rs) provides functionality for formatting and aligning tables. It his however abandoned since over three years and a [rustsec/advisory-db](https://github. com/rustsec/advisory-db/issues/1173) entry has been requested. ### Comfy-table  One of [`comfy-table`](https://crates. io/crates/comfy-table)'s big foci is on providing a minimalistic, but rock-solid library for building text-based tables. This means that the code is very well tested, no usage of `unsafe` and `unwrap` is only used if we can be absolutely sure that it's safe. There're only one occurrence of `unsafe` in all of comfy-table's dependencies, to be exact inside the `tty` communication code, which can be explicitly disabled."
  },
  {
    "name": "maili-superchain",
    "replacement": "maili-genesis",
    "message": "## `maili-superchain`  This crate has been deprecated. These types are now available in [`maili-genesis`](https://crates. io/crates/maili-genesis)."
  },
  {
    "name": "tsify-next",
    "replacement": "tsify",
    "message": "# (Deprecated)  [Tsify](https://github. com/madonoharu/tsify) now has all the features of `tsify-next`; `tsify-next` has served its purpose and will no longer receive updates. Use `tsify` instead. # Tsify-next  Tsify-next is a library for generating TypeScript definitions from Rust code. The original [Tsify](https://github. com/madonoharu/tsify) appears to be in hibernation mode."
  },
  {
    "name": "opentelemetry-zpages",
    "replacement": "OpenTelemetry",
    "message": "# OpenTelemetry ZPages  > [! WARNING]   > **This crate is deprecated and no longer maintained. **  ! [OpenTelemetry — An observability framework for cloud-native software. ][splash]  [splash]: https://raw. githubusercontent. com/open-telemetry/opentelemetry-rust/master/assets/logo-text."
  },
  {
    "name": "git-next-webhook-actor",
    "replacement": "git-next",
    "message": "[deprecated crate] webhook actor for git-next, the trunk-based development manager"
  },
  {
    "name": "hlist2",
    "replacement": "frunk",
    "message": "[i32, f64, bool]`\r instead of `Cons<i32, Cons<f64, Cons<bool, Nil>>>`. ## Tuple compatibility\r \r Also this crate has a compatibility with tuple types. It implements conversion between heterogenous lists and their tuple forms\r when tuple has length of 12 and less, and vise versa. ## Features\r \r This crate uses **no unsafe code** to provide the same safety guarantees the Rust programming language provides. This crate is `no_std`, so it can be used freely and with no fear in embedded environment. ## Inspirations\r \r This crate is intended to be an alternative to unmaintained [hlist](https://github. com/Sgeo/hlist) crate. This is also inspired by another open source crate [frunk](https://github. com/lloydmeta/frunk). ## License\r \r Licensed under either of\r \r - Apache License, Version 2. 0, ([LICENSE-APACHE](."
  },
  {
    "name": "adafruit-lcd-backpack",
    "replacement": "i2c-character-display",
    "message": "# adafruit-lcd-backpack  ## THIS LIBRARY IS NO LONGER MAINTAINED This library has not been updated to be compatible with `embedded-hal` version 1. 0. 0 and later. It is recommended to use the [`i2c-character-display`](https://crates. io/crates/i2c-character-display) driver instead ([repository](https://github. com/michaelkamprath/i2c-character-display)), which is compatible with `embedded-hal` version 1."
  },
  {
    "name": "packai",
    "replacement": "AIPACK",
    "message": "DEPRECATED - Use AIPACK crate"
  },
  {
    "name": "boa_string",
    "replacement": "boa_unicode",
    "message": "query=event%3Apush+branch%3Amain  ## Live Demo (WASM)  Try out the engine now at the live WASM playground [here](https://boajs. dev/playground)! Prefer a CLI? Feel free to try out `boa_cli`! ## Boa Crates  Boa currently publishes and actively maintains the following crates:  - **`boa_ast`** - Boa's ECMAScript Abstract Syntax Tree - **`boa_cli`** - Boa's CLI && REPL implementation - **`boa_engine`** - Boa's implementation of ECMAScript builtin objects and   execution - **`boa_gc`** - Boa's garbage collector - **`boa_interner`** - Boa's string interner - **`boa_parser`** - Boa's lexer and parser - **`boa_profiler`** - Boa's code profiler - **`boa_icu_provider`** - Boa's ICU4X data provider - **`boa_runtime`** - Boa's WebAPI features - **`boa_string`** - Boa's ECMAScript string implementation. Please note: the `Boa` and `boa_unicode` crates are deprecated. ## Boa Engine Example  To use `Boa` simply follow the below. Add the below dependency to your `Cargo. toml`:  ```toml [dependencies] boa_engine = \"0. 19. 0\" ```  Then in `main."
  },
  {
    "name": "rapier3d-stl",
    "replacement": "rapier3d-meshloader",
    "message": "Deprecated. Use rapier3d-meshloader instead."
  },
  {
    "name": "cocoa",
    "replacement": "objc2",
    "message": "Cocoa-rs --------  NOTE: This crate has been deprecated in favour of the `objc2` crates. This crate provides Rust bindings to Cocoa for macOS. It's dual-licensed MIT / Apache 2. 0. If you'd like to help improve cocoa-rs, check out [the Servo contributing guide](https://github. com/servo/servo/blob/main/CONTRIBUTING."
  },
  {
    "name": "pretty_assertions_sorted_fork",
    "replacement": "pretty_assertions",
    "message": "# Pretty Assertions (Sorted) (FORK)  This crate is deprecated please use [this one](https://crates. io/crates/pretty_assertions_sorted)  [main repo](https://github. com/DarrenTsung/rust-pretty-assertions-sorted)  In this fork add sort_all for ignore ordering in array  If we dont need ignore ordering in array please use [this crate](https://crates. io/crates/pretty_assertions_sorted)  This crate wraps the [pretty_assertions](https://raw. githubusercontent. com/colin-kiegel/rust-pretty-assertions) crate, which highlights differences in a test failure via a colorful diff."
  },
  {
    "name": "tooey",
    "replacement": "Tuit",
    "message": "# Tooey has been superseded by [Tuit](https://crates. io/crates/tuit)  ## Tooey was a barebones TUI library, but it was quite flawed. Tuit fixes those faults. Made for use with [SprinklesOS](https://github. com/T-O-R-U-S/sprinkles_os). # Tooey is in its infancy."
  },
  {
    "name": "tetanes-web",
    "replacement": "tetanes",
    "message": "# TetaNES Web  ## DEPRECATED  This crate has been merged with [tetanes](https://crates. io/crates/tetanes). A deployed version is available at <http://lukeworks. tech/tetanes-web>. See the [tetanes repository](https://github. com/lukexor/tetanes) for the latest updates."
  },
  {
    "name": "tailwag_orm_macro_logic",
    "replacement": "tailwag_orm_macros",
    "message": "The logic for the macro exports, supporting the tailwag_orm crate. This crate will eventually be deprecated and merged into the tailwag_orm_macros crate."
  },
  {
    "name": "rc_event_queue",
    "replacement": "chute",
    "message": "yml/badge. svg? branch=master)](https://github. com/tower120/rc_event_queue/actions/workflows/ci. yml)\r \r > [! WARNING]  \r > Project is deprecated in favor of [chute](https://github. com/tower120/chute/). > \r > [Chute](https://github. com/tower120/chute/) is a continuation of this project, featuring truly lock-free MPMC \r > writers that are superlinearly faster in highly concurrent scenarios. ## Reader counted event queue\r \r Fast, concurrent FIFO event queue _(or message queue)_. Multiple consumers receive every message."
  },
  {
    "name": "axum_garde",
    "replacement": "axum-valid",
    "message": "Deprecated in favor of axum-valid"
  },
  {
    "name": "basecracker",
    "replacement": "Ciphey",
    "message": "io/gh/skyf0l/basecracker/branch/master/graph/badge. svg)](https://codecov. io/gh/skyf0l/basecracker)  BaseCracker is a tool to encode, decode and crack encoded data. It can be really useful to crack some random encoded strings in CTFs. > [! IMPORTANT] > Archived because [Ciphey](https://github. com/Ciphey/Ciphey) is already way better for this. . . ## Installation  From crates. io:  ```console cargo install basecracker ```  ## Current supported encodings  - base2 / binary (padded by 8) - base10 / decimal - hexadecimal - base32 (RFC4648) - base36 - base58 - base62 - base64 - base85  ## Options  ``` Encode, Decode and Crack encoded data, useful to crack some random encoded strings in CTFs."
  },
  {
    "name": "rokit",
    "replacement": "Rokit",
    "message": "toml` / `aftman. toml`, while Foreman / Aftman are incompatible with each other by design. - Massively improved installation times and more consistent cross-platform behavior. - No manual editing of manifest or link files. ### For everyone else  While Foreman and Aftman have been working great for a long time, they have an uncertain future as toolchain managers for the community. <br/> Most of their existing problems boil down to issues with maintainership:  - [Foreman][foreman] is maintained by Roblox itself, and has angled itself towards internal uses at Roblox. - [Aftman][aftman] is maintained by a third party that is no longer interested in Roblox. Rokit aims to solve this by taking a community-first approach and being built with community contributions in mind. <br/> Rokit also acknowledges that developers will not migrate from any of the existing toolchain managers _without good reason_, it needs to be **_substantially better_** and require **_virtually no effort_** to migrate. </details>  <details> <summary> <b>How do you pronounce Rokit? </b> </summary>  ### However you want."
  },
  {
    "name": "shared-bus-rtic",
    "replacement": "embedded-hal-bus",
    "message": "# shared-bus-rtic\r Provides macros and type definitions for using a shared peripheral bus in an RTIC application\r \r ## :warning: Deprecation Notice :warning:\r \r With the release of `embedded-hal` v1. 0, this crate is no longer necessary. Instead, users should\r migrate to using `embedded-hal` v1. 0 traits alongside the [`embedded-hal-bus`](https://crates. io/crates/embedded-hal-bus). ## Description\r \r Note that all of the drivers that use the same underlying bus **must** be stored within a single\r resource (e."
  },
  {
    "name": "viffy",
    "replacement": "nalgebra",
    "message": "# Memory model notes  Rust does not expect multiple threads to write to the same section of memory blocks. Viffy relies on that memory model. This is why it's YOUR responsability to appropriatedly manage thread lifetimes. A cell provided is `ShareableCell<T>`, this cell is entirely unsound with the normal Rust memory model and provides *multiple mutable references* to the same memory block. # Note about mathematical operations  Viffy provides it's subset of mathematical operations in `math. rs`, those are just dumb versions of the structures/operations - it's recommended to use `nalgebra` in place (and implement the serializer/deserializer if you need it). Since viffy does not seek to be a mathematical library. Those shall only be used if you want a quick \"test\" of viffy itself. # Database generator  A small SoA database generator is also provided, there is basic support for some relational linkage between objects. On your build. rs you can quickly implement the generator by adding viffy as a build-dependency:  Cargo."
  },
  {
    "name": "ureq",
    "replacement": "rustls-platform-verifier",
    "message": "There is also no mechanism for [SCT], [CRL]s or other revocations. To maintain a \"fresh\" list of root certs, you need to bump the ureq dependency from time to time. The main reason for chosing this as the default is to minimize the number of dependencies. More details about this decision can be found at [PR 818]. If your use case for ureq is talking to a limited number of servers with high trust, the default setting is likely sufficient. If you use ureq with a high number of servers, or servers you don't trust, we recommend using the platform verifier (see below). #### platform-verifier  The [rustls-platform-verifier] crate provides access to natively checking the certificate via your OS. To use this verifier, you need to enable it using feature flag **platform-verifier** as well as configure an agent to use it. ```rust use ureq::Agent; use ureq::tls::{TlsConfig, RootCerts};  let agent = Agent::config_builder()     . tls_config(         TlsConfig::builder()             . root_certs(RootCerts::PlatformVerifier)             ."
  },
  {
    "name": "tun2",
    "replacement": "tun",
    "message": "[WTFPL](http://img. shields. io/badge/license-WTFPL-blue. svg)\r \r This crate allows the creation and usage of TUN interfaces, the aim is to make this cross-platform. <b>Now that I (@ssrlive) am a co-contributor of the [tun](https://crates. io/crates/tun) crate,\r this crate is no longer maintained and all code is merged into the [tun](https://crates. io/crates/tun) crate. </b>\r \r Usage\r -----\r First, add the following to your `Cargo. toml`:\r \r ```toml\r [dependencies]\r tun2 = \"4\"\r ```\r \r If you want to use the TUN interface with mio/tokio, you need to enable the `async` feature:\r \r ```toml\r [dependencies]\r tun2 = { version = \"4\", features = [\"async\"] }\r ```\r \r Example\r -------\r The following example creates and configures a TUN interface and starts reading\r packets from it. ```rust\r use std::io::Read;\r \r fn main() -> Result<(), Box<dyn std::error::Error + Send + Sync + 'static>> {\r     let mut config = tun2::Configuration::default();\r     config\r         . address((10, 0, 0, 9))\r         ."
  },
  {
    "name": "inc-complete",
    "replacement": "Salsa",
    "message": "# Inc-Complete  Inc-Complete is a library for writing **in**cremental **comp**utations that re-execute the minimum number of steps when an input is changed. Example uses:  - Compilers: re-compile only the portion of a program which has changed - Spreadsheets: re-compute only formulas which rely on changed cells  Compared to existing solutions like [salsa](https://github. com/salsa-rs/salsa) or [adapton](https://docs. rs/adapton/latest/adapton/), inc-complete is built from the ground-up to support one feature: (de)serialization to enable incremental compilers across separate compiler runs. If you do not need this I recommend using a more mature library like Salsa instead. If you do need this then inc-complete is the only library for incremental compilation I'm aware of for Rust which supports this. ## Status  This library is in a very early but working state. Expect the API to change over time, and expect certain patterns to be somewhat obtuse. Additionally, while serialization is working, the format is not currently stable across releases of inc-complete. ## Current Features  [x] Load from disk   - Manual save and load to disk to restart from where the previous program run left off."
  },
  {
    "name": "strck_ident",
    "replacement": "strck",
    "message": "[! [github-img]][github-url] [! [crates-img]][crates-url] [! [docs-img]][docs-url]  Checked owned and borrowed Unicode-based identifiers. # 🚧 Deprecation Notice 🚧  This crate has been merged into `strck` under the `ident` feature flag, and now is a thin wrapper that just re-exports from it. # Overview  `strck` is a crate for creating checked owned and borrowed strings with arbitrary invariants as the type level. This crate extends `strct` by providing `Invariant`s for Unicode identifiers and Rust identifiers. In the future, this crate may support identifiers for other languages as well. This crate re-exports `Check`, `Ck`, `IntoCheck`, and `IntoCk` from `strck`, so other libraries only have to depend on this crate. # Documentation  See the [crate-level documentation][docs-url] for more details."
  },
  {
    "name": "hpm5361-pac",
    "replacement": "hpm-metapac",
    "message": "DEPRECATED, use hpm-metapac instead"
  },
  {
    "name": "handlebars_misc_helpers",
    "replacement": "set",
    "message": "html) for more samples, and syntax info,. . . - This block can be combined with conversion helper/block for YAML & TOML to provide edition capabilities for those format - the output should be a valid JSON, except if `string_output = false` is set as a parameter of the block. <table> <tr> <td><pre><code>{{#jsonnet}} local v = {\"foo\":{\"bar\":{\"baz\":false}}}; v {   \"foo\" +: {       \"bar\" +: {           \"baz2\": true       }   } } {{/jsonnet}}</code></pre> </td> <td><pre><code>{   \"foo\": {       \"bar\": {           \"baz\": false,           \"baz2\": true       }   } }</code></pre></td> </tr> </table>  ## Assign, set  The helpers can assign a variable to use later in the template. ⚠️ `assign` is deprecated and replaced by `set` (more compact and allows multiple assignments in one call)  | usage                                                             | output          | | ----------------------------------------------------------------- | --------------- | | `{{ assign \"foo\" \"hello world\" }}{{ foo }}`                       | `hello world`   | | `{{ set foo=\"{}\" }}`                                              | ``              | | `{{ set foo=\"{}\" }}{{ foo }}`                                     | `{}`            | | `{{ set foo=\"hello world\" }}{{ foo }}`                            | `hello world`   | | `{{ set foo={} }}{{ foo }}`                                       | `[object]`      | | `{{ set foo={\"bar\": 33} }}{{ foo }}`                              | `[object]`      | | `{{ set foo={\"bar\": 33} }}{{ foo. bar }}`                          | `33`            | | `{{ set foo=\"world\" bar=\"hello\" }}>{{ bar }} {{ foo }}<`          | `>hello world<` | | `{{ set foo=\"world\" }}{{ set bar=\"hello\" }}>{{ bar }} {{ foo }}<` | `>hello world<` |  ## Replace section  This helper can replace a section delimited by a boundary. For example with this template:  ```handlebars {{~#replace_section  begin=\"<! -- #region head-->\" end=\"<! -- #endregion head -->\" content }} This is the new content of the block {{~/replace_section}} ```  The `content` having  ```html <! DOCTYPE html> <html lang=\"en\">   <head>     <meta charset=\"UTF-8\" />     <meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge\" />     <meta name=\"viewport\" content=\"width=device-width, initial-scale=1."
  },
  {
    "name": "merge-yaml-hash",
    "replacement": "yaml-hash",
    "message": "# About  YAML Hash with merge/update capabilities  Wrapper around `yaml_rust::yaml::Hash`, which is a type alias for `linked_hash_map::LinkedHashMap`  **NOTE: Highly recommend using [`yaml-hash`] instead of this crate since it uses [`yaml-rust2`] versus the unmaintained [`yaml-rust`]. Also, it provides additional functionality, including recursive get value via dotted key. **  [`yaml-hash`]: https://crates. io/crates/yaml-hash [`yaml-rust`]: https://crates. io/crates/yaml-rust [`yaml-rust2`]: https://crates. io/crates/yaml-rust2  # Example  ``` use merge_yaml_hash::{MergeYamlHash, Yaml};  let mut hash = MergeYamlHash::new();  // Merge YAML data from strings hash."
  },
  {
    "name": "safina-sync",
    "replacement": "safina",
    "message": "Safe structs for sharing or sending data between async tasks - ARCHIVED: Code moved to `safina` crate."
  },
  {
    "name": "safina-timer",
    "replacement": "safina",
    "message": "Safe async timers - ARCHIVED: Code moved to `safina` crate."
  },
  {
    "name": "safina-net",
    "replacement": "safina",
    "message": "Safe async network functions - ARCHIVED: Code moved to `safina` crate."
  },
  {
    "name": "jose",
    "replacement": "ring",
    "message": "The following backends are supported:  - [x] `crypto-rustcrytpo`: Uses the [RustCrypto] ecosystem of crates. The main       benefit of this backend is the possibility to compile this crate without       `std`. - [x] `crypto-openssl`: Uses the [OpenSSL] library. - `crypto-openssl-vendored`: Same as the other OpenSSL feature, but     additionally enabled the `openssl/vendored` feature - [x] `crypto-aws-lc`: Uses the [AWS-LC] library,by making use of the OpenSSL       compatible API aws-lc provides. - [x] `crypto-ring`: Uses the [`ring`] pure-Rust library. Note, that the       [`ring`] library is       [no longer actively maintained](https://rustsec. org/advisories/RUSTSEC-2025-0010. html). However, due to wide usage of the crate, it is still provided as a viable       backend  ## License  Licensed under either of  - Apache License, Version 2. 0 ([LICENSE-APACHE](LICENSE-APACHE) or   <http://www. apache."
  },
  {
    "name": "safina-executor",
    "replacement": "safina",
    "message": "Safe async runtime executor - ARCHIVED: Code moved to `safina` crate."
  },
  {
    "name": "bcld2",
    "replacement": "whatlang",
    "message": "io/crates/cld2) [! [License](https://img. shields. io/crates/l/cld2. svg)](https://crates. io/crates/cld2)  **DEPRECATED in favor of [whatlang][],** which is native Rust and smaller. If you have a compelling use-case for this code, please open an issue. Simple PRs, especially for bug fixes, will still be read and possibly merged. [whatlang]: https://crates. io/crates/whatlang  This Rust library detects the language of a string using the [cld2 library][cld2] from the Chromium project. To use it, add the following lines to your `Cargo."
  },
  {
    "name": "safina-async-test",
    "replacement": "safina",
    "message": "Macro for running async tests - ARCHIVED: Code moved to `safina` crate."
  },
  {
    "name": "safina-async-test-core",
    "replacement": "safina-macros",
    "message": "Procedural macro for the `safina-async-test` package - ARCHIVED: Code moved to `safina-macros` crate."
  },
  {
    "name": "kaledis_dalbit",
    "replacement": "darklua",
    "message": "## Real-world use cases\r - [Kaledis](https://github. com/orpos/kaledis) - A tool that enables Luau to work with Love2D, simplifying project management, transpiling, and configuration. - Overblox - A tool that can transpile Roblox scripts to OVERDARE scripts using Dalbit. ## Why `darklua-demo` over `darklua`? - `darklua-demo` is a temporary fork to work properly with dal. - `darklua-demo` will be replaced by official `darklua` once darklua released with important features to work properly with dal. ## Contributions\r Any issues, advices, and PRs for contribution are welcome! ## Special Thanks\r - [seaofvoices/darklua](https://github. com/seaofvoices/darklua) - Providing important and cool lua mutating rules. - [Kampfkarren/full-moon](https://github. com/Kampfkarren/full-moon) - A lossless Lua parser."
  },
  {
    "name": "ark-ec-vrfs",
    "replacement": "ark-vrf",
    "message": "DEPRECATED: This crate has been superseeded by `ark-vrf`."
  },
  {
    "name": "cadeau-sys",
    "replacement": "xmf-sys",
    "message": "# A dangerously unsafe cadeau to Rust  :warn: This crate has been replaced by [xmf-sys](https://crates. io/crates/xmf-sys) :warn:  Low-level and unidiomatic bindings to Cadeau library, performance primitives and media foundation functions. It’s possible to choose between dynamically loading the library at runtime by enabling the `dlopen` feature, or regular static / dynamic linkage at build-time. The API itself is identical except for a `init` function which must be called before using other API when `dlopen` feature is enabled."
  },
  {
    "name": "bnf_sampler",
    "replacement": "kbnf",
    "message": "io/crates/bnf_sampler)[! [docs. rs](https://docs. rs/web-rwkv/badge. svg)](https://docs. rs/bnf_sampler)  **This crate is deprecated. Use [kbnf](https://crates. io/crates/kbnf) instead. **  This is a language model sampler that uses recursive descent algorithm to ensure tokens produced by a large language model follow a schema based on [Backus Naur Form(BNF)](https://en. wikipedia. org/wiki/Backus%E2%80%93Naur_form)."
  },
  {
    "name": "mavryk-smart-rollup-core",
    "replacement": "mavryk-smart-rollup-host",
    "message": "- manipulating **durable storage**. This crate provides the definitions of these host functions, including linking to the `smart_rollup_core` WASM module. In addition, various constants (such as error codes) used when interacting with these host functions, are defined here. # Safety  This crate exposes the host functions through the `SmartRollupCore` trait, which is unsafe to use - as it makes no effort to provide a *safe rust* API. A safe API is defined in the `mavryk-smart-rollup-host` crate, as the `Runtime` trait. It's therefore recommended to use the `Runtime` trait directly from the `mavryk-smart-rollup-host` crate, or alternatively directly through the `mavryk-smart-rollup` top-level SDK crate."
  },
  {
    "name": "ffmpeg-sys-fframes",
    "replacement": "ffmpeg-sys-next",
    "message": "cacheSeconds=3600)](https://crates. io/crates/ffmpeg-sys-next) [! [build](https://github. com/zmwangx/rust-ffmpeg-sys/workflows/build/badge. svg)](https://github. com/zmwangx/rust-ffmpeg-sys/actions)  This is a fork of the abandoned [ffmpeg-sys](https://github. com/meh/rust-ffmpeg-sys) crate. You can find this crate as [ffmpeg-sys-next](https://crates. io/crates/ffmpeg-sys-next) on crates. io. This crate contains low level bindings to FFmpeg."
  },
  {
    "name": "spring-stream",
    "replacement": "redpanda",
    "message": "0 provides stream data structure, so the redis version is required to be greater than 5. 0. For details, please refer to [redis stream official documentation](https://redis. io/docs/latest/develop/data-types/streams/). * Kafka is suitable for distributed deployment projects with larger message volumes. Kafka can be replaced with [redpanda](https://github. com/redpanda-data/redpanda), which is a high-performance message middleware written in C++ and compatible with the kafka protocol. It can completely get rid of the JVM that Kafka relies on. ### Detailed stream configuration ```toml # File stream configuration [stream. file] connect = { create_file = \"CreateIfNotExists\" }  # Standard stream configuration [stream. stdio] connect = { loopback = false }  # Redis stream configuration [stream."
  },
  {
    "name": "zenoh-plugin-dds",
    "replacement": "zenoh-plugin-ros2dds",
    "message": "However we strongly advise ROS 2 users to rather try the **new [`zenoh-plugin-ros2dds`](https://github. com/eclipse-zenoh/zenoh-plugin-ros2dds)** which is dedicated to the support of ROS 2 with DDS. Thanks to a better integration with ROS 2 concepts, this new plugin comes with those benefits:  - Better integration of the **ROS graph** (all ROS topics/services/actions can be seen across bridges) - Better support of **ROS toolings** (ros2 CLI, rviz2. . . ) - Configuration of a **ROS namespace** on the bridge (instead of on each ROS Node) - Services and Action as **Zenoh Queryables** with more efficiency and scalability that RPC over DDS - Even more **compact discovery information** between the bridges (not forwarding all `ros_discovery_info` messages as such)  This Zenoh plugin for DDS will eventually be deprecated for ROS 2 usage. ## Plugin or bridge ? This software is built in 2 ways to choose from:  - `zenoh-plugin-dds`: a Zenoh plugin - a dynamic library that can be loaded by a Zenoh router - `zenoh-bridge-dds`: a standalone executable  The features and configurations described in this document applies to both. Meaning the _\"plugin\"_ and _\"bridge\"_  words are interchangeables in the rest of this document. ## How to install it  To install the latest release of either the DDS plugin for the Zenoh router, either the `zenoh-bridge-dds` standalone executable, you can do as follows:  ### Manual installation (all platforms)  All release packages can be downloaded from:    - [https://download. eclipse."
  },
  {
    "name": "async-std-resolver",
    "replacement": "hickory-dns",
    "message": "com/hickory-dns/hickory-dns) contains other libraries for DNS: a [client library](https://crates. io/crates/hickory-client) for raw protocol usage, a [server library](https://crates. io/crates/hickory-server) for hosting zones, and variations on the TLS implementation over [rustls](https://crates. io/crates/hickory-dns-rustls) and [native-tls](https://crates. io/crates/hickory-dns-native-tls). **NOTICE** This project was rebranded from Trust-DNS to Hickory DNS and has been moved to the https://github. com/hickory-dns/hickory-dns organization and repo, from `0. 24` and onward. ## Features  - Various IPv4 and IPv6 lookup strategies - `/etc/resolv. conf` based configuration on Unix/Posix systems - NameServer pools with performance based priority usage - Caching of query results - NxDomain/NoData caching (negative caching) - TBD (in tokio impl): DNSSEC validation - Generic Record Type Lookup - CNAME chain resolution - _experimental_ mDNS support (enable with `mdns` feature) - TBD (in tokio impl): DNS over TLS (utilizing `native-tls`, `rustls`, and `openssl`; `native-tls` or `rustls` are recommended) - TBD (in tokio impl): DNS over HTTPS (currently only supports `rustls`)  ## Example  ```rust use std::net::*; use async_std::prelude::*; use async_std_resolver::{resolver, config};  #[async_std::main] async fn main() {   // Construct a new Resolver with default configuration options   let resolver = resolver(     config::ResolverConfig::default(),     config::ResolverOpts::default(),   ). await;    // Lookup the IP addresses associated with a name."
  },
  {
    "name": "lender",
    "replacement": "chunky",
    "message": "Similarly to what happens with standard iterators, besides the fundamental  [`Lender`] trait there is an [`IntoLender`] trait, and methods such as [`for_each`](https://docs. rs/lender/latest/lender/trait. Lender. html#method. for_each). Indeed, the crate implements for [`Lender`] all of the methods as `Iterator`, except `partition_in_place` and `array_chunks` (the latter being replaced by [`chunky`](https://docs. rs/lender/latest/lender/trait. Lender. html#method. chunky)), and most methods provide the same functionality as the equivalent `Iterator` method. Notable differences in behavior include [`next_chunk`](https://docs."
  },
  {
    "name": "ordinal-trait",
    "replacement": "ordinal",
    "message": "# Ordinal formatting  > ⚠️ Deprecated ⚠️ > > Use [`ordinal`](https://crates. io/crates/ordinal). See [history](https://github. com/heaths/ordinal-rs/blob/main/README. md#history) > for more information. Format numbers as ordinals efficiently."
  },
  {
    "name": "bevy_gltf_blueprints",
    "replacement": "Blenvy",
    "message": "md) [! [Bevy tracking](https://img. shields. io/badge/Bevy%20tracking-released%20version-lightblue)](https://github. com/bevyengine/bevy/blob/main/docs/plugins_guidelines. md#main-branch-tracking)  # bevy_gltf_blueprints (deprecated in favor of Blenvy)  > bevy_gltf_blueprints has been deprecated in favor of its successor [Blenvy](https://crates. io/crates/blenvy), part of the [Blenvy project](https://github. com/kaosat-dev/Blenvy). No further development or maintenance will be done for Bevy bevy_gltf_blueprints. See [#194](https://github. com/kaosat-dev/Blenvy/issues/194) for background."
  },
  {
    "name": "bevy_registry_export",
    "replacement": "Blenvy",
    "message": "md) [! [Bevy tracking](https://img. shields. io/badge/Bevy%20tracking-released%20version-lightblue)](https://github. com/bevyengine/bevy/blob/main/docs/plugins_guidelines. md#main-branch-tracking)  # bevy_registry_export (deprecated in favor of Blenvy)  > bevy_registry_export has been deprecated in favor of its successor [Blenvy](https://crates. io/crates/blenvy), part of the [Blenvy project](https://github. com/kaosat-dev/Blenvy). No further development or maintenance will be done for Bevy bevy_registry_export. See [#194](https://github. com/kaosat-dev/Blenvy/issues/194) for background."
  },
  {
    "name": "bevy_gltf_save_load",
    "replacement": "Blenvy",
    "message": "md) [! [Bevy tracking](https://img. shields. io/badge/Bevy%20tracking-released%20version-lightblue)](https://github. com/bevyengine/bevy/blob/main/docs/plugins_guidelines. md#main-branch-tracking)  # bevy_gltf_save_load (deprecated in favor of Blenvy)  > bevy_gltf_save_load has been deprecated in favor of its successor [Blenvy](https://crates. io/crates/blenvy), part of the [Blenvy project](https://github. com/kaosat-dev/Blenvy). No further development or maintenance will be done for Bevy bevy_gltf_save_load. See [#194](https://github. com/kaosat-dev/Blenvy/issues/194) for background."
  },
  {
    "name": "bevy_gltf_components",
    "replacement": "Blenvy",
    "message": "md) [! [Bevy tracking](https://img. shields. io/badge/Bevy%20tracking-released%20version-lightblue)](https://github. com/bevyengine/bevy/blob/main/docs/plugins_guidelines. md#main-branch-tracking)   # bevy_gltf_components (deprecated in favor of Blenvy)  > bevy_gltf_components has been deprecated in favor of its successor [Blenvy](https://crates. io/crates/blenvy), part of the [Blenvy project](https://github. com/kaosat-dev/Blenvy). No further development or maintenance will be done for Bevy bevy_gltf_components. See [#194](https://github. com/kaosat-dev/Blenvy/issues/194) for background."
  },
  {
    "name": "cpython",
    "replacement": "PyO3",
    "message": "[Build Status](https://github. com/dgrunwald/rust-cpython/actions/workflows/test. yml/badge. svg)](https://github. com/dgrunwald/rust-cpython/actions/workflows/test. yml) ====================  Warning: this package is no longer actively maintained. Please switch to [PyO3](https://github. com/PyO3/pyo3) instead. [Rust](http://www. rust-lang. org/) bindings for the [python](https://www."
  },
  {
    "name": "simple-chunk-allocator",
    "replacement": "galloc",
    "message": "One can see that the performance gets slower with a growing number of chunks. Increasing the chunk size reduces the size of the bookkeeping bitmap which accelerates the lookup. However, a smaller chunk size occupies less heap when only very small allocations are required. Note that performance is better than listed above when the heap is used less frequently and does not run full. ## Differences to Other Allocators ### good_memory_allocator (galloc) **Update November 2022**: I recently found [this new project](https://github. com/MaderNoob/galloc) and, from a first glance, I recommend to use this crate instead of mine for production usage. It has impressive performance and heap utilization at the costs of more complicated code. The repository includes interesting performance numbers from galloc, simple-chunk-allocator (this crate), and linked-list-allocator. ### linked-list-allocator **Update November 2022**: I wrote this paragraph before I found out about galloc. I left it unchanged. The [linked-list-allocator](https://github."
  },
  {
    "name": "hmac-serialiser-rs",
    "replacement": "hmac-serialiser",
    "message": "# ⚠️ Warning: No Longer Maintained ⚠️\r \r Superseded by [hmac-serialiser](https://github. com/KJHJason/hmac-serialiser)\r \r The new library, [hmac-serialiser](https://crates. io/crates/hmac-serialiser), uses implementations from [RustCrypto](https://github. com/RustCrypto) which is fully implemented with Rust instead of relying on [ring](https://crates. io/crates/ring) crate that is implemented with a mix of Assembly, C, and Rust. # hmac-serialiser-rs\r \r [!"
  },
  {
    "name": "blue_engine_core",
    "replacement": "blue_engine",
    "message": "# Blue Engine Core  This is the actual code for the Blue Engine, however we do not recommend using this directly. Look into [blue_engine](https://crates. io/crates/blue_engine) instead."
  },
  {
    "name": "rust-script",
    "replacement": "cargo-eval",
    "message": "64 or newer required. See the [documentation at rust-script. org](https://rust-script. org). ## Related projects - [cargo-script](https://github. com/DanielKeep/cargo-script) - the unmaintained project that `rust-script` was forked from. - [cargo-eval](https://github. com/reitermarkus/cargo-eval/) - maintained fork of `cargo-script`. - [cargo-play](https://github. com/fanzeyi/cargo-play) - local Rust playground. - [runner](https://github."
  },
  {
    "name": "applevisor-sys",
    "replacement": "Applevisor",
    "message": "rs-rustdoc-bf4200? style=for-the-badge\" alt=\"shields. io crates. io\" /></a> </p>  <hr/>  These unsafe bindings provide access to the Apple Silicon `Hypervisor. framework` from Rust programs. It is recommended to use the safe version of this library available at the following locations:   * [Applevisor GitHub repository](https://github. com/impalabs/applevisor)  * [Applevisor crates. io page](https://crates. io/crates/applevisor)  * [Applevisor docs. rs page](https://docs. rs/applevisor)"
  },
  {
    "name": "flagset",
    "replacement": "FlagSet",
    "message": "To generate the flags, procedural macros were used. This implied two separate crates plus additional dependencies. Further, `enumflags` specifies the size of the flags using a `repr($size)` attribute. Unfortunately, this attribute cannot resolve type aliases, such as `c_int`. This makes `enumflags` a poor fit for FFI, which is the most important place for a flags library. The `enumflags` crate also disallows overlapping flags and is not maintained. FlagSet improves on both of these by adopting the `enumflags` natural feel and the `bitflags` mode of flag generation; as well as additional API usage niceties. FlagSet has no dependencies and is extensively documented and tested. It also tries very hard to prevent you from making mistakes by avoiding external usage of the integer types. FlagSet is also a zero-cost abstraction: all functions are inlineable and should reduce to the core integer operations. FlagSet also does not depend on stdlib, so it can be used in `no_std` libraries and applications."
  },
  {
    "name": "ucd-generate",
    "replacement": "regex-cli",
    "message": "pub const BY_NAME: &'static [(&'static str, &'static [(char, char)])] = &[   (\"Dash\", DASH), (\"Hyphen\", HYPHEN), (\"Quotation_Mark\", QUOTATION_MARK), ];  pub const DASH: &'static [(char, char)] = &[   ('-', '-'), ('֊', '֊'), ('־', '־'), ('᐀', '᐀'), ('᠆', '᠆'),   ('‐', '―'), ('⁓', '⁓'), ('⁻', '⁻'), ('₋', '₋'),   ('−', '−'), ('⸗', '⸗'), ('⸚', '⸚'), ('⸺', '⸻'),   ('⹀', '⹀'), ('\\u{2e5d}', '\\u{2e5d}'), ('〜', '〜'), ('〰', '〰'),   ('゠', '゠'), ('︱', '︲'), ('﹘', '﹘'), ('﹣', '﹣'),   ('－', '－'), ('𐺭', '𐺭'), ];  pub const HYPHEN: &'static [(char, char)] = &[   ('-', '-'), ('\\u{ad}', '\\u{ad}'), ('֊', '֊'), ('᠆', '᠆'),   ('‐', '‑'), ('⸗', '⸗'), ('・', '・'), ('﹣', '﹣'),   ('－', '－'), ('･', '･'), ];  pub const QUOTATION_MARK: &'static [(char, char)] = &[   ('\"', '\"'), ('\\'', '\\''), ('«', '«'), ('»', '»'), ('‘', '‟'),   ('‹', '›'), ('⹂', '⹂'), ('「', '』'), ('〝', '〟'),   ('﹁', '﹄'), ('＂', '＂'), ('＇', '＇'), ('｢', '｣'), ]; ```  ### DFA serialization  Prior to `ucd-generate 0. 3. 0`, the sub-commands `dfa` and `regex` could be used to build fully compiled DFAs, serialize them to disk and generate Rust code for deserializing them. This functionality was removed in `0. 3. 0` and [moved to `regex-cli`](https://github. com/rust-lang/regex/tree/master/regex-cli#example-serialize-a-dfa). ### Contributing  The `ucd-generate` tool doesn't have any specific design goals, other than to collect Unicode table generation tasks. If you need `ucd-generate` to do something and it's reasonably straight-forward to add, then just submitting a PR would be great. Otherwise, file an issue and we can discuss. ### Alternatives  The primary alternative is [ICU4X](https://github."
  },
  {
    "name": "regex",
    "replacement": "once_cell",
    "message": "(dates, vec! [       (\"2010\", \"03\", \"14\"),       (\"2014\", \"10\", \"14\"),     ]); } ```  ### Usage: Avoid compiling the same regex in a loop  It is an anti-pattern to compile the same regular expression in a loop since compilation is typically expensive. (It takes anywhere from a few microseconds to a few **milliseconds** depending on the size of the regex. ) Not only is compilation itself expensive, but this also prevents optimizations that reuse allocations internally to the matching engines. In Rust, it can sometimes be a pain to pass regular expressions around if they're used from inside a helper function. Instead, we recommend using the [`once_cell`](https://crates. io/crates/once_cell) crate to ensure that regular expressions are compiled exactly once. For example:  ```rust use {     once_cell::sync::Lazy,     regex::Regex, };  fn some_helper_function(haystack: &str) -> bool {     static RE: Lazy<Regex> = Lazy::new(|| Regex::new(r\". . . \")."
  },
  {
    "name": "ncollide2d-updated",
    "replacement": "parry2d",
    "message": "2 and 3-dimensional collision detection library in Rust. Will be superseded by the parry2d crate."
  },
  {
    "name": "yab32",
    "replacement": "threetwo",
    "message": "**DEPRECATED: Use [threetwo](https://crates. io/crates/threetwo) instead. **"
  },
  {
    "name": "tiberius",
    "replacement": "rustls",
    "message": "This is a good practice and in case of security vulnerabilities, upgrading the system libraries fixes the vulnerability in Tiberius without a recompilation. On Linux we link against OpenSSL, on Windows against schannel and on macOS against Security Framework. Alternatively one can use the `rustls` feature flag to use the Rust native TLS implementation. This way there are no dynamic dependencies to the system. This might be useful in certain installations, but requires a rebuild to update to a new TLS version. For some reasons the Security Framework on macOS does not work with SQL Server TLS settings, and on Apple platforms if needing TLS it is recommended to use `rustls` instead of `native-tls`. The other option is to use the `vendored-openssl` feature flag, that statically links against the latest OpenSSL implementation. The crate can also be compiled without TLS support, but not with both features enabled at the same time. Tiberius has three runtime encryption settings:  | Encryption level | Description                                      | |------------------|--------------------------------------------------| | `Required`       | All traffic is encrypted. (default)              | | `Off`            | Only the login procedure is encrypted. | | `NotSupported`   | None of the traffic is encrypted."
  },
  {
    "name": "ncollide3d-updated",
    "replacement": "parry3d",
    "message": "2 and 3-dimensional collision detection library in Rust. Will be superseded by the parry3d crate."
  },
  {
    "name": "ssip-client",
    "replacement": "ssip-client-async",
    "message": "- [x] List, set voices. - [x] Set rate, pitch, volume. - [x] Notifications. - [x] Message history. The crate is considered as feature complete. It is in maintenance mode. For a real async API, see [ssip-client-async](https://crates. io/crates/ssip-client-async) which is a fork of this crate. Getting Started ---------------  To use the synchronous API or an asynchronous API compatible with low-level crates based on `poll`, use:  ```toml [dependencies] ssip-client = \"0. 10\" ```  For the asynchronous API, use: ```toml [dependencies] ssip-client = { version = \"0. 10\", features = [\"async-mio\"] } ```  Example -------  ```rust use ssip_client::{FifoBuilder, ClientName}; let mut client = fifo::Builder::new()."
  },
  {
    "name": "be_tween",
    "replacement": "bevy_tweening",
    "message": "shields. io/docsrs/be_tween)](https://docs. rs/be_tween/)   # Be-Tween  This will allow you to write rather complex tween sequences. Although Bevy is one of the main targets, this library will work just fine without it. ## Q&A ## Can I use it? Yes, but I recommend using a more mature library like [bevy_tweening](https://crates. io/crates/bevy_tweening). ## Why did you write it? I used bevy_tweening at first. But it has some limits: * Sequences ending with a endlessly looping tween are not supported. * Repeating complex sequences of tweens is not supported I did at first try to tweak bevy_tweening."
  },
  {
    "name": "egui-directx11",
    "replacement": "egui-d3d11",
    "message": "io/crates/egui)\r \r This crate aims to provide a *minimal* set of features and APIs to render\r outputs from `egui` using Direct3D11. ## Quick Start\r \r There is an [`egui-demo`](examples/egui-demo. rs) example, which demonstrates all you need to do to set up a minimal application\r with Direct3D11 and `egui`. This example uses `winit` for window management and\r event handling, while native Win32 APIs should also work well. ## Considerations\r \r This crate is a successor to [`egui-d3d11`](https://crates. io/crates/egui-d3d11),\r which is no longer maintained and has certain issues or inconvenience in some cases. We assume you to be familiar with developing\r graphics applications using Direct3D11, and if not, this crate is not likely\r useful for you. Besides, this crate cares only about rendering outputs\r from `egui`, so it is all *your* responsibility to handle things like\r setting up the window and event loop, creating the device and swap chain, etc. This crate is built upon the *official* Rust bindings of Direct3D11 and DXGI APIs\r from the [`windows`](https://crates. io/crates/windows) crate [maintained by\r Microsoft](https://github. com/microsoft/windows-rs)."
  },
  {
    "name": "webtransport-quinn",
    "replacement": "web-transport-quinn",
    "message": "Deprecated in favor of web-transport-quinn"
  },
  {
    "name": "boa_engine",
    "replacement": "boa_unicode",
    "message": "query=event%3Apush+branch%3Amain  ## Live Demo (WASM)  Try out the engine now at the live WASM playground [here](https://boajs. dev/playground)! Prefer a CLI? Feel free to try out `boa_cli`! ## Boa Crates  Boa currently publishes and actively maintains the following crates:  - **`boa_ast`** - Boa's ECMAScript Abstract Syntax Tree - **`boa_cli`** - Boa's CLI && REPL implementation - **`boa_engine`** - Boa's implementation of ECMAScript builtin objects and   execution - **`boa_gc`** - Boa's garbage collector - **`boa_interner`** - Boa's string interner - **`boa_parser`** - Boa's lexer and parser - **`boa_profiler`** - Boa's code profiler - **`boa_icu_provider`** - Boa's ICU4X data provider - **`boa_runtime`** - Boa's WebAPI features - **`boa_string`** - Boa's ECMAScript string implementation. Please note: the `Boa` and `boa_unicode` crates are deprecated. ## Boa Engine Example  To use `Boa` simply follow the below. Add the below dependency to your `Cargo. toml`:  ```toml [dependencies] boa_engine = \"0. 19. 0\" ```  Then in `main."
  },
  {
    "name": "rdfox-sys",
    "replacement": "rdfox-rs",
    "message": "# rdfox-sys  > :warning: This crate is not ready for production yet. > :warning: This crate, in combination with the [ekg-sparql](https://crates. io/crates/ekg-sparql) crate, > replaces the [rdfox-rs](https://crates. io/crates/rdfox-rs) crate, which is now deprecated. RDFox is a product of [Oxford Semantic Technologies RDFox](https://www. oxfordsemantic. tech/product). RDFox is a high-performance, scalable and lightweight knowledge graph and semantic reasoning engine. It supports the storage, querying and reasoning over large-scale ontologies represented in RDF triples."
  },
  {
    "name": "git-next-git",
    "replacement": "git-next",
    "message": "[deprecated crate] git support for git-next, the trunk-based development manager"
  },
  {
    "name": "cargo-workflows",
    "replacement": "cargo-make",
    "message": "# Cargo workflows  A library for running workflows. > [! WARNING] > This is deprecated, use `cargo-make` instead. ## Usage  First, install the crate using `cargo install cargo-workflows`. Second, initialize a new `workflows. toml` file using `cargo workflows init`. Third, open the file and you should see: ```toml # \"default\" is the default workflow [default]  # Commands to run [default. commands] clippy = [ \"cargo\", \"clippy\" ] build = [ \"cargo\", \"build\", \"--release\" ] run = [ \"cargo\", \"run\", \"--release\" ]  # Environment variables [default."
  },
  {
    "name": "onedrive-fuse",
    "replacement": "rclone",
    "message": "### ! ! This project is unmaintained and deprecated. Please check out [rclone](https://github. com/rclone/rclone) instead. ! ! # onedrive-fuse  [!"
  },
  {
    "name": "yew-alert",
    "replacement": "alert-rs",
    "message": "# ⚠️ Yew Alert  > ⚠️ **Warning**: This crate has been moved to [`alert-rs`](https://crates. io/crates/alert-rs). > Please use [`alert-rs`](https://crates. io/crates/alert-rs) instead of `yew-alert`. [! [Crates."
  },
  {
    "name": "yew-scroll",
    "replacement": "scroll-rs",
    "message": "# 🔝 Yew Scroll  > ⚠️ **Warning**: This crate has been moved to [`scroll-rs`](https://crates. io/crates/scroll-rs). > Please use [`scroll-rs`](https://crates. io/crates/scroll-rs) instead of `yew-scroll`. [! [Crates."
  },
  {
    "name": "neo-crypto",
    "replacement": "cryptolib",
    "message": "# neo-crypto  NOTE: This crate will not be maintained anymore, please refer to [cryptolib](https://crates. io/crates/cryptolib). This algorithm lib supplies you a set of simple interface to achieve your encryption requirements  ## Usage  Add this to your `Cargo. toml`  ```toml [dependencies] neo-crypto = \"<version>\" ```  ## Supported Features  - SHA Family    - AES Family    - CMAC    - AES-MP    - Base64    - Memory Update Protocol    - Padding    - RSA(Developing)     ## Examples  ### SHA  ```rust use neo_crypto::sha::{sha, ShaType}; fn main() {     let msg: String = String::from(\"It is neo-crypto\");     let hash_text: Vec<u8> = sha(&msg, ShaType::SHA256);     println! (\"{:? }\", hash_text); //[110, 61, 35, 228, 69, 228, 253, 91, 91, 79, 229, 196, 34, 253, 109, 35, 46, 241, 255, 188, 82, 162, 166, 25, 181, 96, 140, 196, 94, 203, 100, 177] } ```  Note:  Add the this to `Cargo."
  },
  {
    "name": "yew-navbar",
    "replacement": "navbar",
    "message": "# 🍔 Yew Navbar  > ⚠️ **Warning**: This crate has been moved to [`navbar`](https://crates. io/crates/navbar). > Please use [`navbar`](https://crates. io/crates/navbar) instead of `yew-navbar`. [! [Crates."
  },
  {
    "name": "lombokrs",
    "replacement": "lombok-rs",
    "message": "Implementation  - [x] `@Getter` - `#[derive(Getter)]` - [x] `@Setter` - `#[derive(Setter)]` - [x] `@Builder` - `#[derive(Builder)]` - [x] `@Data` - `#[derive(Data)]` - [ ] -- - [ ] `@EqualsAndHashCode` - `#[derive(EqualsAndHashCode)]` - [ ] `@ToString` - `#[derive(ToString)]` - [ ] `@Value` - `#[derive(Value)]` - [ ] `@NoArgsConstructor` - `#[derive(NoArgsConstructor)]` - [ ] `@AllArgsConstructor` - `#[derive(AllArgsConstructor)]`  ### 2. 1. Explanation  Why the annotations below are not implemented:  - `EqualsAndHashCode` - `ToString` - `Value` - `NoArgsConstructor` - `AllArgsConstructor`  1. In the actual development process, `Equals`, `ToString`, `HashCode`, `Value` etc. are not used very often; 2. `NoArgsConstructor` can be replaced by `Default` Trait; 3. `AllArgsConstructor` can be replaced by builder mode. Based on the above reasons, it is not implemented. If necessary, please use  [lombok-rs](https://github. com/sokomishalov/lombok-rs) crates instead. ## 3."
  },
  {
    "name": "hc-wasmer-compiler-cranelift",
    "replacement": "wasmer-compiler-llvm",
    "message": "shields. io/crates/v/wasmer-compiler-cranelift. svg)](https://crates. io/crates/wasmer-compiler-cranelift)  This crate contains a compiler implementation based on Cranelift. ## Usage  ```rust use wasmer::{Store, EngineBuilder}; use wasmer_compiler_cranelift::Cranelift;  let compiler = Cranelift::new(); let mut store = Store::new(compiler); ```  *Note: you can find a [full working example using Cranelift compiler here][example]. *  ## When to use Cranelift  We recommend using this compiler crate **only for development proposes**. For production we recommend using [`wasmer-compiler-llvm`] as it offers a much better runtime speed (50% faster on average). ### Acknowledgments  This project borrowed some of the function lowering from [`cranelift-wasm`]. Please check [Wasmer `ATTRIBUTIONS`] to further see licenses and other attributions of the project. [example]: https://github. com/wasmerio/wasmer/blob/main/examples/compiler_cranelift."
  },
  {
    "name": "quick-builder",
    "replacement": "bon",
    "message": "shields. io/crates/v/quick-builder)](https://crates. io/crates/quick-builder) ! [maintenance-status](https://img. shields. io/badge/maintenance-deprecated-red. svg)  ## &#9888; Deprecation Notice  This crate is deprecated, since its use case of fallible builders is better served [by the bon crate](http://bon-rs. com/guide/patterns/fallible-builders). ## When Should You Try QuickBuilder? This crate offers a simple, but powerful, compile-time builder pattern generator. The philosophy is to verify as much as possible at compile-time, while also providing a straightforward way to enforce run-time invariants."
  },
  {
    "name": "split-first-char",
    "replacement": "split-char-from-str",
    "message": "This crate is DEPRECATED, use split-char-from-str instead"
  },
  {
    "name": "pxservrs",
    "replacement": "pxserv",
    "message": "# PxServrs - **Deprecated Library Warning / Kullanımdan Kalkan Kütüphane Uyarısı**  **ENGLISH**   The `pxservrs` library is now deprecated and should no longer be used. Please use the updated `pxserv` library instead. **TÜRKÇE**   `pxservrs` kütüphanesi artık kullanımdan kaldırılmıştır ve kullanılmamalıdır. Lütfen bunun yerine güncellenmiş `pxserv` kütüphanesini kullanın."
  },
  {
    "name": "rudof_lib",
    "replacement": "rudof",
    "message": "# rudof_cli  Represents the main entry point for the rudof library. In the future, this crate could be replaced by `rudof`. The goal of this crate is to provide methods and structs that have the same functionality as we currently have in the `rudof` command line tool."
  },
  {
    "name": "superchain-primitives",
    "replacement": "op-alloy-genesis",
    "message": "Deprecated. Please use the 'op-alloy-genesis' crate instead."
  },
  {
    "name": "strason",
    "replacement": "serde_json",
    "message": "# Strason  This project was an early attempt to parse JSON with arbitary-precision numbers before the `arbitrary_precision` feature of `serde_json` was added. It did so by abusing the `serde` API to sneak pointers through `usize`s, and later, by disguising pointers of unrelated types as `&[u8]`s. This involved unjustifiable assumptions about alignment and was likely unsound even when those assumptions were true. It is now archived and unmaintained. Do not use this crate. Use `serde_json` or another JSON parser instead."
  },
  {
    "name": "bind-hal",
    "replacement": "py32-bind-hal",
    "message": "[Crates. io](https://img. shields. io/crates/v/bind-hal. svg)](https://crates. io/crates/bind-hal)\r \r \r \r \r \r # This crate has been separated and moved to [py32-bind-hal](https://crates. io/crates/py32-bind-hal)\r \r \r # This crate is no longer updated, please see [py32-bind-hal](https://crates. io/crates/py32-bind-hal)\r \r \r \r \r \r ------------------------------\r \r ------------------------------\r \r \r This project aims to provide a more complete HAL (Hardware Abstraction Layer). The project uses the vendor-provided C SDK and operates peripherals through bindings, then wraps these C APIs for easy use in Rust. Users can also directly use FFI to perform complex operations without manipulating registers. ## Supported MCU:\r \r ### ---PY32F0xx Series---\r \r **Puya** PY32F002A, PY32F003, PY32F030\r \r **Xinlinggo** XL32F003*, XL32F002A*\r \r **Luat** AIR001\r \r | Peripherals/Functions | Bindings | Easy-to-use func   | Embedded-Hal |\r | --------------------- | -------- | ------------------ | ------------ |\r | GPIO                  | ✔        | ✔                  | ✔            |\r | RCC                   | ✔        | ✔                  | ✖            |\r | Power                 | ✔        | ✔(only sleep/stop) | ✖            |\r | PWM/TIMER             | ✔        |                    |              |\r | RTC                   | ✔        |                    |              |\r | WDG                   | ✔        |                    |              |\r \r | Peripherals/Functions | Bindings | Easy-to-use func | Embedded-Hal | Embedded-Async | Polling | DMA  | IT   |\r | --------------------- | -------- | ---------------- | ------------ | -------------- | ------- | ---- | ---- |\r | EXTI                  | ✔        | ✔                | ✔            | ✔              | ✖ | ✖   | ✔    |\r | I2C                   | ✔        | ✔                | ✔            |                | ✔       |      |      |\r | ADC                   | ✔        | ✔(only polling)              | ✖ | ✖ | ✔ | ✔ |      |\r | USART                 | ✔        | WIP              |              |                |         |      |      |\r | SPI                   | ✔        |                  |              |                |         |      |      |\r | LED                   | ✔        |                  |              |                |         |      |      |\r |                       |          |                  |              |                |         |      |      |\r \r ✖: mcu or embedded-hal not support\r \r WIP: work in progress\r \r Others:\r \r | Interrupt(cortex-m-rt) | Embassy Time-Driver | HAL-Ticks |\r | ---------------------- | ------------------- | --------- |\r \r \r \r ## Why use bindings?"
  },
  {
    "name": "injective-cosmwasm",
    "replacement": "injective-std",
    "message": "> ⚠️ **This package is no longer maintained. **   > Please use [`injective-std`](https://github. com/InjectiveLabs/injective-rust/tree/dev/packages/injective-std) if you want new chain features. For existing functionality, continued usage of `injective-cosmwasm` is possible. > Detailed guidance can be found in the [Injective CosmWasm developer docs](https://docs. injective."
  },
  {
    "name": "multipart2",
    "replacement": "multipart-async",
    "message": "e. `futures`-based) API support will be provided by [multipart-async]. ##### Minimum supported Rust version: 1. 36. 0  ##### Maintenance Status: Passive  As the web ecosystem in Rust moves towards asynchronous APIs, the need for this crate in synchronous API form becomes dubious. This crate in its current form is usable enough, so as of June 2020 it is now in passive maintenance mode; bug reports will be addressed as time permits and PRs will be accepted but otherwise no new development of the existing API is taking place. Look for a release of [multipart-async] soon which targets newer releases of Hyper. ### [Documentation](http://docs. rs/multipart/)  ## Integrations  Example files demonstrating how to use `multipart` with these crates are available under [`examples/`](examples). ### [Hyper ! [](https://img."
  },
  {
    "name": "criterion2",
    "replacement": "bpaf",
    "message": "io/crates/v/criterion. svg\" alt=\"Crates. io\">     </a> </div>  Criterion. <span></span>rs helps you write fast code by detecting and measuring performance improvements or regressions, even small ones, quickly and accurately. You can optimize with confidence, knowing how each change affects the performance of your code. ## Reason for this fork  criterion is [passively-maintained](https://github. com/bheisler/criterion. rs/blob/f1ea31a92ff919a455f36b13c9a45fd74559d0fe/Cargo. toml#L63C27-L63C48) with outdated dependencies. This is fork is updated with:  * renovate bot dependency update * builtin [codspeed](https://codspeed. io) feature * `clap` replaced with [`bpaf`](https://github."
  },
  {
    "name": "lazy-mut-rs",
    "replacement": "lazy_mut",
    "message": "# Crate moved to lazy_mut"
  },
  {
    "name": "hoot",
    "replacement": "ureq-proto",
    "message": "# hoot  WARNING: The hoot crate is discontinued and types moved to `ureq-proto`. License: MIT OR Apache-2. 0"
  },
  {
    "name": "monero-serai-mirror",
    "replacement": "monero-wallet",
    "message": "# monero-serai  A modern Monero transaction library. It provides a modern, Rust-friendly view of the Monero protocol. This library is usable under no-std when the `std` feature (on by default) is disabled. ### Wallet Functionality  monero-serai originally included wallet functionality. That has been moved to monero-wallet. ### Purpose and Support  monero-serai was written for Serai, a decentralized exchange aiming to support Monero. Despite this, monero-serai is intended to be a widely usable library, accurate to Monero. monero-serai guarantees the functionality needed for Serai, yet does not include any functionality specific to Serai. ### Cargo Features  - `std` (on by default): Enables `std` (and with it, more efficient internal   implementations). - `compile-time-generators` (on by default): Derives the generators at   compile-time so they don't need to be derived at runtime."
  },
  {
    "name": "wash-cli",
    "replacement": "wash",
    "message": "q=is%3Aopen+is%3Aissue+label%3A%22good+first+issue%22+label%3A%22wash-cli%22) [! [wash-cli](https://img. shields. io/crates/v/wash-cli)](https://crates. io/crates/wash-cli)  ```console                                      _                 _    _____ _          _ _                                 ____| |               | |  / ____| |        | | |  __      ____ _ ___ _ __ ___  / ____| | ___  _   _  __| | | (___ | |__   ___| | |  \\ \\ /\\ / / _` / __| '_ ` _ \\| |    | |/ _ \\| | | |/ _` |  \\___ \\| '_ \\ / _ \\ | |   \\ V  V / (_| \\__ \\ | | | | | |____| | (_) | |_| | (_| |  ____) | | | |  __/ | |    \\_/\\_/ \\__,_|___/_| |_| |_|\\_____|_|\\___/ \\__,_|\\__,_| |_____/|_| |_|\\___|_|_| ```  > [! WARNING] > This crate is being deprecated in favor of [wash](https://crates. io/crates/wash), where the wash CLI will be published from now on. - [Why wash](#why-wash) - [Installing wash](#installing-wash)   - [Cargo](#cargo)   - [Linux (deb/rpm + apt)](#linux-debrpm--apt)   - [Linux (snap)](#linux-snap)   - [Linux (brew)](#linux-brew)   - [MacOS (brew)](#macos-brew)   - [Windows (choco)](#windows-choco)   - [Nix](#nix) - [Proxy authentication](#proxy-authentication) - [Using wash](#using-wash) - [Shell auto-complete](#shell-auto-complete) - [Contributing to wash](#contributing-to-wash)  ## Why wash  `wash` is a bundle of command line tools that, together, form a comprehensive CLI for [wasmCloud](https://wasmcloud. com) development. Everything from generating new wasmCloud projects, starting local development infrastructure, interacting with OCI compliant registries, and deploying applications is contained within the subcommands of `wash`. Our goal with `wash` is to encapsulate our tools into a single binary to make developing WebAssembly with wasmCloud painless and simple."
  },
  {
    "name": "input_yew",
    "replacement": "input-rs",
    "message": "# 💡 Input Yew  > ⚠️ **Warning**: This crate has been moved to [`input-rs`](https://crates. io/crates/input-rs). > Please use [`input-rs`](https://crates. io/crates/input-rs) instead of `input_yew`. [! [Crates."
  },
  {
    "name": "dfsql",
    "replacement": "len",
    "message": "# `dfsql`  ! [](img/terminal. png)  - Revision: the standalone `count` command is replaced with `len`, so make sure to replace `(count)` and `col \"count\"` with `len` and `col \"len\"` respectively. - the unary `count <col>` command is unaffected. ## Install  ```bash cargo install dfsql ```  ## How to run  ```bash dfsql --input your. csv --output a-new. csv # . ."
  },
  {
    "name": "libparasail-sys",
    "replacement": "parasail-rs",
    "message": "io/crates/libparasail-sys)  This crate provides unsafe Rust bindings for [parasail](https://github. com/jeffdaily/parasail). You might be interested in [parasail-rs](https://github. com/nsbuitrago/parasail-rs), which provides safe Rust bindings and a wrapper to parasail. Note that [parasail-sys](https://github. com/anp/parasail-sys) similarly provides unsafe Rust bindings, but has been archived since 2020. The intention of libparasail-sys is to provide an up to date set of bindings for parasail and slightly different API. ## Building  Assuming you have [cargo](https://doc. rust-lang. org/stable/cargo/) setup, you can build libparasail-sys to check that the bindings compile with `cargo build`. Note that we try and use system parasail by default and then try to build using CMake if no system package is found (see [build."
  },
  {
    "name": "swc_plugin",
    "replacement": "swc_core",
    "message": "## swc_plugin (PUBLIC INTERFACE DEPRECATED)  Provides internal implementation detail to communicate between `@swc/core` to the plugin. NOTE: This was previously entrypoint sdk to authoring a plugin, but `swc_core` becomes a meta entrypoint to any features SWC provides (https://github. com/swc-project/swc/discussions/5244)."
  },
  {
    "name": "quiche-mallard",
    "replacement": "quiche",
    "message": "io/github/actions/workflow/status/cloudflare/quiche-mallard/stable. yml? branch=master)  _This was a fork of cloudflare/quiche to test new zero-copy and congestion control patches. These have been merged upstream as of quiche 0. 24. quiche-mallard is now considered deprecated and archived. _  [quiche] is an implementation of the QUIC transport protocol and HTTP/3 as specified by the [IETF]. It provides a low level API for processing QUIC packets and handling connection state. The application is responsible for providing I/O (e. g. sockets handling) as well as an event loop with support for timers."
  },
  {
    "name": "yeslogic-ucd-generate",
    "replacement": "regex-cli",
    "message": "pub const BY_NAME: &'static [(&'static str, &'static [(char, char)])] = &[   (\"Dash\", DASH), (\"Hyphen\", HYPHEN), (\"Quotation_Mark\", QUOTATION_MARK), ];  pub const DASH: &'static [(char, char)] = &[   ('-', '-'), ('֊', '֊'), ('־', '־'), ('᐀', '᐀'), ('᠆', '᠆'),   ('‐', '―'), ('⁓', '⁓'), ('⁻', '⁻'), ('₋', '₋'),   ('−', '−'), ('⸗', '⸗'), ('⸚', '⸚'), ('⸺', '⸻'),   ('⹀', '⹀'), ('\\u{2e5d}', '\\u{2e5d}'), ('〜', '〜'), ('〰', '〰'),   ('゠', '゠'), ('︱', '︲'), ('﹘', '﹘'), ('﹣', '﹣'),   ('－', '－'), ('𐺭', '𐺭'), ];  pub const HYPHEN: &'static [(char, char)] = &[   ('-', '-'), ('\\u{ad}', '\\u{ad}'), ('֊', '֊'), ('᠆', '᠆'),   ('‐', '‑'), ('⸗', '⸗'), ('・', '・'), ('﹣', '﹣'),   ('－', '－'), ('･', '･'), ];  pub const QUOTATION_MARK: &'static [(char, char)] = &[   ('\"', '\"'), ('\\'', '\\''), ('«', '«'), ('»', '»'), ('‘', '‟'),   ('‹', '›'), ('⹂', '⹂'), ('「', '』'), ('〝', '〟'),   ('﹁', '﹄'), ('＂', '＂'), ('＇', '＇'), ('｢', '｣'), ]; ```  ### DFA serialization  Prior to `ucd-generate 0. 3. 0`, the sub-commands `dfa` and `regex` could be used to build fully compiled DFAs, serialize them to disk and generate Rust code for deserializing them. This functionality was removed in `0. 3. 0` and [moved to `regex-cli`](https://github. com/rust-lang/regex/tree/master/regex-cli#example-serialize-a-dfa). ### Contributing  The `ucd-generate` tool doesn't have any specific design goals, other than to collect Unicode table generation tasks. If you need `ucd-generate` to do something and it's reasonably straight-forward to add, then just submitting a PR would be great. Otherwise, file an issue and we can discuss. ### Alternatives  The primary alternative is [ICU4X](https://github."
  },
  {
    "name": "sunrise-next",
    "replacement": "sunrise",
    "message": "[](https://img. shields. io/crates/v/sunrise)][crate] [! [](https://img. shields. io/docsrs/sunrise)][docs]  ⚠️ This repository is deprecated as all changes have been ported upstream, please use [sunrise](https://crates. io/crates/sunrise). This crate provides a function for calculating sunrise and sunset times using [this method](https://en. wikipedia. org/wiki/Sunrise_equation#Complete_calculation_on_Earth). You can enable the **no-std feature** if you need it to work in such a context, it will rely on `libm` instead."
  },
  {
    "name": "wasm-tools",
    "replacement": "wasm-compose",
    "message": "# Tools included  The `wasm-tools` binary internally contains a number of subcommands for working with wasm modules and component. Many subcommands also come with Rust crates that can be use programmatically as well:  | CLI | Rust Crate | Playground | Description | |------|------|--------|------------| | `wasm-tools validate` | [wasmparser] |  | Validate a WebAssembly file | | `wasm-tools parse` | [wat] and [wast] | [parse](https://bytecodealliance. github. io/wasm-tools/parse) | Translate the WebAssembly text format to binary | | `wasm-tools print` | [wasmprinter] | [print](https://bytecodealliance. github. io/wasm-tools/print) | Translate the WebAssembly binary format to text | | `wasm-tools smith` | [wasm-smith] |  | Generate a valid WebAssembly module from an input seed | | `wasm-tools mutate` | [wasm-mutate] |  | Mutate an input wasm file into a new valid wasm file | | `wasm-tools shrink` | [wasm-shrink] |  | Shrink a wasm file while preserving a predicate | | `wasm-tools dump` |   |  | Print debugging information about the binary format | | `wasm-tools objdump` |   |  | Print debugging information about section headers | | `wasm-tools strip` |   |  | Remove custom sections from a WebAssembly file | | `wasm-tools demangle` |   |  | Demangle Rust and C++ symbol names in the `name` section | | `wasm-tools compose` | [wasm-compose] |  | Compose wasm components together (*deprecated*) | | `wasm-tools component new` | [wit-component] |  | Create a component from a core wasm binary | | `wasm-tools component wit` |  |  | Extract a `*. wit` interface from a component | | `wasm-tools component embed` |  |  | Embed a `component-type` custom section in a core wasm binary | | `wasm-tools component unbundle` |  |  | Extract core wasm modules from a component | | `wasm-tools metadata show` |  [wasm-metadata] |  | Show name and producer metadata in a component or module | | `wasm-tools metadata add` |  |  | Add name or producer metadata to a component or module | | `wasm-tools addr2line` |  |  | Translate wasm offsets to filename/line numbers with DWARF | | `wasm-tools completion` |  |  | Generate shell completion scripts for `wasm-tools` | | `wasm-tools json-from-wast` |  |  | Convert a `*. wast` file into JSON commands | | `wasm-tools wast` |  |  | Validate the structure of a `*. wast` file |  [wasmparser]: https://crates. io/crates/wasmparser [wat]: https://crates. io/crates/wat [wast]: https://crates."
  },
  {
    "name": "reflux",
    "replacement": "Tokio",
    "message": "# Use cases - Pipeline workflows - Reflux is perfect for use cases such as ETL (Extract, Transform and Load) applications, image processing and real-time analytics. - Routing - Leverage the flexibility of Reflux to build routing applications, such as reverse proxies, with safety and simplicity. - Load balancing - Data can be distributed amongst multiple endpoints, allowing for scaling of applications. # When not to use Reflux - I/O bound applications. Reflux is designed for CPU-bound applications, where many tasks are run simultaneously. If your use case is I/O focused, it is recommended to use a runtime such as [Tokio](https://tokio. rs/). However, you can use the two simultaneously - leverage the CPU-bound tasks to Reflux and the IO-bound tasks to Tokio! - Web servers. Reflux is best served for applications where the data flows in one direction (i. e extraction, transformation, and loading)."
  },
  {
    "name": "asmov-common-testing",
    "replacement": "srctrait-common-testing",
    "message": "Moved to srctrait-common-testing"
  },
  {
    "name": "sindri-openapi",
    "replacement": "sindri",
    "message": "# Rust API client for Sindri  > ⚠️ **WARNING! **<br> > This is an autogenerated client used by `sindri`. > It is not recommended to use this package or documentation directly. > Instead, refer to the [`sindri` package](https://crates. io/crates/sindri)."
  },
  {
    "name": "li_wgpu_glyph",
    "replacement": "glyphon",
    "message": "# wgpu_glyph  > [! WARNING] > This crate has been superseded by [`glyphon`]. > > [`glyphon`] has a better design that fits better with [`wgpu`]. Furthermore, it is built on top of [`cosmic-text`], which supports many more advanced text use cases. [`glyphon`]: https://github. com/grovesNL/glyphon [`wgpu`]: https://github. com/gfx-rs/wgpu [`cosmic-text`]: https://github."
  },
  {
    "name": "spade-docker",
    "replacement": "buildx",
    "message": "list              List built images. clean             Prune built images. data-directory    Print data directory. ```  You can see fine-grained usage information by passing `--help` for each subcommand. ## Prerequisites  Please install [buildx](https://github. com/docker/buildx), the new build system for Docker, if you don't have it already (the old one is deprecated). Also, make sure to use the official Docker daemon. ## Install  ``` git clone https://github. com/ethanuppal/spade-docker cd spade-docker  # to install locally chmod u+x . /spade-docker  # to install to $PATH cargo install --path . ```  Here, we're using the helper script, but you can similarly install `spade-docker` system-wide with `cargo install --path ."
  },
  {
    "name": "asmov-common-testing-macro",
    "replacement": "srctrait-common-testing-macro",
    "message": "Moved to srctrait-common-testing-macro"
  },
  {
    "name": "nostr-sqlite",
    "replacement": "nostr-lmdb",
    "message": "# Nostr SQLite  Deprecated! Check [`nostr-lmdb`](https://crates. io/crates/nostr-lmdb) instead. ## State  **This library is in an ALPHA state**, things that are implemented generally work but the API will change in breaking ways. ## Donations  `rust-nostr` is free and open-source. This means we do not earn any revenue by selling it."
  },
  {
    "name": "lento-yoga",
    "replacement": "taffy",
    "message": "org/bschwind/yoga-rs. svg? branch=master)](https://travis-ci. org/bschwind/yoga-rs)  A Rust wrapper for Facebook's Yoga layout library. You may also want to check out [taffy](https://github. com/dioxuslabs/taffy) (a revived fork of the abandoned [stretch](https://github. com/vislyhq/stretch)) as it is a pure Rust implementation. Dependencies ------------ - cargo - rustc - libc++-dev (LLVM’s libc++)  Build -----     $ cargo build --release  Run Example ----------- \t$ cargo run --release --example layout  Format Code ----------- \t$ cargo +nightly fmt  Example Code ------------ ```rust #[macro_use] extern crate yoga;  use yoga::prelude::*; use yoga::Node; use yoga::StyleUnit::{Auto, UndefinedValue};  fn main() { \tlet mut node = Node::new();  \tlet mut child = Node::new(); \tlet mut other_child = Node::new();  \tnode. insert_child(&mut child, 0); \tnode. insert_child(&mut other_child, 1);  \tstyle! (node, \t\tMargin(10 pt), \t\tMarginLeft(Auto), \t\tPaddingHorizontal(4 pt), \t\tLeft(16 %), \t\tBottom(UndefinedValue) \t);  \tlet child_styles = make_styles!"
  },
  {
    "name": "welds-cli",
    "replacement": "Gumbo",
    "message": "<div align=\"center\">   <img src=\"https://raw. githubusercontent. com/weldsorm/welds/main/page/src/assets/images/banner. png\"/>   <h3>An async ORM written in rust using sqlx and/or Tiberius. </h3> </div>   # DEPRECATED: Welds - CLI  ## The welds-cli tool has been deprecated in favor of the cli tool [Gumbo](https://crates. io/crates/gumbo). This cli is much better maintains and serves the same purpose. Welds is an ORM for Rust. This crate is a command line tool to help you use welds. It is used to generate rust code for your struct definitions."
  },
  {
    "name": "optivorbis",
    "replacement": "OptiVorbis",
    "message": "- [`rehuff`](https://wiki. xiph. org/Rehuff): a proprietary, proof of concept program for optimizing Vorbis streams from 2002, written by Segher Boessenkool. OptiVorbis expands upon the optimization techniques said to be implemented in `rehuff`, offering a much more finished, reliable solution that is open-source. # ⛔ Known limitations  As a concession to implementation simplicity, Vorbis streams that use the floor signal component format of type 0 are not supported. According to the Vorbis I specification, this format is \"of limited modern use\" and has been effectively deprecated by every known Vorbis encoder for more than 20 years, so streams with this floor type should be extremely rare to find. Pull requests that address this limitation are welcome. Due to the two-pass optimization algorithm described above, OptiVorbis is not readily applicable for live-streaming use cases. The Vorbis I setup header codebook format is vulnerable to denial of service attacks, as extremely dense prefix code trees, which take a significantly long time to parse, are valid according to the specification. OptiVorbis does not impose a depth or density limit in such trees, which guarantees its interoperability, but renders it vulnerable to specially-crafted files. This may be addressed in the future as information about the interoperability and mitigation impact of limiting the tree depth is gathered."
  },
  {
    "name": "asmov-common-tooling",
    "replacement": "srctrait-common-tooling",
    "message": "Moved to srctrait-common-tooling"
  },
  {
    "name": "bounded-integer-macro",
    "replacement": "serde1",
    "message": "- `arbitrary1`: Implement [`Arbitrary`] for the bounded integers. This is useful when using bounded integers as fuzzing inputs. - `bytemuck1`: Implement [`Contiguous`] for all bounded integers, and [`Zeroable`] for macro-generated bounded integers that support it. - `num-traits02`: Implement [`Bounded`], [`AsPrimitive`], [`FromPrimitive`], [`NumCast`], [`ToPrimitive`], [`CheckedAdd`], [`CheckedDiv`], [`CheckedMul`], [`CheckedNeg`], [`CheckedRem`], [`CheckedSub`], [`MulAdd`], [`SaturatingAdd`], [`SaturatingMul`] and [`SaturatingSub`] for all const-generic bounded integers. - `serde1`: Implement [`Serialize`] and [`Deserialize`] for the bounded integers, making sure all values will never be out of bounds. This has a deprecated alias `serde`. - `zerocopy`: Implement [`IntoBytes`] for all bounded integers, and [`Unaligned`] for macro-generated ones. - `step_trait`: Implement the [`Step`] trait which allows the bounded integers to be easily used in ranges. This will require you to use nightly and place `#! [feature(step_trait)]` in your crate root if you use the macro. [`bounded_integer!"
  },
  {
    "name": "bounded-integer",
    "replacement": "serde1",
    "message": "- `arbitrary1`: Implement [`Arbitrary`] for the bounded integers. This is useful when using bounded integers as fuzzing inputs. - `bytemuck1`: Implement [`Contiguous`] for all bounded integers, and [`Zeroable`] for macro-generated bounded integers that support it. - `num-traits02`: Implement [`Bounded`], [`AsPrimitive`], [`FromPrimitive`], [`NumCast`], [`ToPrimitive`], [`CheckedAdd`], [`CheckedDiv`], [`CheckedMul`], [`CheckedNeg`], [`CheckedRem`], [`CheckedSub`], [`MulAdd`], [`SaturatingAdd`], [`SaturatingMul`] and [`SaturatingSub`] for all const-generic bounded integers. - `serde1`: Implement [`Serialize`] and [`Deserialize`] for the bounded integers, making sure all values will never be out of bounds. This has a deprecated alias `serde`. - `zerocopy`: Implement [`IntoBytes`] for all bounded integers, and [`Unaligned`] for macro-generated ones. - `step_trait`: Implement the [`Step`] trait which allows the bounded integers to be easily used in ranges. This will require you to use nightly and place `#! [feature(step_trait)]` in your crate root if you use the macro. [`bounded_integer!"
  },
  {
    "name": "belt-ecb",
    "replacement": "cts",
    "message": "This crate is deprecated. For implementation of the `belt-ecb` mode you can use the [`cts`] crate with block cipher implementation from the [`belt-block`] crate:  ```rust,ignore use cts::{Decrypt, Encrypt, KeyInit}; use hex_literal::hex;  type BeltEcb = cts::EcbCs2<belt_block::BeltBlock>;  // Test vector from STB 34. 101. 31-2020, table A. 9 let key = hex! (     \"E9DEE72C 8F0C0FA6 2DDB49F4 6F739647\"     \"06075316 ED247A37 39CBA383 03A98BF6\" ); let pt = hex!"
  },
  {
    "name": "host_discovery",
    "replacement": "Whoami",
    "message": "# This repository is no longer maintained. This crate might be a better choice: [Whoami](https://github. com/ardaku/whoami)\r \r ### Basic Usage\r ```rust\r use host_discovery::{gpu, x86_cpu, OSProfile};\r \r fn main() {\r     let profile = OSProfile::new(). computer_name(). win_edition(). build();\r \r     let os = profile."
  },
  {
    "name": "aws-smithy-mocks-experimental",
    "replacement": "aws-smithy-mocks",
    "message": "# aws-smithy-mocks-experimental  This crate was an experimental playground for mocking Smithy generated clients. It is now deprecated and has been replaced by [`aws-smithy-mocks`](https://crates. io/crates/aws-smithy-mocks). Please migrate to the newer crate. <! -- anchor_start:footer --> This crate is part of the [AWS SDK for Rust](https://awslabs. github."
  },
  {
    "name": "rabe",
    "replacement": "serde",
    "message": "[License](https://img. shields. io/crates/l/rabe? style=plastic)](https://github. com/Fraunhofer-AISEC/rabe/blob/master/LICENSE)  # Rabe  rabe is a rust library implementing several Attribute Based Encryption (ABE) schemes using a modified version of the `bn` library of zcash (type-3 pairing / Baretto Naering curve). The modification of `bn` brings in `serde` or `borsh` instead of the deprecated `rustc_serialize`. The standard serialization library is `serde`. If you want to use `borsh`, you need to specify it as feature. For integration in distributed applications contact [us](mailto:info@aisec. fraunhofer. de)."
  },
  {
    "name": "completers",
    "replacement": "clap",
    "message": "md`](doc/MECHANISM. md) for a detailed explanation of how this works, in case you're curious. ## 🎉 Credits  - [`clap`](https://github. com/clap-rs/clap), whose code and API is used as a reference. When `clap`'s [Rust-Native Completion Engine](https://github. com/clap-rs/clap/issues/3166) is stablized, this crate will be deprecated in favor of it. - [`complete-alias`](https://github. com/cykerway/complete-alias), whose shell code helped a lot. ## ✅ TODO  - [ ] Escape special characters in generated shell code & completion candidates - [ ] Completion delegation     - Need to consider how to design the API     - Prototypes available in [`prototype`](. /prototype) - [ ] Extensibility (API? )"
  },
  {
    "name": "yew-accordion",
    "replacement": "accordion-rs",
    "message": "# 🎵 Yew Accordion  > ⚠️ **Warning**: This crate has been moved to [`accordion-rs`](https://crates. io/crates/accordion-rs). > Please use [`accordion-rs`](https://crates. io/crates/accordion-rs) instead of `yew-accordion`. [! [Crates."
  },
  {
    "name": "icu4x",
    "replacement": "icu",
    "message": "(deprecated crate: use the icu crate) International Components for Unicode"
  },
  {
    "name": "async-std",
    "replacement": "smol",
    "message": "Deprecated in favor of `smol` - Async version of the Rust standard library"
  },
  {
    "name": "abstract-std",
    "replacement": "abstract-sdk",
    "message": "# Abstract  This package contains everything you need to interact with Abstract contracts. This package contains: * Abstract contract interface messages * Abstract contract states * Abstract objects (preferably use the re-exported version in [Abstract-SDK](https://crates. io/crates/abstract-sdk))  ## Usage ```rust // Import a contract Exec/Init/Query message abstract_std::contract::ExecuteMsg // Import a contract state lay-out abstract_std::contract::state::STATE // Import a state object abstract_std::object::ProxyValue; ```  ## Messages  Each interface in individually commented. ## States Each state-layout is also individually covered  ## Objects Abstract Objects are used to store information along with helper functions. We provide these as imports so the data can be retrieved externally (using Raw Queries). If you want to use these objects in your own contracts we suggest using the abstract-sdk package."
  },
  {
    "name": "deunicode",
    "replacement": "any_ascii",
    "message": "com) by Cal Henderson  * [gh emoji](https://lib. rs/gh-emoji)  * [any_ascii](https://anyascii. com/)  For a detailed explanation on the rationale behind the original dataset, refer to [this article](http://interglacial. com/~sburke/tpj/as_html/tpj22. html) written by Burke in 2001. This is a maintained alternative to the [unidecode](https://lib. rs/crates/unidecode) crate, which started as a Rust port of [`Text::Unidecode`](http://search. cpan. org/~sburke/Text-Unidecode-1. 30/lib/Text/Unidecode. pm) Perl module."
  },
  {
    "name": "snmp2",
    "replacement": "SNMP2",
    "message": "yml\">     <img alt=\"GitHub Actions CI\" src=\"https://github. com/roboplc/snmp2/actions/workflows/ci. yml/badge. svg\"></img>   </a> </h2>  Dependency-free basic SNMP v1/v2/v3 client in Rust. This is a fork of the original [snmp](https://crates. io/crates/snmp) crate which has been abandoned long time ago. SNMP2 is a part of [RoboPLC](https://www. roboplc. com) project. New features added to the fork:  - SNMP v1 support (including v1 traps) - SNMP v3 authentication (MD5, SHA1, SHA224, SHA256, SHA384, SHA512) - SNMP v3 privacy (DES, AES128, AES192, AES256) - MIBs support (requires `mibs` feature and `libnetsnmp` library installed) - Async session (requires `tokio` feature) - Crate code has been refactored and cleaned up - OIDs have been migrated to   [asn1](https://docs. rs/asn1-rs/latest/asn1_rs/struct."
  },
  {
    "name": "axum-controller",
    "replacement": "axum-folder-router",
    "message": "rs/axum-controller/badge. svg)](https://docs. rs/axum-controller) ! [Maintenance](https://img. shields. io/badge/maintenance-deprecated-red. svg)  # DEPRECATED  This crate does not receive further development, it *might* work for your use case. I've changed how I do routing & recommend checking out [axum-folder-router](https://crates. io/crates/axum-folder-router). # Axum-Controller  Helper macro's for wiring up axum routes with less boilerplate. See example [here](axum-controller/examples/controller."
  },
  {
    "name": "poissonrecon",
    "replacement": "poisson_reconstruction",
    "message": "Original source: <https://github. com/mkazhdan/PoissonRecon>  ## Example  ```rust let mesh = poissonrecon::reconstruct_surface(     &points,     &normals,     &poissonrecon::PoissonParamsBuilder::default(). build(), )? ; ```  ## Comparison to the [`poisson_reconstruction`](https://crates. io/crates/poisson_reconstruction) crate  The `poisson_reconstruction` crate is an excellent Rust reimplementation of the Screened Poisson Surface Reconstruction algorithm. It's maintained by the Foresight Mining Software Corporation. This `poissonrecon` crate on the other hand, is a Rust wrapper around Michael Kazhdan's original C++ implementation. It compiles a C++ library that you must drag along with your Rust project. It also exposes more tuning parameters for the algorithm than the `poisson_reconstruction` crate does, which may be useful for some applications. You should use the `poisson_reconstruction` crate if you want a pure Rust implementation. You should use the `poissonrecon` crate if you want to use the original battle-tested implementation, and you don't mind dragging along a C++ library."
  },
  {
    "name": "libpng-sys",
    "replacement": "LodePNG",
    "message": "# Rust bindings for libpng 1. 6  libpng is likely to bring sorrow and regret. I strongly recommend to use a native Rust PNG library instead (e. g. [LodePNG](https://lib. rs/crates/lodepng)). This crate bundles libpng 1. 6."
  },
  {
    "name": "rinja_derive",
    "replacement": "askama",
    "message": "# rinja_derive — *deprecated*  New versions of `rinja` will be released under the name [`askama`](https://crates. io/crates/askama). Please update your dependencies from e. g. `rinja_derive = \"0. 3."
  },
  {
    "name": "askama_axum",
    "replacement": "askama",
    "message": "# askama_axum — *deprecated*  Integration crates like `askama_axum` were removed from askama 0. 13. Useful information can be found in our [upgrade guide], and in our [blog post]. [upgrade guide]: https://askama. readthedocs. io/en/v0."
  },
  {
    "name": "rinja_parser",
    "replacement": "askama",
    "message": "# rinja_parser — *deprecated*  New versions of `rinja` will be released under the name [`askama`](https://crates. io/crates/askama). Please update your dependencies from e. g. `rinja_parser = \"0. 3."
  },
  {
    "name": "askama_actix",
    "replacement": "askama",
    "message": "# askama_actix — *deprecated*  Integration crates like `askama_actix` were removed from askama 0. 13. Useful information can be found in our [upgrade guide], and in our [blog post]. [upgrade guide]: https://askama. readthedocs. io/en/v0."
  },
  {
    "name": "rinja",
    "replacement": "askama",
    "message": "# rinja — *deprecated*  New versions of `rinja` will be released under the name [`askama`](https://crates. io/crates/askama). Please update your dependencies from e. g. `rinja = \"0. 3."
  },
  {
    "name": "askama_rocket",
    "replacement": "askama",
    "message": "# askama_rocket — *deprecated*  Integration crates like `askama_rocket` were removed from askama 0. 13. Useful information can be found in our [upgrade guide], and in our [blog post]. [upgrade guide]: https://askama. readthedocs. io/en/v0."
  },
  {
    "name": "askama_warp",
    "replacement": "askama",
    "message": "# askama_warp — *deprecated*  Integration crates like `askama_warp` were removed from askama 0. 13. Useful information can be found in our [upgrade guide], and in our [blog post]. [upgrade guide]: https://askama. readthedocs. io/en/v0."
  },
  {
    "name": "fontconfig",
    "replacement": "yeslogic-fontconfig-sys",
    "message": "This can be useful in cross-compiling situations as you don't need to have a version of Fontcofig available for the target platform available at compile time. Other Fontconfig Crates -----------------------  * [servo-fontconfig] — This crate provides a low-level interface only. It   depends on [servo-fontconfig-sys], which will fall back to building a   vendored version of Fontconfig if a compatible version can't be found. It   in-turn depends on [expat-sys], which does the same thing regarding a vendored   version of Expat. This makes it easier if you are distributing a code base   that needs Fontconfig, but provides less control over the libraries that will   be used. * [fontconfig-sys] — superseded by [yeslogic-fontconfig-sys]. * [yeslogic-fontconfig] — This crate was previously published under this name before we were given access to publish it as [fontconfig]. For our needs in [Prince] we wanted higher-level bindings that did not fall back on vendored versions of libraries, which is what the crates in this repo provide. Credits -------  Thanks to [Austin Bonander][abonander] for originally creating the `fontconfig` crate and [allowing us to publish ours under that name](https://github. com/abonander/fontconfig-rs/issues/9). [conrod]: https://github."
  },
  {
    "name": "geo-uom",
    "replacement": "serde",
    "message": "* `std` -- Feature to compile with standard library support. Disabling this feature compiles `uom`    with `no_std`. Enabled by default. * `serde` -- Feature to enable support for serialization and deserialization of quantities with the    [Serde][serde] crate. Disabled by default. Replaces the deprecated `use_serde` feature, which will    be removed in a future `uom` release (v0. 37. 0 or later). [si]: https://jcgm. bipm. org/vim/en/1."
  },
  {
    "name": "geoscience-uom",
    "replacement": "serde",
    "message": "* `std` -- Feature to compile with standard library support. Disabling this feature compiles `uom`    with `no_std`. Enabled by default. * `serde` -- Feature to enable support for serialization and deserialization of quantities with the    [Serde][serde] crate. Disabled by default. Replaces the deprecated `use_serde` feature, which will    be removed in a future `uom` release (v0. 37. 0 or later). [si]: https://jcgm. bipm. org/vim/en/1."
  },
  {
    "name": "destiny-pkg",
    "replacement": "tiger-pkg",
    "message": "# ⚠ WARNING: This library has been superseded by [tiger-pkg](https://github. com/v4nguard/tiger-pkg)\r \r # Destiny PKG Library\r \r [! [Latest version](https://img. shields. io/crates/v/destiny-pkg. svg)](https://crates."
  },
  {
    "name": "ordermap",
    "replacement": "indexmap",
    "message": "io/badge/rust-1. 63%2B-orange. svg)  A pure-Rust hash table which preserves (in a limited sense) insertion order. This crate implements compact map and set data-structures, where the iteration order of the keys is independent from their hash or value. It preserves insertion order in most mutating operations, and it allows lookup of entries by either hash table key or numerical index. Note: this crate was originally what became the `indexmap` crate, and it was deprecated for a while in favor of that, but then `ordermap` returned as a wrapper over `indexmap` with stronger ordering properties. # Background  This was inspired by Python 3. 6's new dict implementation (which remembers the insertion order and is fast to iterate, and is compact in memory). Some of those features were translated to Rust, and some were not. The results were `ordermap` and `indexmap`, hash tables that have following properties:  - Order is **independent of hash function** and hash values of keys. - Fast to iterate."
  },
  {
    "name": "c2pa-status-tracker",
    "replacement": "c2pa",
    "message": "# `c2pa-status-tracker` crate is DISCONTINUED  This crate has been merged into the [`c2pa` crate](https://crates. io/crates/c2pa). It will no longer be maintained or published as a standalone crate. For the most part, all public APIs can be remapped as follows:  `c2pa_status_tracker::xxx` -> `c2pa::status_tracker::xxx`  There will be no further releases of this crate."
  },
  {
    "name": "lambda-otel-utils",
    "replacement": "lambda-otel-lite",
    "message": "# [DEPRECATED] lambda-otel-utils  > **IMPORTANT: This package is deprecated and no longer maintained. ** >  > For similar functionality with an improved API, please consider using [lambda-otel-lite](https://crates. io/crates/lambda-otel-lite). While not a direct replacement (APIs differ), it solves the same problems with a more modern implementation. `lambda-otel-utils` is a Rust library that simplifies the integration of OpenTelemetry tracing and metrics with AWS Lambda functions. It provides utilities for setting up and configuring OpenTelemetry in serverless environments, making it easier to implement distributed tracing and metrics collection in your Lambda-based applications."
  },
  {
    "name": "otlp-stdout-client",
    "replacement": "otlp-stdout-span-exporter",
    "message": "# [DEPRECATED] otlp-stdout-client  > **IMPORTANT: This package is deprecated and no longer maintained. ** >  > For similar functionality with an improved API, please consider using [otlp-stdout-span-exporter](https://crates. io/crates/otlp-stdout-span-exporter). While not a direct replacement (APIs differ), it solves the same problems with a more modern implementation. The `otlp-stdout-client` library is designed to export OpenTelemetry data to stdout in a formatted JSON structure, suitable for serverless environments like AWS Lambda. It implements the `opentelemetry_http::HttpClient` interface and can be used in an OpenTelemetry OTLP pipeline to send OTLP data (both JSON and Protobuf formats) to stdout."
  },
  {
    "name": "askama-derive-axum",
    "replacement": "askama_axum",
    "message": "Derive macro for Askama templates with Axum integration. Replacement for future deprecation of askama_axum crate."
  },
  {
    "name": "ytdlr",
    "replacement": "yt-dlp",
    "message": "# Youtube-DL rust cli interface (ytdlr)  A CLI interface for `youtube-dl` (or `yt-dlp` available in PATH as `youtube-dl`) written in RUST. Also contains some helper functions like [rethumbnailing](#rethumbnail). ## Requirements  - Linux / Mac - build with POSIX system paths in mind (Windows *might* work) - [yt-dlp](https://github. com/yt-dlp/yt-dlp) above `2023. 03. 03`*1 and be accessable via the command `yt-dlp` - ffmpeg is installed and be accessable via the command `ffmpeg` - `libsqlite3-0`(ubuntu) or `core/sqlite`(arch) needs to be present  Notes: - *1 it is recommended to use the latest version available for `yt-dlp`  ### Building requirements  - rust stable 1. 85 profile `minimal` or higher is needed - `build-essentail`(ubuntu) or `base-devel`(arch) needs to be installed - `libsqlite3-dev`(ubuntu) or `core/sqlite`(arch) needs to be installed - `git` needs to be available (required by build-script)  ## Usage  ### Global Options  Signature: `ytdlr [OPTIONS] <SUBCOMMAND>`    (Options for main command, must be set before the subcommands)  | Short |    Long     | Environment Variable |         Default          |        Type         | Description                                                   | | :---: | :---------: | :------------------: | :----------------------: | :-----------------: | :------------------------------------------------------------ | |  -h   |   --help    |                      |                          |        flag         | Print Help Information                                        | |       |  --archive  |     YTDL_ARCHIVE     |                          |        OsStr        | The Archive Path to use for a Archive                         | |       |   --color   |                      |                          |        flag         | Enable Color Output (Currently unused)                        | |       | --debugger  |                      |                          |        flag         | Request a VSCode CodeLLDB Debugger before continuing          | |       |    --tmp    |       YTDL_TMP       | tmpdir + `ytdl_rust_tmp` |        OsStr        | The Temporary Directory to use for storing intermediate Files | |  -v   | --verbosity |    YTDL_VERBOSITY    |            0             | occurences / number | Set the logging verbosity (same as `RUST_LOG`)                | |  -V   |  --version  |                      |                          |        flag         | Print the Version                                             |  Notes:  - `debugger` only works in a target with `debug_assertions` enabled. - `verbosity` is counted by occurences in the command (like `-vv` equals `2`) or a number in the environment variable. (`0 - WARN`, `1 - INFO`, `2 - DEBUG`, `3 - TRACE`) - `archive` is only used when a path is set. ### `download`  Command to download 1 or more URLS with youtube-dl / yt-dlp with extra archive support and edit functionality  Signature: `download [OPTIONS] [URLS]. ."
  },
  {
    "name": "yara-x",
    "replacement": "YARA-X",
    "message": "io/yara-x/docs/intro/yara-x-vs-yara/). #### Which are the differences at the rule level? Read [this](https://virustotal. github. io/yara-x/docs/writing_rules/differences-with-yara/). #### Is YARA still maintained? Yes, it is. YARA is still being maintained, and future releases will include bug fixes and minor features. However, don’t expect new large features or modules. All efforts to enhance YARA, including the addition of new modules, will now focus on YARA-X. #### What's the current state of YARA-X?"
  },
  {
    "name": "yara-x-parser",
    "replacement": "YARA-X",
    "message": "io/yara-x/docs/intro/yara-x-vs-yara/). #### Which are the differences at the rule level? Read [this](https://virustotal. github. io/yara-x/docs/writing_rules/differences-with-yara/). #### Is YARA still maintained? Yes, it is. YARA is still being maintained, and future releases will include bug fixes and minor features. However, don’t expect new large features or modules. All efforts to enhance YARA, including the addition of new modules, will now focus on YARA-X. #### What's the current state of YARA-X?"
  },
  {
    "name": "ferrite-ml",
    "replacement": "ferrite-dl",
    "message": "This crate was moved to ferrite-dl"
  },
  {
    "name": "usb",
    "replacement": "nusb",
    "message": "usb ===  Common definitions for USB constants. License: [0BSD](. /LICENSE) (effectively public domain)  Versions 0. 2 and prior of the `usb` crate contained bindings to libusb for pre-1. 0 Rust, archived on the [`old`](https://github. com/kevinmehall/rust-usb/tree/old) branch. Nowadays, use [nusb](https://crates. io/crates/nusb) for raw access to USB devices from a Windows, Mac, or Linux host."
  },
  {
    "name": "core-math-sys",
    "replacement": "core-math",
    "message": "inria. fr/)  CORE-MATH is a correctly rounded mathematical library in C. Correct rounding is the theoretical accuracy and beats most old C libraries such as glibc. Meanwhile, its speed is competitive with the most popular C libraries, even faster most of the time. This crate provides the raw bindings to the CORE-MATH library. It is recommended to use the [core-math](https://crates. io/crates/core-math) crate directly instead, which provides a safe Rusty interface."
  },
  {
    "name": "stellar-ledger",
    "replacement": "ledger-transport-zemu",
    "message": "com/Zondax/zemu) testing framework, which makes use of Speculos. - To connect with a real ledger device, we use Zondax's [ledger-rs](https://github. com/Zondax/ledger-rs) crate. - To connect with the emulated ledger (Speculos), we created a custom `EmulatorHttpTransport` that can connect to the emulated ledger via HTTP. This is based on [Zondax's `ledger-transport-zemu` crate](https://github. com/Zondax/ledger-rs/blob/20e2a2076d799d449ff6f07eb0128548b358d9bc/ledger-transport-zemu) (which has since been deprecated)."
  },
  {
    "name": "dsh_rest_api_client",
    "replacement": "dsh_sdk",
    "message": "7. 0 - Progenitor version: 0. 7. 0  ### Goals This crate provides: - A client with all methods to call all DSH API endpoints - Pure code generation from the OpenAPI spec  ### Non-Goals This crate does not provide: - Authentication or authorization to DSH - Token management - Functionality to select specific platform/base URL  These goals are provided by the [DSH_SDK](https://crates. io/crates/dsh_sdk) crate. ## Recomended usage It is recommended to use the Rest Token Fetcher from the `dsh_sdk` crate. To do this, add the following to your Cargo. toml file:  ```toml [dependencies] dsh_rest_api_client = \"0. 4\" dsh_sdk = { version = \"0. 6\", features = [\"management-api-token-fetcher\"], default-features = false } tokio = { version = \"1\", features = [\"full\"] } ```  To use the client in your project: ```rust use dsh_rest_api_client::Client; use dsh_sdk::{Platform, ManagementApiTokenFetcherBuilder};  const CLIENT_SECRET: &str = \"YOUR_API_KEY_HERE\"; const TENANT: &str = \"tenant-name\";  #[tokio::main] async fn main() {     let platform = Platform::NpLz;     let client = Client::new(platform. endpoint_rest_api());      let tf = ManagementApiTokenFetcherBuilder::new(platform)         ."
  },
  {
    "name": "get-size2",
    "replacement": "get-size",
    "message": "rs/get-size)\r [! [MIT licensed](https://img. shields. io/badge/license-MIT-blue. svg)](https://github. com/DKerp/get-size/blob/main/LICENSE)\r \r > This repo is a fork of get-size, as it is not maintained anymore. The original repo can be found [here](https://github. com/DKerp/get-size)\r \r Determine the size in bytes an object occupies inside RAM. The [`GetSize`] trait can be used to determine the size of an object inside the stack as well as in the heap. The [`size_of`](https://doc. rust-lang."
  },
  {
    "name": "yew-i18n",
    "replacement": "i18nrs",
    "message": "# 🌐 Yew I18n  > ⚠️ **Warning**: This crate has been moved to [`i18nrs`](https://crates. io/crates/i18nrs). > Please use [`i18nrs`](https://crates. io/crates/i18nrs) instead of `yew-i18n`. [! [Crates."
  },
  {
    "name": "swc_ecmascript",
    "replacement": "swc_core",
    "message": "# Deprecated  In a effort to create a SDK for generic SWC custom runtime (https://github. com/swc-project/swc/discussions/5244), this package is being deprecated. Please refer `swc_core` instead (https://crates. io/crates/swc_core)."
  },
  {
    "name": "alphabet_detector",
    "replacement": "Langram",
    "message": "svg)](https://docs. rs/alphabet_detector)  ## Detects 401 alphabets of 323 languages in 170 scripts  > One language can be written in multiple scripts, so it will be detected as a different [`ScriptLanguage`](https://docs. rs/alphabet_detector/latest/alphabet_detector/enum. ScriptLanguage. html) (language + script)  Does not have any models, just matches the alphabet. Not recommended to use as a standalone detector. It's more like a word separator + language prefilter for an actual language detector ([`Langram`](https://github. com/RoDmitry/langram)). Splits text (iterator `CharIndices`) to words, and detects [`ScriptLanguage`](https://docs. rs/alphabet_detector/latest/alphabet_detector/enum. ScriptLanguage."
  },
  {
    "name": "serde-seeded-derive",
    "replacement": "serde-seeded",
    "message": "io/badge/docs-latest-blue. svg? style=flat-square)](https://docs. rs/serde-seeded)  <! -- cargo-rdme start -->  This is a companion crate for [`serde-seeded`] defining the `SerializeSeeded` and `DeserializeSeeded` derive macros. It is not recommended to use this crate directly. Use the `serde-seeded` crate directly instead with the `derive` feature enabled. [`serde-seeded`]: <https://crates. io/crates/serde-seeded>  <! -- cargo-rdme end -->"
  },
  {
    "name": "actix-web-opentelemetry",
    "replacement": "opentelemetry-instrumentation-actix-web",
    "message": "Deprecated: 0. 22. 0 is the last release for this crate. Use opentelemetry-instrumentation-actix-web instead"
  },
  {
    "name": "egui_virtual_list",
    "replacement": "egui_infinite_scroll",
    "message": "show_rows) widget. This crate has some extra features though:  - Supports items with varying heights     - Heights are calculated lazily and cached, as you scroll further down the list - Supports custom layouts, so you could place multiple items in a single row     - Check the [Gallery Example](https://lucasmerlin. github. io/hello_egui/#/example/gallery) - Allows for adding items at the top without the scroll position changing     - Check the [Chat Example](https://lucasmerlin. github. io/hello_egui/#/example/chat)  There are some limitations though:  - If you want to support a crazy amounts of items (1000000+ items), where you can instantly jump anywhere in the list,   I recommend using egui's built in ScrollArea instead. - Horizontal scrolling is not supported yet, but it should be easy to add if needed. If you want to build a infinite scroll list, I recommend using the [egui_infinite_scroll](https://crates. io/crates/egui_infinite_scroll) crate instead, which is using this crate internally."
  },
  {
    "name": "skl",
    "replacement": "orderwal",
    "message": "## Q & A  - Does the on-disk version `SkipMap` ensure crash safety or power failure resilience? No, If you really need a crash safe, power failure resilience, concurrent-safe and durable ordered write-ahead log implementation,   see [`orderwal`](https://github. com/al8n/orderwal) project. On-disk version `SkipMap` does not ensure crash safety or power failure resilience. Hence, it is not recommended to directly   use the `SkipMap` as a durable database. It is recommended to use the on-disk version `SkipMap` as a final frozen file for quick lookup. ## Related projects  - [`aol`](https://github. com/al8n/aol): Yet another generic purpose, append-only write-ahead log implementation. - [`orderwal`](https://github. com/al8n/orderwal): A generic-purpose, atomic, ordered, zero-copy, concurrent-safe, pre-allocate style (memory map) write-ahead-log for developing databases. ## Tests  - `test`:      ```sh     cargo test --all-features     ```  - `miri` (Stack Borrows)      ```sh     MIRIFLAGS=\"-Zmiri-strict-provenance -Zmiri-disable-isolation -Zmiri-symbolic-alignment-check\" \\     RUSTFLAGS = \"--cfg all_skl_tests\" \\     cargo miri test --all-features     ```  - `miri` (Tree Borrows)      ```sh     MIRIFLAGS=\"-Zmiri-strict-provenance -Zmiri-disable-isolation -Zmiri-symbolic-alignment-check -Zmiri-tree-borrows\" \\     RUSTFLAGS = \"--cfg all_skl_tests\" \\     cargo miri test --all-features     ```  ## Support Platforms  See `cross` section in [GitHub CI file](https://github."
  },
  {
    "name": "deft-yoga",
    "replacement": "taffy",
    "message": "org/bschwind/yoga-rs. svg? branch=master)](https://travis-ci. org/bschwind/yoga-rs)  A Rust wrapper for Facebook's Yoga layout library. You may also want to check out [taffy](https://github. com/dioxuslabs/taffy) (a revived fork of the abandoned [stretch](https://github. com/vislyhq/stretch)) as it is a pure Rust implementation. Dependencies ------------ - cargo - rustc - libc++-dev (LLVM’s libc++)  Build -----     $ cargo build --release  Run Example ----------- \t$ cargo run --release --example layout  Format Code ----------- \t$ cargo +nightly fmt  Example Code ------------ ```rust #[macro_use] extern crate yoga;  use yoga::prelude::*; use yoga::Node; use yoga::StyleUnit::{Auto, UndefinedValue};  fn main() { \tlet mut node = Node::new();  \tlet mut child = Node::new(); \tlet mut other_child = Node::new();  \tnode. insert_child(&mut child, 0); \tnode. insert_child(&mut other_child, 1);  \tstyle! (node, \t\tMargin(10 pt), \t\tMarginLeft(Auto), \t\tPaddingHorizontal(4 pt), \t\tLeft(16 %), \t\tBottom(UndefinedValue) \t);  \tlet child_styles = make_styles!"
  },
  {
    "name": "tor-congestion",
    "replacement": "tor-proto",
    "message": "# tor-congestion  **THIS CRATE IS OBSOLETE AND UNMAINTAINED**  THIS CRATE IS HAS BEEN FOLDED INTO `tor-proto`."
  },
  {
    "name": "cawg-identity",
    "replacement": "c2pa",
    "message": "# `cawg-identity` crate is DISCONTINUED  This crate has been merged into the [`c2pa` crate](https://crates. io/crates/c2pa). It will no longer be maintained or published as a standalone crate. For the most part, all public APIs can be remapped as follows:  > `cawg_identity::xxx` -> `c2pa::identity::xxx`  This version of the `cawg_identity` crate provides `pub use` aliases for all public APIs to match the above remapping. This can be used as a transition measure, but you should change the references in your code as soon as possible. There will be no further releases of this crate."
  },
  {
    "name": "sqlx-oldapi",
    "replacement": "dotenvy",
    "message": "rust-lang. org/cargo/reference/profiles. html) of The Cargo Book)  ```toml [profile. dev. package. sqlx-macros] opt-level = 3 ```  <sup>1</sup> The `dotenv` crate itself appears abandoned as of [December 2021](https://github. com/dotenv-rs/dotenv/issues/74) so we now use the `dotenvy` crate instead. The file format is the same. ## Safety  This crate uses `#! [forbid(unsafe_code)]` to ensure everything is implemented in 100% Safe Rust. If the `sqlite` feature is enabled, this is downgraded to `#!"
  },
  {
    "name": "tui-logger",
    "replacement": "ratatui",
    "message": "com/gin66/tui-logger/blob/master/doc/demo_v0. 14. 4. gif? raw=true)  ### Documentation  [Documentation](https://docs. rs/tui-logger/latest/tui_logger/)  ### Important note for `tui`  The `tui` crate has been archived and `ratatui` has taken over. In order to avoid supporting compatibility for an inactive crate, the v0. 9. x releases are the last to support `tui`. In case future bug fixes are needed, the branch `tui_legacy` has been created to track changes to 0. 9."
  },
  {
    "name": "risc0-zkp",
    "replacement": "metal",
    "message": "rust-lang. org/cargo/reference/features. html) are available. | Feature | Target(s)         | Implies    | Description                                                                                | | ------- | ----------------- | ---------- | ------------------------------------------------------------------------------------------ | | cuda    |                   | prove, std | Turns on CUDA GPU acceleration for the prover. Requires CUDA toolkit to be installed. | | metal   | macos             | prove, std | Deprecated - Metal GPU acceleration for the prover is enabled by default on Apple Silicon. | | prove   | all except rv32im | std        | Enables the prover, incompatible within the zkvm guest. | | std     | all               |            | Support for the Rust stdlib. |"
  },
  {
    "name": "alloy-core",
    "replacement": "Alloy",
    "message": "# Alloy  Core libraries at the root of the Rust Ethereum ecosystem. Alloy is a rewrite of [`ethers-rs`] from the ground up, with exciting new features, high performance, and excellent docs. We have a [book](https://alloy. rs) on all things Alloy and many [examples](https://github. com/alloy-rs/examples) to help you get started. [`ethers-rs`] has been deprecated, and users are recommended to migrate to Alloy. [`ethers-rs`]: https://github. com/gakonst/ethers-rs  [! [Build Status][actions-badge]][actions-url] [! [Telegram chat][telegram-badge]][telegram-url]  [actions-badge]: https://img. shields."
  },
  {
    "name": "self_cell",
    "replacement": "ouroboros",
    "message": "rs/self_cell  ### Installing  [See cargo docs](https://doc. rust-lang. org/cargo/guide/). ## Running the tests  ``` cargo test  cargo miri test ```  ### Related projects  - [ouroboros](https://github. com/joshua-maros/ouroboros) - [rental](https://github. com/jpernst/rental) | soundness issues (tests fail with recent miri versions) and [deprecated](https://github. com/jpernst/rental#warning-this-crate-is-no-longer-maintained-or-supported) - [Schroedinger](https://github. com/dureuill/sc) | [soundness issues](https://github. com/dureuill/sc/issues/1) - [owning_ref](https://github. com/Kimundi/owning-ref-rs) | [soundness issues](https://rustsec. org/advisories/RUSTSEC-2022-0040."
  },
  {
    "name": "nvgx",
    "replacement": "Vulkan",
    "message": "0) compatibility has been considered but not yet tested. The fragmentation and problematic nature of GPU driver implementations across different vendors remain significant issues, as discussed in the [Glium post-mortem](https://users. rust-lang. org/t/glium-post-mortem/7063 ). With OpenGL 4. 0+ APIs being gradually replaced by the more standardized Vulkan, the OpenGL backend should prioritize the relatively stable and unified OpenGL 3. 1 standard. Although OpenGL 4. 0 has been in existence for 15 years and is supported by the vast majority of modern GPUs, backward compatibility concerns for OpenGL 3. 1 are largely obsolete for contemporary hardware. Earlier versions like OpenGL 2."
  },
  {
    "name": "sha0",
    "replacement": "SHA-1",
    "message": "# sha0\r \r **Disclaimer:**  \r SHA-0 is the original version of the Secure Hash Algorithm, published in 1993. It was quickly replaced by SHA-1 due to a discovered flaw in its design. SHA-0 is considered obsolete and insecure, and **should not be used for any important or security-critical purposes**. ## Usage\r \r Add to your `Cargo. toml`:\r \r ```toml\r sha0 = \"0. 1. 13\"\r ```\r \r ### Hashing a string\r \r ```rust\r use sha0::Sha0;\r \r let mut hasher = Sha0::new();\r hasher."
  },
  {
    "name": "postscript",
    "replacement": "opentype",
    "message": "# PostScript [! [Package][package-img]][package-url] [! [Documentation][documentation-img]][documentation-url] [! [Build][build-img]][build-url]  The package provides a parser of PostScript fonts. It is recommended to use a higher-level abstraction called [`opentype`][opentype], which internally relies on this package. ## Contribution  Your contribution is highly appreciated. Do not hesitate to open an issue or a pull request. Note that any contribution submitted for inclusion in the project will be licensed according to the terms given in [LICENSE. md](LICENSE. md)."
  },
  {
    "name": "vk-sync-fork",
    "replacement": "vk-sync",
    "message": "Simplification of core Vulkan synchronization mechanisms such as pipeline barriers and events. Forked off of the original vk-sync crate which is currently unmaintained."
  },
  {
    "name": "color-rs2",
    "replacement": "color-rs",
    "message": "color-rs2 =========  > This repo is a renamed fork of color-rs, which appears to be unmaintained. > The original repo can be found [here](https://github. com/arturoc/color-rs)  A library that provides types and conversions for working with various color formats."
  },
  {
    "name": "yara-x-cli",
    "replacement": "YARA-X",
    "message": "io/yara-x/docs/intro/yara-x-vs-yara/). #### Which are the differences at the rule level? Read [this](https://virustotal. github. io/yara-x/docs/writing_rules/differences-with-yara/). #### Is YARA still maintained? Yes, it is. YARA is still being maintained, and future releases will include bug fixes and minor features. However, don’t expect new large features or modules. All efforts to enhance YARA, including the addition of new modules, will now focus on YARA-X. #### What's the current state of YARA-X?"
  },
  {
    "name": "yara-x-fmt",
    "replacement": "YARA-X",
    "message": "io/yara-x/docs/intro/yara-x-vs-yara/). #### Which are the differences at the rule level? Read [this](https://virustotal. github. io/yara-x/docs/writing_rules/differences-with-yara/). #### Is YARA still maintained? Yes, it is. YARA is still being maintained, and future releases will include bug fixes and minor features. However, don’t expect new large features or modules. All efforts to enhance YARA, including the addition of new modules, will now focus on YARA-X. #### What's the current state of YARA-X?"
  },
  {
    "name": "wasmcloud-runtime",
    "replacement": "wasmcloud-host",
    "message": "# wasmCloud Runtime  wasmCloud is an open source Cloud Native Computing Foundation (CNCF) project that enables teams to build, manage, and scale polyglot Wasm apps across any cloud, K8s, or edge. ⚠️ This crate is highly experimental and likely to experience breaking changes frequently. The runtime itself is relatively stable, but the APIs and public members of this crate are not guaranteed to be stable. ## Usage  This crate can be used to embed a wasmCloud runtime in a Rust application. You can refer to the [wasmcloud-host](https://crates. io/crates/wasmcloud-host) crate for an example of how to use the runtime, generally it's recommended to use the host crate instead for embedding in an application as this crate is lower level."
  },
  {
    "name": "casper-wasm",
    "replacement": "parity-wasm",
    "message": "# casper-wasm  Note: This was forked from https://github. com/paritytech/parity-wasm as this repo is archived and has issues needing addressed. It is recommended that published version of 0. 45. 0 parity-wasm not be used. Low-level WebAssembly format library. [Documentation](https://docs."
  },
  {
    "name": "pl011-uart",
    "replacement": "arm-pl011-uart",
    "message": "io/crates/pl011-uart) [! [docs. rs page](https://docs. rs/pl011-uart/badge. svg)](https://docs. rs/pl011-uart)  This crate is deprecated. Please use [`arm-pl011-uart`](https://crates. io/crates/arm-pl011-uart) instead. This is not an officially supported Google product. ## License  Licensed under either of  - Apache License, Version 2. 0   ([LICENSE-APACHE](LICENSE-APACHE) or http://www."
  },
  {
    "name": "vbinseq",
    "replacement": "binseq",
    "message": "This is a rust library for reading and writing VBINSEQ files, for a command-line interface see [bqtools](https://github. com/arcinstitute/bqtools). # Notice  This project is no longer under development in this repository. It has been pulled into the main [binseq](https://github. com/arcinstitute/binseq) repository. It is archived here for the time being, but will be removed in the future. ## Overview  At a high-level VBINSEQ is a variant of [BINSEQ](https://github. com/arcinstitute/binseq) with fixed-size record blocks instead of fixed-size records. Each record block is composed of repeating records which each at minimum have a single nucleotide sequence. Each record can optionally have an extended sequence (a paired sequence) and associated quality scores. Importantly, records **cannot** span block boundaries, so all blocks are independent."
  },
  {
    "name": "hexga_base",
    "replacement": "hexga",
    "message": "Hexga Base was renamed/moved to [Hexga Core](https://crates. io/crates/hexga_core)\r \r \r ## Main Hexga crate\r \r Check `hexga` : https://crates. io/crates/hexga if you are interested in a quick start, it regroup multiple hexga crates."
  },
  {
    "name": "onc-rpc",
    "replacement": "ietf",
    "message": "[42, 42, 42, 42];  // Construct the actual RPC message. let msg = RpcMessage::new(     4242,     MessageType::Call(CallBody::new(         100000, \t\t\t\t\t\t\t// Program number         42,\t\t\t\t\t\t\t\t\t// Program version         13,\t\t\t\t\t\t\t\t\t// Procedure number         AuthFlavor::AuthUnix(auth_params),\t// Credentials         AuthFlavor::AuthNone(None),\t\t\t// Response verifier         &payload,     )), );  // Serialise the RPC message, or serialise_into() to reuse buffers. let network_buffer = msg. serialise(). expect(\"serialise message\");  // And do something with it! ```  ## Limitations  I had no use for the following, however PRs to extend this crate are happily accepted :)  * No support for fragmented messages * No support for the [deprecated] and trivially broken Diffie-Hellman   authentication flavor * No defined GSS / Kerberos auth flavor types  The auth flavors not included in this crate can still be used as the flavor discriminant and associated opaque data is available in the application layer - this crate just lacks pre-defined types to describe them. ## Future development  Currently a buffer has to be passed to serialise the complete message into a continuous memory region - it would be nicer to support vectorised I/O to provide zero-copy serialisation too. ## Fuzzing Included in the `fuzz/` directory is a deserialisation fuzzer that attempts to decode arbitrary inputs, and if successful serialises the resulting message and compares the result with the input. Install [`cargo fuzz`] and invoke the fuzzer with `cargo fuzz run parse_serialise -- -jobs=30` for parallelised workers. [deprecated]: https://tools. ietf."
  },
  {
    "name": "pcapture",
    "replacement": "pcapng",
    "message": "unwrap();\r \r     let read_pcapng = PcapNg::read_all(path, pbo). unwrap();\r     /// By default, epb (EnhancedPacketBlock) is used to store data instead of spb (SimplePacketBlock). /// 1 shb (header) + 1 idb (header) + 5 epb (traffic data) = 7\r     assert_eq! (read_pcapng. blocks. len(), 7);\r }\r ```\r \r ### And also the pcap format\r \r Since pcap uses a 16-bit timestamp, it will be exhausted in 2038 (although it sounds far away), so it is recommended to use pcapng now. ```rust\r use pcapture::PcapByteOrder;\r use pcapture::Capture;\r use pcapture::pcap::Pcap; // for read pcap file\r \r fn main() {\r     let path = \"test. pcap\";\r     let pbo = PcapByteOrder::WiresharkDefault;\r \r     let mut cap = Capture::new(\"ens33\"). unwrap();\r     let mut pcap = cap. gen_pcap(pbo);\r     for _ in 0. ."
  },
  {
    "name": "expandenv",
    "replacement": "shellexpand",
    "message": "# expandenv-rs  A Rust crate for expanding environment variables, inspired by [shellexpand](https://github. com/netvl/shellexpand). This might not be very feature complete because I made it for a CLI tool of mine called [boxunbox](https://github. com/dablenparty/boxunbox), but I figured someone else might also find some use because `shellexpand` is now unmaintained."
  },
  {
    "name": "object_store",
    "replacement": "opendal",
    "message": "``` cargo build -p object_store --target wasm32-unknown-unknown ```  ## Related Apache Crates  Here are several related crates in different repositories from other Apache projects. | Crate                    | Description                                 | Documentation                           | | ------------------------ | ------------------------------------------- | --------------------------------------- | | [`object_store_opendal`] | Use [`opendal`] as [`object_store`] backend | [(README)][object_store_opendal-readme] |  [`object_store_opendal`]: https://crates. io/crates/object_store_opendal [`opendal`]: https://crates. io/crates/opendal [object_store_opendal-readme]: https://github. com/apache/opendal/blob/main/integrations/object_store/README. md  ## Community Extensions  There following community maintained crates provide additional functionality for `object_store` and are NOT governed by the Apache Software Foundation. We list them below in the hope they may be useful, but they are not official Apache projects or endorsed by the Apache Arrow project. | Crate                        | Description                                                                      | Documentation                               | | ---------------------------- | -------------------------------------------------------------------------------- | ------------------------------------------- | | [`hdfs_native_object_store`] | Use HDFS as [`object_store`] backend                                             | [(README)][hdfs_native_object_store-readme] | | [`ic_object_store`]          | Use [ICP] blockchain as [`object_store`] backend                                 | [(README)][ic_object_store-readme]          | | [`anda_object_store`]        | Extends the [`object_store`] with metadata management and AES-256-GCM encryption | [(README)][anda_object_store-readme]        |  [`hdfs_native_object_store`]: https://crates. io/crates/hdfs_native_object_store [hdfs_native_object_store-readme]: https://github. com/datafusion-contrib/hdfs-native-object-store [`ic_object_store`]: https://crates. io/crates/ic_object_store [ic_object_store-readme]: https://github."
  },
  {
    "name": "pgwire",
    "replacement": "datafusion-postgres",
    "message": "rs`: demos how to configure more secure authentication   mechanism:   [SCRAM](https://en. wikipedia. org/wiki/Salted_Challenge_Response_Authentication_Mechanism) - `examples/transaction. rs`: see how to control transaction state at wire   protocol level. - `examples/datafusion. rs`: Now moved to   [datafusion-postgres](https://github. com/sunng87/datafusion-postgres)  ### Client/Frontend  The client/frontend API is progress of development. This API will focus on providing full access of postgres wire protocol. It's designed to build components like postgres proxy. For general purpose postgres driver for application development, you can use [rust-postgres](https://github. com/sfackler/rust-postgres)."
  },
  {
    "name": "vopono",
    "replacement": "MozWire",
    "message": "e. forwarding and opening   ports) will not be applied (they are only used when creating the   namespace). The same applies for port forwarding. - OpenVPN credentials are always stored in plaintext in configuration - may add   option to not store credentials, but it seems OpenVPN needs them   provided in plaintext. - There is no easy way to delete MozillaVPN devices (Wireguard   keypairs) - unlike Mullvad this _cannot_ be done on the webpage. I recommend using [MozWire](https://github. com/NilsIrl/MozWire) to manage this. - `gnome-terminal` will not run in the network namespace due to the   client-server model - see issue [#48](https://github. com/jamesmcm/vopono/issues/48) - Port forwarding from inside the network namespace to the host (e. g. for running `transmission-daemon`) does not work correctly when vopono   is run as root - see issue [#84](https://github."
  }
]